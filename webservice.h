/* webservice.h
   Generated by wsdl2h 2.8.58 from http://192.168.10.21/SfcWebService/SFCWebService.asmx?wsdl and typemap.dat
   2018-05-09 12:47:53 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on webservice.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://tempuri.org/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/"
//gsoap ns1   schema namespace:	http://tempuri.org/
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns1__ArrayOfAnyType.
class ns1__ArrayOfAnyType;

//  Forward declaration of class _ns1__DoFunction.
class _ns1__DoFunction;

//  Forward declaration of class _ns1__DoFunctionResponse.
class _ns1__DoFunctionResponse;

//  Forward declaration of class _ns1__UploadTestResult.
class _ns1__UploadTestResult;

//  Forward declaration of class _ns1__UploadTestResultResponse.
class _ns1__UploadTestResultResponse;

//  Forward declaration of class _ns1__CheckSSN.
class _ns1__CheckSSN;

//  Forward declaration of class _ns1__CheckSSNResponse.
class _ns1__CheckSSNResponse;

//  Forward declaration of class _ns1__CheckSSN_USCORENEW.
class _ns1__CheckSSN_USCORENEW;

//  Forward declaration of class _ns1__CheckSSN_USCORENEWResponse.
class _ns1__CheckSSN_USCORENEWResponse;

//  Forward declaration of class _ns1__Binding.
class _ns1__Binding;

//  Forward declaration of class _ns1__BindingResponse.
class _ns1__BindingResponse;

//  Forward declaration of class _ns1__QueryBinding.
class _ns1__QueryBinding;

//  Forward declaration of class _ns1__QueryBindingResponse.
class _ns1__QueryBindingResponse;

//  Forward declaration of class _ns1__SfcTestResult_USCOREUpload.
class _ns1__SfcTestResult_USCOREUpload;

//  Forward declaration of class _ns1__SfcTestResult_USCOREUploadResponse.
class _ns1__SfcTestResult_USCOREUploadResponse;

//  Forward declaration of class _ns1__SaveSSN_USCORENEW.
class _ns1__SaveSSN_USCORENEW;

//  Forward declaration of class _ns1__SaveSSN_USCORENEWResponse.
class _ns1__SaveSSN_USCORENEWResponse;

//  Forward declaration of class _ns1__test.
class _ns1__test;

//  Forward declaration of class _ns1__testResponse.
class _ns1__testResponse;

//  Forward declaration of class _ns1__GETMACID.
class _ns1__GETMACID;

//  Forward declaration of class _ns1__GETMACIDResponse.
class _ns1__GETMACIDResponse;

//  Forward declaration of class _ns1__GetMacBySn.
class _ns1__GetMacBySn;

//  Forward declaration of class _ns1__GetMacBySnResponse.
class _ns1__GetMacBySnResponse;

//  Forward declaration of class _ns1__CartonWeight_USCOREUpload.
class _ns1__CartonWeight_USCOREUpload;

//  Forward declaration of class _ns1__CartonWeight_USCOREUploadResponse.
class _ns1__CartonWeight_USCOREUploadResponse;

//  Forward declaration of class _ns1__PCBData_USCOREUpload.
class _ns1__PCBData_USCOREUpload;

//  Forward declaration of class _ns1__PCBData_USCOREUploadResponse.
class _ns1__PCBData_USCOREUploadResponse;

//  Forward declaration of class _ns1__GetShaoluKey.
class _ns1__GetShaoluKey;

//  Forward declaration of class _ns1__GetShaoluKeyResponse.
class _ns1__GetShaoluKeyResponse;

//  Forward declaration of class _ns1__ReleaseKey.
class _ns1__ReleaseKey;

//  Forward declaration of class _ns1__ReleaseKeyResponse.
class _ns1__ReleaseKeyResponse;

//  Forward declaration of class _ns1__BindKey.
class _ns1__BindKey;

//  Forward declaration of class _ns1__BindKeyResponse.
class _ns1__BindKeyResponse;

//  Forward declaration of class _ns1__GetSparrowCheckData.
class _ns1__GetSparrowCheckData;

//  Forward declaration of class _ns1__GetSparrowCheckDataResponse.
class _ns1__GetSparrowCheckDataResponse;

//  Forward declaration of class _ns1__BlindKeyNum.
class _ns1__BlindKeyNum;

//  Forward declaration of class _ns1__BlindKeyNumResponse.
class _ns1__BlindKeyNumResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/

/// @brief "http://tempuri.org/":ArrayOfAnyType is a complexType.
///
/// class ns1__ArrayOfAnyType operations:
/// - ns1__ArrayOfAnyType* soap_new_ns1__ArrayOfAnyType(soap*) allocate and default initialize
/// - ns1__ArrayOfAnyType* soap_new_ns1__ArrayOfAnyType(soap*, int num) allocate array and default initialize values
/// - ns1__ArrayOfAnyType* soap_new_req_ns1__ArrayOfAnyType(soap*, ...) allocate, set required members
/// - ns1__ArrayOfAnyType* soap_new_set_ns1__ArrayOfAnyType(soap*, ...) allocate, set all public members
/// - ns1__ArrayOfAnyType::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ArrayOfAnyType(soap*, ns1__ArrayOfAnyType*) deserialize from a stream
/// - int soap_write_ns1__ArrayOfAnyType(soap*, ns1__ArrayOfAnyType*) serialize to a stream
/// - ns1__ArrayOfAnyType* ns1__ArrayOfAnyType::soap_dup(soap*) returns deep copy of ns1__ArrayOfAnyType, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ArrayOfAnyType::soap_del() deep deletes ns1__ArrayOfAnyType data members, use only after ns1__ArrayOfAnyType::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ArrayOfAnyType
{ public:
/// Element "anyType" has no type or ref (empty or with XML content).
   $int                                  __sizeanyType                  0;
/// Pointer to array of XML.
    _XML                                *anyType                        0;	///< Elements.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":DoFunction
/// @brief "http://tempuri.org/":DoFunction is a complexType.
///
/// class _ns1__DoFunction operations:
/// - _ns1__DoFunction* soap_new__ns1__DoFunction(soap*) allocate and default initialize
/// - _ns1__DoFunction* soap_new__ns1__DoFunction(soap*, int num) allocate array and default initialize values
/// - _ns1__DoFunction* soap_new_req__ns1__DoFunction(soap*, ...) allocate, set required members
/// - _ns1__DoFunction* soap_new_set__ns1__DoFunction(soap*, ...) allocate, set all public members
/// - _ns1__DoFunction::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DoFunction(soap*, _ns1__DoFunction*) deserialize from a stream
/// - int soap_write__ns1__DoFunction(soap*, _ns1__DoFunction*) serialize to a stream
/// - _ns1__DoFunction* _ns1__DoFunction::soap_dup(soap*) returns deep copy of _ns1__DoFunction, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DoFunction::soap_del() deep deletes _ns1__DoFunction data members, use only after _ns1__DoFunction::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DoFunction
{ public:
/// Element "FunctionName" of XSD type xs:string.
    char*                                FunctionName                   0;	///< Optional element.
/// Element "objs" of XSD type "http://tempuri.org/":ArrayOfAnyType.
    ns1__ArrayOfAnyType*                 objs                           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":DoFunctionResponse
/// @brief "http://tempuri.org/":DoFunctionResponse is a complexType.
///
/// class _ns1__DoFunctionResponse operations:
/// - _ns1__DoFunctionResponse* soap_new__ns1__DoFunctionResponse(soap*) allocate and default initialize
/// - _ns1__DoFunctionResponse* soap_new__ns1__DoFunctionResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__DoFunctionResponse* soap_new_req__ns1__DoFunctionResponse(soap*, ...) allocate, set required members
/// - _ns1__DoFunctionResponse* soap_new_set__ns1__DoFunctionResponse(soap*, ...) allocate, set all public members
/// - _ns1__DoFunctionResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DoFunctionResponse(soap*, _ns1__DoFunctionResponse*) deserialize from a stream
/// - int soap_write__ns1__DoFunctionResponse(soap*, _ns1__DoFunctionResponse*) serialize to a stream
/// - _ns1__DoFunctionResponse* _ns1__DoFunctionResponse::soap_dup(soap*) returns deep copy of _ns1__DoFunctionResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DoFunctionResponse::soap_del() deep deletes _ns1__DoFunctionResponse data members, use only after _ns1__DoFunctionResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DoFunctionResponse
{ public:
/// Element "DoFunctionResult" of XSD type "http://tempuri.org/":ArrayOfAnyType.
    ns1__ArrayOfAnyType*                 DoFunctionResult               0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":UploadTestResult
/// @brief "http://tempuri.org/":UploadTestResult is a complexType.
///
/// class _ns1__UploadTestResult operations:
/// - _ns1__UploadTestResult* soap_new__ns1__UploadTestResult(soap*) allocate and default initialize
/// - _ns1__UploadTestResult* soap_new__ns1__UploadTestResult(soap*, int num) allocate array and default initialize values
/// - _ns1__UploadTestResult* soap_new_req__ns1__UploadTestResult(soap*, ...) allocate, set required members
/// - _ns1__UploadTestResult* soap_new_set__ns1__UploadTestResult(soap*, ...) allocate, set all public members
/// - _ns1__UploadTestResult::soap_default(soap*) default initialize members
/// - int soap_read__ns1__UploadTestResult(soap*, _ns1__UploadTestResult*) deserialize from a stream
/// - int soap_write__ns1__UploadTestResult(soap*, _ns1__UploadTestResult*) serialize to a stream
/// - _ns1__UploadTestResult* _ns1__UploadTestResult::soap_dup(soap*) returns deep copy of _ns1__UploadTestResult, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__UploadTestResult::soap_del() deep deletes _ns1__UploadTestResult data members, use only after _ns1__UploadTestResult::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__UploadTestResult
{ public:
/// Element "objs" of XSD type "http://tempuri.org/":ArrayOfAnyType.
    ns1__ArrayOfAnyType*                 objs                           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":UploadTestResultResponse
/// @brief "http://tempuri.org/":UploadTestResultResponse is a complexType.
///
/// class _ns1__UploadTestResultResponse operations:
/// - _ns1__UploadTestResultResponse* soap_new__ns1__UploadTestResultResponse(soap*) allocate and default initialize
/// - _ns1__UploadTestResultResponse* soap_new__ns1__UploadTestResultResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__UploadTestResultResponse* soap_new_req__ns1__UploadTestResultResponse(soap*, ...) allocate, set required members
/// - _ns1__UploadTestResultResponse* soap_new_set__ns1__UploadTestResultResponse(soap*, ...) allocate, set all public members
/// - _ns1__UploadTestResultResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__UploadTestResultResponse(soap*, _ns1__UploadTestResultResponse*) deserialize from a stream
/// - int soap_write__ns1__UploadTestResultResponse(soap*, _ns1__UploadTestResultResponse*) serialize to a stream
/// - _ns1__UploadTestResultResponse* _ns1__UploadTestResultResponse::soap_dup(soap*) returns deep copy of _ns1__UploadTestResultResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__UploadTestResultResponse::soap_del() deep deletes _ns1__UploadTestResultResponse data members, use only after _ns1__UploadTestResultResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__UploadTestResultResponse
{ public:
/// Element "UploadTestResultResult" of XSD type "http://tempuri.org/":ArrayOfAnyType.
    ns1__ArrayOfAnyType*                 UploadTestResultResult         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":CheckSSN
/// @brief "http://tempuri.org/":CheckSSN is a complexType.
///
/// class _ns1__CheckSSN operations:
/// - _ns1__CheckSSN* soap_new__ns1__CheckSSN(soap*) allocate and default initialize
/// - _ns1__CheckSSN* soap_new__ns1__CheckSSN(soap*, int num) allocate array and default initialize values
/// - _ns1__CheckSSN* soap_new_req__ns1__CheckSSN(soap*, ...) allocate, set required members
/// - _ns1__CheckSSN* soap_new_set__ns1__CheckSSN(soap*, ...) allocate, set all public members
/// - _ns1__CheckSSN::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CheckSSN(soap*, _ns1__CheckSSN*) deserialize from a stream
/// - int soap_write__ns1__CheckSSN(soap*, _ns1__CheckSSN*) serialize to a stream
/// - _ns1__CheckSSN* _ns1__CheckSSN::soap_dup(soap*) returns deep copy of _ns1__CheckSSN, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CheckSSN::soap_del() deep deletes _ns1__CheckSSN data members, use only after _ns1__CheckSSN::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CheckSSN
{ public:
/// Element "strSN" of XSD type xs:string.
    char*                                strSN                          0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":CheckSSNResponse
/// @brief "http://tempuri.org/":CheckSSNResponse is a complexType.
///
/// class _ns1__CheckSSNResponse operations:
/// - _ns1__CheckSSNResponse* soap_new__ns1__CheckSSNResponse(soap*) allocate and default initialize
/// - _ns1__CheckSSNResponse* soap_new__ns1__CheckSSNResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__CheckSSNResponse* soap_new_req__ns1__CheckSSNResponse(soap*, ...) allocate, set required members
/// - _ns1__CheckSSNResponse* soap_new_set__ns1__CheckSSNResponse(soap*, ...) allocate, set all public members
/// - _ns1__CheckSSNResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CheckSSNResponse(soap*, _ns1__CheckSSNResponse*) deserialize from a stream
/// - int soap_write__ns1__CheckSSNResponse(soap*, _ns1__CheckSSNResponse*) serialize to a stream
/// - _ns1__CheckSSNResponse* _ns1__CheckSSNResponse::soap_dup(soap*) returns deep copy of _ns1__CheckSSNResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CheckSSNResponse::soap_del() deep deletes _ns1__CheckSSNResponse data members, use only after _ns1__CheckSSNResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CheckSSNResponse
{ public:
/// Element "CheckSSNResult" of XSD type "http://tempuri.org/":ArrayOfAnyType.
    ns1__ArrayOfAnyType*                 CheckSSNResult                 0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":CheckSSN_NEW
/// @brief "http://tempuri.org/":CheckSSN_NEW is a complexType.
///
/// class _ns1__CheckSSN_USCORENEW operations:
/// - _ns1__CheckSSN_USCORENEW* soap_new__ns1__CheckSSN_USCORENEW(soap*) allocate and default initialize
/// - _ns1__CheckSSN_USCORENEW* soap_new__ns1__CheckSSN_USCORENEW(soap*, int num) allocate array and default initialize values
/// - _ns1__CheckSSN_USCORENEW* soap_new_req__ns1__CheckSSN_USCORENEW(soap*, ...) allocate, set required members
/// - _ns1__CheckSSN_USCORENEW* soap_new_set__ns1__CheckSSN_USCORENEW(soap*, ...) allocate, set all public members
/// - _ns1__CheckSSN_USCORENEW::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CheckSSN_USCORENEW(soap*, _ns1__CheckSSN_USCORENEW*) deserialize from a stream
/// - int soap_write__ns1__CheckSSN_USCORENEW(soap*, _ns1__CheckSSN_USCORENEW*) serialize to a stream
/// - _ns1__CheckSSN_USCORENEW* _ns1__CheckSSN_USCORENEW::soap_dup(soap*) returns deep copy of _ns1__CheckSSN_USCORENEW, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CheckSSN_USCORENEW::soap_del() deep deletes _ns1__CheckSSN_USCORENEW data members, use only after _ns1__CheckSSN_USCORENEW::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CheckSSN_USCORENEW
{ public:
/// Element "strSN" of XSD type xs:string.
    char*                                strSN                          0;	///< Optional element.
/// Element "station" of XSD type xs:string.
    char*                                station                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":CheckSSN_NEWResponse
/// @brief "http://tempuri.org/":CheckSSN_NEWResponse is a complexType.
///
/// class _ns1__CheckSSN_USCORENEWResponse operations:
/// - _ns1__CheckSSN_USCORENEWResponse* soap_new__ns1__CheckSSN_USCORENEWResponse(soap*) allocate and default initialize
/// - _ns1__CheckSSN_USCORENEWResponse* soap_new__ns1__CheckSSN_USCORENEWResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__CheckSSN_USCORENEWResponse* soap_new_req__ns1__CheckSSN_USCORENEWResponse(soap*, ...) allocate, set required members
/// - _ns1__CheckSSN_USCORENEWResponse* soap_new_set__ns1__CheckSSN_USCORENEWResponse(soap*, ...) allocate, set all public members
/// - _ns1__CheckSSN_USCORENEWResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CheckSSN_USCORENEWResponse(soap*, _ns1__CheckSSN_USCORENEWResponse*) deserialize from a stream
/// - int soap_write__ns1__CheckSSN_USCORENEWResponse(soap*, _ns1__CheckSSN_USCORENEWResponse*) serialize to a stream
/// - _ns1__CheckSSN_USCORENEWResponse* _ns1__CheckSSN_USCORENEWResponse::soap_dup(soap*) returns deep copy of _ns1__CheckSSN_USCORENEWResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CheckSSN_USCORENEWResponse::soap_del() deep deletes _ns1__CheckSSN_USCORENEWResponse data members, use only after _ns1__CheckSSN_USCORENEWResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CheckSSN_USCORENEWResponse
{ public:
/// Element "CheckSSN_NEWResult" of XSD type "http://tempuri.org/":ArrayOfAnyType.
    ns1__ArrayOfAnyType*                 CheckSSN_USCORENEWResult       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":Binding
/// @brief "http://tempuri.org/":Binding is a complexType.
///
/// class _ns1__Binding operations:
/// - _ns1__Binding* soap_new__ns1__Binding(soap*) allocate and default initialize
/// - _ns1__Binding* soap_new__ns1__Binding(soap*, int num) allocate array and default initialize values
/// - _ns1__Binding* soap_new_req__ns1__Binding(soap*, ...) allocate, set required members
/// - _ns1__Binding* soap_new_set__ns1__Binding(soap*, ...) allocate, set all public members
/// - _ns1__Binding::soap_default(soap*) default initialize members
/// - int soap_read__ns1__Binding(soap*, _ns1__Binding*) deserialize from a stream
/// - int soap_write__ns1__Binding(soap*, _ns1__Binding*) serialize to a stream
/// - _ns1__Binding* _ns1__Binding::soap_dup(soap*) returns deep copy of _ns1__Binding, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__Binding::soap_del() deep deletes _ns1__Binding data members, use only after _ns1__Binding::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__Binding
{ public:
/// Element "ssn" of XSD type xs:string.
    char*                                ssn                            0;	///< Optional element.
/// Element "csn" of XSD type xs:string.
    char*                                csn                            0;	///< Optional element.
/// Element "key" of XSD type xs:string.
    char*                                key                            0;	///< Optional element.
/// Element "station" of XSD type xs:string.
    char*                                station                        0;	///< Optional element.
/// Element "user" of XSD type xs:string.
    char*                                user                           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":BindingResponse
/// @brief "http://tempuri.org/":BindingResponse is a complexType.
///
/// class _ns1__BindingResponse operations:
/// - _ns1__BindingResponse* soap_new__ns1__BindingResponse(soap*) allocate and default initialize
/// - _ns1__BindingResponse* soap_new__ns1__BindingResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__BindingResponse* soap_new_req__ns1__BindingResponse(soap*, ...) allocate, set required members
/// - _ns1__BindingResponse* soap_new_set__ns1__BindingResponse(soap*, ...) allocate, set all public members
/// - _ns1__BindingResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__BindingResponse(soap*, _ns1__BindingResponse*) deserialize from a stream
/// - int soap_write__ns1__BindingResponse(soap*, _ns1__BindingResponse*) serialize to a stream
/// - _ns1__BindingResponse* _ns1__BindingResponse::soap_dup(soap*) returns deep copy of _ns1__BindingResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__BindingResponse::soap_del() deep deletes _ns1__BindingResponse data members, use only after _ns1__BindingResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__BindingResponse
{ public:
/// Element "BindingResult" of XSD type "http://tempuri.org/":ArrayOfAnyType.
    ns1__ArrayOfAnyType*                 BindingResult                  0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":QueryBinding
/// @brief "http://tempuri.org/":QueryBinding is a complexType.
///
/// class _ns1__QueryBinding operations:
/// - _ns1__QueryBinding* soap_new__ns1__QueryBinding(soap*) allocate and default initialize
/// - _ns1__QueryBinding* soap_new__ns1__QueryBinding(soap*, int num) allocate array and default initialize values
/// - _ns1__QueryBinding* soap_new_req__ns1__QueryBinding(soap*, ...) allocate, set required members
/// - _ns1__QueryBinding* soap_new_set__ns1__QueryBinding(soap*, ...) allocate, set all public members
/// - _ns1__QueryBinding::soap_default(soap*) default initialize members
/// - int soap_read__ns1__QueryBinding(soap*, _ns1__QueryBinding*) deserialize from a stream
/// - int soap_write__ns1__QueryBinding(soap*, _ns1__QueryBinding*) serialize to a stream
/// - _ns1__QueryBinding* _ns1__QueryBinding::soap_dup(soap*) returns deep copy of _ns1__QueryBinding, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__QueryBinding::soap_del() deep deletes _ns1__QueryBinding data members, use only after _ns1__QueryBinding::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__QueryBinding
{ public:
/// Element "DataType" of XSD type xs:string.
    char*                                DataType                       0;	///< Optional element.
/// Element "DataValue" of XSD type xs:string.
    char*                                DataValue                      0;	///< Optional element.
/// Element "querytype" of XSD type xs:string.
    char*                                querytype                      0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":QueryBindingResponse
/// @brief "http://tempuri.org/":QueryBindingResponse is a complexType.
///
/// class _ns1__QueryBindingResponse operations:
/// - _ns1__QueryBindingResponse* soap_new__ns1__QueryBindingResponse(soap*) allocate and default initialize
/// - _ns1__QueryBindingResponse* soap_new__ns1__QueryBindingResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__QueryBindingResponse* soap_new_req__ns1__QueryBindingResponse(soap*, ...) allocate, set required members
/// - _ns1__QueryBindingResponse* soap_new_set__ns1__QueryBindingResponse(soap*, ...) allocate, set all public members
/// - _ns1__QueryBindingResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__QueryBindingResponse(soap*, _ns1__QueryBindingResponse*) deserialize from a stream
/// - int soap_write__ns1__QueryBindingResponse(soap*, _ns1__QueryBindingResponse*) serialize to a stream
/// - _ns1__QueryBindingResponse* _ns1__QueryBindingResponse::soap_dup(soap*) returns deep copy of _ns1__QueryBindingResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__QueryBindingResponse::soap_del() deep deletes _ns1__QueryBindingResponse data members, use only after _ns1__QueryBindingResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__QueryBindingResponse
{ public:
/// Element "QueryBindingResult" of XSD type "http://tempuri.org/":ArrayOfAnyType.
    ns1__ArrayOfAnyType*                 QueryBindingResult             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":SfcTestResult_Upload
/// @brief "http://tempuri.org/":SfcTestResult_Upload is a complexType.
///
/// class _ns1__SfcTestResult_USCOREUpload operations:
/// - _ns1__SfcTestResult_USCOREUpload* soap_new__ns1__SfcTestResult_USCOREUpload(soap*) allocate and default initialize
/// - _ns1__SfcTestResult_USCOREUpload* soap_new__ns1__SfcTestResult_USCOREUpload(soap*, int num) allocate array and default initialize values
/// - _ns1__SfcTestResult_USCOREUpload* soap_new_req__ns1__SfcTestResult_USCOREUpload(soap*, ...) allocate, set required members
/// - _ns1__SfcTestResult_USCOREUpload* soap_new_set__ns1__SfcTestResult_USCOREUpload(soap*, ...) allocate, set all public members
/// - _ns1__SfcTestResult_USCOREUpload::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SfcTestResult_USCOREUpload(soap*, _ns1__SfcTestResult_USCOREUpload*) deserialize from a stream
/// - int soap_write__ns1__SfcTestResult_USCOREUpload(soap*, _ns1__SfcTestResult_USCOREUpload*) serialize to a stream
/// - _ns1__SfcTestResult_USCOREUpload* _ns1__SfcTestResult_USCOREUpload::soap_dup(soap*) returns deep copy of _ns1__SfcTestResult_USCOREUpload, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SfcTestResult_USCOREUpload::soap_del() deep deletes _ns1__SfcTestResult_USCOREUpload data members, use only after _ns1__SfcTestResult_USCOREUpload::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SfcTestResult_USCOREUpload
{ public:
/// Element "strEventPoint" of XSD type xs:string.
    char*                                strEventPoint                  0;	///< Optional element.
/// Element "strSSN" of XSD type xs:string.
    char*                                strSSN                         0;	///< Optional element.
/// Element "testresult" of XSD type xs:string.
    char*                                testresult                     0;	///< Optional element.
/// Element "testtime" of XSD type xs:dateTime.
    time_t                               testtime                       1;	///< Required element.
/// Element "testitem" of XSD type xs:string.
    char*                                testitem                       0;	///< Optional element.
/// Element "testvalue" of XSD type xs:string.
    char*                                testvalue                      0;	///< Optional element.
/// Element "strScanner" of XSD type xs:string.
    char*                                strScanner                     0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":SfcTestResult_UploadResponse
/// @brief "http://tempuri.org/":SfcTestResult_UploadResponse is a complexType.
///
/// class _ns1__SfcTestResult_USCOREUploadResponse operations:
/// - _ns1__SfcTestResult_USCOREUploadResponse* soap_new__ns1__SfcTestResult_USCOREUploadResponse(soap*) allocate and default initialize
/// - _ns1__SfcTestResult_USCOREUploadResponse* soap_new__ns1__SfcTestResult_USCOREUploadResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__SfcTestResult_USCOREUploadResponse* soap_new_req__ns1__SfcTestResult_USCOREUploadResponse(soap*, ...) allocate, set required members
/// - _ns1__SfcTestResult_USCOREUploadResponse* soap_new_set__ns1__SfcTestResult_USCOREUploadResponse(soap*, ...) allocate, set all public members
/// - _ns1__SfcTestResult_USCOREUploadResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SfcTestResult_USCOREUploadResponse(soap*, _ns1__SfcTestResult_USCOREUploadResponse*) deserialize from a stream
/// - int soap_write__ns1__SfcTestResult_USCOREUploadResponse(soap*, _ns1__SfcTestResult_USCOREUploadResponse*) serialize to a stream
/// - _ns1__SfcTestResult_USCOREUploadResponse* _ns1__SfcTestResult_USCOREUploadResponse::soap_dup(soap*) returns deep copy of _ns1__SfcTestResult_USCOREUploadResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SfcTestResult_USCOREUploadResponse::soap_del() deep deletes _ns1__SfcTestResult_USCOREUploadResponse data members, use only after _ns1__SfcTestResult_USCOREUploadResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SfcTestResult_USCOREUploadResponse
{ public:
/// Element "SfcTestResult_UploadResult" of XSD type "http://tempuri.org/":ArrayOfAnyType.
    ns1__ArrayOfAnyType*                 SfcTestResult_USCOREUploadResult 0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":SaveSSN_NEW
/// @brief "http://tempuri.org/":SaveSSN_NEW is a complexType.
///
/// class _ns1__SaveSSN_USCORENEW operations:
/// - _ns1__SaveSSN_USCORENEW* soap_new__ns1__SaveSSN_USCORENEW(soap*) allocate and default initialize
/// - _ns1__SaveSSN_USCORENEW* soap_new__ns1__SaveSSN_USCORENEW(soap*, int num) allocate array and default initialize values
/// - _ns1__SaveSSN_USCORENEW* soap_new_req__ns1__SaveSSN_USCORENEW(soap*, ...) allocate, set required members
/// - _ns1__SaveSSN_USCORENEW* soap_new_set__ns1__SaveSSN_USCORENEW(soap*, ...) allocate, set all public members
/// - _ns1__SaveSSN_USCORENEW::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SaveSSN_USCORENEW(soap*, _ns1__SaveSSN_USCORENEW*) deserialize from a stream
/// - int soap_write__ns1__SaveSSN_USCORENEW(soap*, _ns1__SaveSSN_USCORENEW*) serialize to a stream
/// - _ns1__SaveSSN_USCORENEW* _ns1__SaveSSN_USCORENEW::soap_dup(soap*) returns deep copy of _ns1__SaveSSN_USCORENEW, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SaveSSN_USCORENEW::soap_del() deep deletes _ns1__SaveSSN_USCORENEW data members, use only after _ns1__SaveSSN_USCORENEW::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SaveSSN_USCORENEW
{ public:
/// Element "strSSN" of XSD type xs:string.
    char*                                strSSN                         0;	///< Optional element.
/// Element "strEventPoint" of XSD type xs:string.
    char*                                strEventPoint                  0;	///< Optional element.
/// Element "strIspass" of XSD type xs:string.
    char*                                strIspass                      0;	///< Optional element.
/// Element "strFailcode" of XSD type xs:string.
    char*                                strFailcode                    0;	///< Optional element.
/// Element "strScanner" of XSD type xs:string.
    char*                                strScanner                     0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":SaveSSN_NEWResponse
/// @brief "http://tempuri.org/":SaveSSN_NEWResponse is a complexType.
///
/// class _ns1__SaveSSN_USCORENEWResponse operations:
/// - _ns1__SaveSSN_USCORENEWResponse* soap_new__ns1__SaveSSN_USCORENEWResponse(soap*) allocate and default initialize
/// - _ns1__SaveSSN_USCORENEWResponse* soap_new__ns1__SaveSSN_USCORENEWResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__SaveSSN_USCORENEWResponse* soap_new_req__ns1__SaveSSN_USCORENEWResponse(soap*, ...) allocate, set required members
/// - _ns1__SaveSSN_USCORENEWResponse* soap_new_set__ns1__SaveSSN_USCORENEWResponse(soap*, ...) allocate, set all public members
/// - _ns1__SaveSSN_USCORENEWResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__SaveSSN_USCORENEWResponse(soap*, _ns1__SaveSSN_USCORENEWResponse*) deserialize from a stream
/// - int soap_write__ns1__SaveSSN_USCORENEWResponse(soap*, _ns1__SaveSSN_USCORENEWResponse*) serialize to a stream
/// - _ns1__SaveSSN_USCORENEWResponse* _ns1__SaveSSN_USCORENEWResponse::soap_dup(soap*) returns deep copy of _ns1__SaveSSN_USCORENEWResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SaveSSN_USCORENEWResponse::soap_del() deep deletes _ns1__SaveSSN_USCORENEWResponse data members, use only after _ns1__SaveSSN_USCORENEWResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SaveSSN_USCORENEWResponse
{ public:
/// Element "SaveSSN_NEWResult" of XSD type "http://tempuri.org/":ArrayOfAnyType.
    ns1__ArrayOfAnyType*                 SaveSSN_USCORENEWResult        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":test
/// @brief "http://tempuri.org/":test is a complexType.
///
/// class _ns1__test operations:
/// - _ns1__test* soap_new__ns1__test(soap*) allocate and default initialize
/// - _ns1__test* soap_new__ns1__test(soap*, int num) allocate array and default initialize values
/// - _ns1__test* soap_new_req__ns1__test(soap*, ...) allocate, set required members
/// - _ns1__test* soap_new_set__ns1__test(soap*, ...) allocate, set all public members
/// - _ns1__test::soap_default(soap*) default initialize members
/// - int soap_read__ns1__test(soap*, _ns1__test*) deserialize from a stream
/// - int soap_write__ns1__test(soap*, _ns1__test*) serialize to a stream
/// - _ns1__test* _ns1__test::soap_dup(soap*) returns deep copy of _ns1__test, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__test::soap_del() deep deletes _ns1__test data members, use only after _ns1__test::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__test
{ public:
/// Element "strSN" of XSD type xs:string.
    char*                                strSN                          0;	///< Optional element.
/// Element "aa" of XSD type xs:string.
    char*                                aa                             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":testResponse
/// @brief "http://tempuri.org/":testResponse is a complexType.
///
/// class _ns1__testResponse operations:
/// - _ns1__testResponse* soap_new__ns1__testResponse(soap*) allocate and default initialize
/// - _ns1__testResponse* soap_new__ns1__testResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__testResponse* soap_new_req__ns1__testResponse(soap*, ...) allocate, set required members
/// - _ns1__testResponse* soap_new_set__ns1__testResponse(soap*, ...) allocate, set all public members
/// - _ns1__testResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__testResponse(soap*, _ns1__testResponse*) deserialize from a stream
/// - int soap_write__ns1__testResponse(soap*, _ns1__testResponse*) serialize to a stream
/// - _ns1__testResponse* _ns1__testResponse::soap_dup(soap*) returns deep copy of _ns1__testResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__testResponse::soap_del() deep deletes _ns1__testResponse data members, use only after _ns1__testResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__testResponse
{ public:
/// Element "testResult" of XSD type "http://tempuri.org/":ArrayOfAnyType.
    ns1__ArrayOfAnyType*                 testResult                     0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GETMACID
/// @brief "http://tempuri.org/":GETMACID is a complexType.
///
/// class _ns1__GETMACID operations:
/// - _ns1__GETMACID* soap_new__ns1__GETMACID(soap*) allocate and default initialize
/// - _ns1__GETMACID* soap_new__ns1__GETMACID(soap*, int num) allocate array and default initialize values
/// - _ns1__GETMACID* soap_new_req__ns1__GETMACID(soap*, ...) allocate, set required members
/// - _ns1__GETMACID* soap_new_set__ns1__GETMACID(soap*, ...) allocate, set all public members
/// - _ns1__GETMACID::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GETMACID(soap*, _ns1__GETMACID*) deserialize from a stream
/// - int soap_write__ns1__GETMACID(soap*, _ns1__GETMACID*) serialize to a stream
/// - _ns1__GETMACID* _ns1__GETMACID::soap_dup(soap*) returns deep copy of _ns1__GETMACID, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GETMACID::soap_del() deep deletes _ns1__GETMACID data members, use only after _ns1__GETMACID::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GETMACID
{ public:
/// Element "strSN" of XSD type xs:string.
    char*                                strSN                          0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GETMACIDResponse
/// @brief "http://tempuri.org/":GETMACIDResponse is a complexType.
///
/// class _ns1__GETMACIDResponse operations:
/// - _ns1__GETMACIDResponse* soap_new__ns1__GETMACIDResponse(soap*) allocate and default initialize
/// - _ns1__GETMACIDResponse* soap_new__ns1__GETMACIDResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GETMACIDResponse* soap_new_req__ns1__GETMACIDResponse(soap*, ...) allocate, set required members
/// - _ns1__GETMACIDResponse* soap_new_set__ns1__GETMACIDResponse(soap*, ...) allocate, set all public members
/// - _ns1__GETMACIDResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GETMACIDResponse(soap*, _ns1__GETMACIDResponse*) deserialize from a stream
/// - int soap_write__ns1__GETMACIDResponse(soap*, _ns1__GETMACIDResponse*) serialize to a stream
/// - _ns1__GETMACIDResponse* _ns1__GETMACIDResponse::soap_dup(soap*) returns deep copy of _ns1__GETMACIDResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GETMACIDResponse::soap_del() deep deletes _ns1__GETMACIDResponse data members, use only after _ns1__GETMACIDResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GETMACIDResponse
{ public:
/// class _ns1__GETMACIDResponse_GETMACIDResult operations:
/// - _ns1__GETMACIDResponse_GETMACIDResult* soap_new__ns1__GETMACIDResponse_GETMACIDResult(soap*) allocate and default initialize
/// - _ns1__GETMACIDResponse_GETMACIDResult* soap_new__ns1__GETMACIDResponse_GETMACIDResult(soap*, int num) allocate array and default initialize values
/// - _ns1__GETMACIDResponse_GETMACIDResult* soap_new_req__ns1__GETMACIDResponse_GETMACIDResult(soap*, ...) allocate, set required members
/// - _ns1__GETMACIDResponse_GETMACIDResult* soap_new_set__ns1__GETMACIDResponse_GETMACIDResult(soap*, ...) allocate, set all public members
/// - _ns1__GETMACIDResponse_GETMACIDResult::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GETMACIDResponse_GETMACIDResult(soap*, _ns1__GETMACIDResponse_GETMACIDResult*) deserialize from a stream
/// - int soap_write__ns1__GETMACIDResponse_GETMACIDResult(soap*, _ns1__GETMACIDResponse_GETMACIDResult*) serialize to a stream
/// - _ns1__GETMACIDResponse_GETMACIDResult* _ns1__GETMACIDResponse_GETMACIDResult::soap_dup(soap*) returns deep copy of _ns1__GETMACIDResponse_GETMACIDResult, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GETMACIDResponse_GETMACIDResult::soap_del() deep deletes _ns1__GETMACIDResponse_GETMACIDResult data members, use only after _ns1__GETMACIDResponse_GETMACIDResult::soap_dup(NULL) (use soapcpp2 -Ed)
    class _ns1__GETMACIDResponse_GETMACIDResult
    {
/// @todo <any namespace="http://www.w3.org/2001/XMLSchema" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
   $int                                  __size                        0;
    _XML                                 __any                         0;	///< Catch any element content in XML string.
/// @todo <any namespace="urn:schemas-microsoft-com:xml-diffgram-v1" minOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *GETMACIDResult                 0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetMacBySn
/// @brief "http://tempuri.org/":GetMacBySn is a complexType.
///
/// class _ns1__GetMacBySn operations:
/// - _ns1__GetMacBySn* soap_new__ns1__GetMacBySn(soap*) allocate and default initialize
/// - _ns1__GetMacBySn* soap_new__ns1__GetMacBySn(soap*, int num) allocate array and default initialize values
/// - _ns1__GetMacBySn* soap_new_req__ns1__GetMacBySn(soap*, ...) allocate, set required members
/// - _ns1__GetMacBySn* soap_new_set__ns1__GetMacBySn(soap*, ...) allocate, set all public members
/// - _ns1__GetMacBySn::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetMacBySn(soap*, _ns1__GetMacBySn*) deserialize from a stream
/// - int soap_write__ns1__GetMacBySn(soap*, _ns1__GetMacBySn*) serialize to a stream
/// - _ns1__GetMacBySn* _ns1__GetMacBySn::soap_dup(soap*) returns deep copy of _ns1__GetMacBySn, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetMacBySn::soap_del() deep deletes _ns1__GetMacBySn data members, use only after _ns1__GetMacBySn::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetMacBySn
{ public:
/// Element "strSN" of XSD type xs:string.
    char*                                strSN                          0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetMacBySnResponse
/// @brief "http://tempuri.org/":GetMacBySnResponse is a complexType.
///
/// class _ns1__GetMacBySnResponse operations:
/// - _ns1__GetMacBySnResponse* soap_new__ns1__GetMacBySnResponse(soap*) allocate and default initialize
/// - _ns1__GetMacBySnResponse* soap_new__ns1__GetMacBySnResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetMacBySnResponse* soap_new_req__ns1__GetMacBySnResponse(soap*, ...) allocate, set required members
/// - _ns1__GetMacBySnResponse* soap_new_set__ns1__GetMacBySnResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetMacBySnResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetMacBySnResponse(soap*, _ns1__GetMacBySnResponse*) deserialize from a stream
/// - int soap_write__ns1__GetMacBySnResponse(soap*, _ns1__GetMacBySnResponse*) serialize to a stream
/// - _ns1__GetMacBySnResponse* _ns1__GetMacBySnResponse::soap_dup(soap*) returns deep copy of _ns1__GetMacBySnResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetMacBySnResponse::soap_del() deep deletes _ns1__GetMacBySnResponse data members, use only after _ns1__GetMacBySnResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetMacBySnResponse
{ public:
/// Element "GetMacBySnResult" of XSD type "http://tempuri.org/":ArrayOfAnyType.
    ns1__ArrayOfAnyType*                 GetMacBySnResult               0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":CartonWeight_Upload
/// @brief "http://tempuri.org/":CartonWeight_Upload is a complexType.
///
/// class _ns1__CartonWeight_USCOREUpload operations:
/// - _ns1__CartonWeight_USCOREUpload* soap_new__ns1__CartonWeight_USCOREUpload(soap*) allocate and default initialize
/// - _ns1__CartonWeight_USCOREUpload* soap_new__ns1__CartonWeight_USCOREUpload(soap*, int num) allocate array and default initialize values
/// - _ns1__CartonWeight_USCOREUpload* soap_new_req__ns1__CartonWeight_USCOREUpload(soap*, ...) allocate, set required members
/// - _ns1__CartonWeight_USCOREUpload* soap_new_set__ns1__CartonWeight_USCOREUpload(soap*, ...) allocate, set all public members
/// - _ns1__CartonWeight_USCOREUpload::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CartonWeight_USCOREUpload(soap*, _ns1__CartonWeight_USCOREUpload*) deserialize from a stream
/// - int soap_write__ns1__CartonWeight_USCOREUpload(soap*, _ns1__CartonWeight_USCOREUpload*) serialize to a stream
/// - _ns1__CartonWeight_USCOREUpload* _ns1__CartonWeight_USCOREUpload::soap_dup(soap*) returns deep copy of _ns1__CartonWeight_USCOREUpload, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CartonWeight_USCOREUpload::soap_del() deep deletes _ns1__CartonWeight_USCOREUpload data members, use only after _ns1__CartonWeight_USCOREUpload::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CartonWeight_USCOREUpload
{ public:
/// Element "strSN" of XSD type xs:string.
    char*                                strSN                          0;	///< Optional element.
/// Element "weight" of XSD type xs:float.
    float                                weight                         1;	///< Required element.
/// Element "ismore" of XSD type xs:boolean.
    bool                                 ismore                         1;	///< Required element.
/// Element "editby" of XSD type xs:string.
    char*                                editby                         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":CartonWeight_UploadResponse
/// @brief "http://tempuri.org/":CartonWeight_UploadResponse is a complexType.
///
/// class _ns1__CartonWeight_USCOREUploadResponse operations:
/// - _ns1__CartonWeight_USCOREUploadResponse* soap_new__ns1__CartonWeight_USCOREUploadResponse(soap*) allocate and default initialize
/// - _ns1__CartonWeight_USCOREUploadResponse* soap_new__ns1__CartonWeight_USCOREUploadResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__CartonWeight_USCOREUploadResponse* soap_new_req__ns1__CartonWeight_USCOREUploadResponse(soap*, ...) allocate, set required members
/// - _ns1__CartonWeight_USCOREUploadResponse* soap_new_set__ns1__CartonWeight_USCOREUploadResponse(soap*, ...) allocate, set all public members
/// - _ns1__CartonWeight_USCOREUploadResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CartonWeight_USCOREUploadResponse(soap*, _ns1__CartonWeight_USCOREUploadResponse*) deserialize from a stream
/// - int soap_write__ns1__CartonWeight_USCOREUploadResponse(soap*, _ns1__CartonWeight_USCOREUploadResponse*) serialize to a stream
/// - _ns1__CartonWeight_USCOREUploadResponse* _ns1__CartonWeight_USCOREUploadResponse::soap_dup(soap*) returns deep copy of _ns1__CartonWeight_USCOREUploadResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CartonWeight_USCOREUploadResponse::soap_del() deep deletes _ns1__CartonWeight_USCOREUploadResponse data members, use only after _ns1__CartonWeight_USCOREUploadResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CartonWeight_USCOREUploadResponse
{ public:
/// Element "CartonWeight_UploadResult" of XSD type "http://tempuri.org/":ArrayOfAnyType.
    ns1__ArrayOfAnyType*                 CartonWeight_USCOREUploadResult 0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":PCBData_Upload
/// @brief "http://tempuri.org/":PCBData_Upload is a complexType.
///
/// class _ns1__PCBData_USCOREUpload operations:
/// - _ns1__PCBData_USCOREUpload* soap_new__ns1__PCBData_USCOREUpload(soap*) allocate and default initialize
/// - _ns1__PCBData_USCOREUpload* soap_new__ns1__PCBData_USCOREUpload(soap*, int num) allocate array and default initialize values
/// - _ns1__PCBData_USCOREUpload* soap_new_req__ns1__PCBData_USCOREUpload(soap*, ...) allocate, set required members
/// - _ns1__PCBData_USCOREUpload* soap_new_set__ns1__PCBData_USCOREUpload(soap*, ...) allocate, set all public members
/// - _ns1__PCBData_USCOREUpload::soap_default(soap*) default initialize members
/// - int soap_read__ns1__PCBData_USCOREUpload(soap*, _ns1__PCBData_USCOREUpload*) deserialize from a stream
/// - int soap_write__ns1__PCBData_USCOREUpload(soap*, _ns1__PCBData_USCOREUpload*) serialize to a stream
/// - _ns1__PCBData_USCOREUpload* _ns1__PCBData_USCOREUpload::soap_dup(soap*) returns deep copy of _ns1__PCBData_USCOREUpload, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__PCBData_USCOREUpload::soap_del() deep deletes _ns1__PCBData_USCOREUpload data members, use only after _ns1__PCBData_USCOREUpload::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__PCBData_USCOREUpload
{ public:
/// Element "partno" of XSD type xs:string.
    char*                                partno                         0;	///< Optional element.
/// Element "FTdata" of XSD type xs:string.
    char*                                FTdata                         0;	///< Optional element.
/// Element "version" of XSD type xs:string.
    char*                                version                        0;	///< Optional element.
/// Element "PCBsn" of XSD type xs:string.
    char*                                PCBsn                          0;	///< Optional element.
/// Element "cpu" of XSD type xs:string.
    char*                                cpu                            0;	///< Optional element.
/// Element "flash" of XSD type xs:string.
    char*                                flash                          0;	///< Optional element.
/// Element "rom" of XSD type xs:string.
    char*                                rom                            0;	///< Optional element.
/// Element "wifi" of XSD type xs:string.
    char*                                wifi                           0;	///< Optional element.
/// Element "bt" of XSD type xs:string.
    char*                                bt                             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":PCBData_UploadResponse
/// @brief "http://tempuri.org/":PCBData_UploadResponse is a complexType.
///
/// class _ns1__PCBData_USCOREUploadResponse operations:
/// - _ns1__PCBData_USCOREUploadResponse* soap_new__ns1__PCBData_USCOREUploadResponse(soap*) allocate and default initialize
/// - _ns1__PCBData_USCOREUploadResponse* soap_new__ns1__PCBData_USCOREUploadResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__PCBData_USCOREUploadResponse* soap_new_req__ns1__PCBData_USCOREUploadResponse(soap*, ...) allocate, set required members
/// - _ns1__PCBData_USCOREUploadResponse* soap_new_set__ns1__PCBData_USCOREUploadResponse(soap*, ...) allocate, set all public members
/// - _ns1__PCBData_USCOREUploadResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__PCBData_USCOREUploadResponse(soap*, _ns1__PCBData_USCOREUploadResponse*) deserialize from a stream
/// - int soap_write__ns1__PCBData_USCOREUploadResponse(soap*, _ns1__PCBData_USCOREUploadResponse*) serialize to a stream
/// - _ns1__PCBData_USCOREUploadResponse* _ns1__PCBData_USCOREUploadResponse::soap_dup(soap*) returns deep copy of _ns1__PCBData_USCOREUploadResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__PCBData_USCOREUploadResponse::soap_del() deep deletes _ns1__PCBData_USCOREUploadResponse data members, use only after _ns1__PCBData_USCOREUploadResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__PCBData_USCOREUploadResponse
{ public:
/// Element "PCBData_UploadResult" of XSD type "http://tempuri.org/":ArrayOfAnyType.
    ns1__ArrayOfAnyType*                 PCBData_USCOREUploadResult     0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetShaoluKey
/// @brief "http://tempuri.org/":GetShaoluKey is a complexType.
///
/// class _ns1__GetShaoluKey operations:
/// - _ns1__GetShaoluKey* soap_new__ns1__GetShaoluKey(soap*) allocate and default initialize
/// - _ns1__GetShaoluKey* soap_new__ns1__GetShaoluKey(soap*, int num) allocate array and default initialize values
/// - _ns1__GetShaoluKey* soap_new_req__ns1__GetShaoluKey(soap*, ...) allocate, set required members
/// - _ns1__GetShaoluKey* soap_new_set__ns1__GetShaoluKey(soap*, ...) allocate, set all public members
/// - _ns1__GetShaoluKey::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetShaoluKey(soap*, _ns1__GetShaoluKey*) deserialize from a stream
/// - int soap_write__ns1__GetShaoluKey(soap*, _ns1__GetShaoluKey*) serialize to a stream
/// - _ns1__GetShaoluKey* _ns1__GetShaoluKey::soap_dup(soap*) returns deep copy of _ns1__GetShaoluKey, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetShaoluKey::soap_del() deep deletes _ns1__GetShaoluKey data members, use only after _ns1__GetShaoluKey::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetShaoluKey
{ public:
/// Element "customer" of XSD type xs:string.
    char*                                customer                       0;	///< Optional element.
/// Element "ssn" of XSD type xs:string.
    char*                                ssn                            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetShaoluKeyResponse
/// @brief "http://tempuri.org/":GetShaoluKeyResponse is a complexType.
///
/// class _ns1__GetShaoluKeyResponse operations:
/// - _ns1__GetShaoluKeyResponse* soap_new__ns1__GetShaoluKeyResponse(soap*) allocate and default initialize
/// - _ns1__GetShaoluKeyResponse* soap_new__ns1__GetShaoluKeyResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetShaoluKeyResponse* soap_new_req__ns1__GetShaoluKeyResponse(soap*, ...) allocate, set required members
/// - _ns1__GetShaoluKeyResponse* soap_new_set__ns1__GetShaoluKeyResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetShaoluKeyResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetShaoluKeyResponse(soap*, _ns1__GetShaoluKeyResponse*) deserialize from a stream
/// - int soap_write__ns1__GetShaoluKeyResponse(soap*, _ns1__GetShaoluKeyResponse*) serialize to a stream
/// - _ns1__GetShaoluKeyResponse* _ns1__GetShaoluKeyResponse::soap_dup(soap*) returns deep copy of _ns1__GetShaoluKeyResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetShaoluKeyResponse::soap_del() deep deletes _ns1__GetShaoluKeyResponse data members, use only after _ns1__GetShaoluKeyResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetShaoluKeyResponse
{ public:
/// Element "GetShaoluKeyResult" of XSD type "http://tempuri.org/":ArrayOfAnyType.
    ns1__ArrayOfAnyType*                 GetShaoluKeyResult             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":ReleaseKey
/// @brief "http://tempuri.org/":ReleaseKey is a complexType.
///
/// class _ns1__ReleaseKey operations:
/// - _ns1__ReleaseKey* soap_new__ns1__ReleaseKey(soap*) allocate and default initialize
/// - _ns1__ReleaseKey* soap_new__ns1__ReleaseKey(soap*, int num) allocate array and default initialize values
/// - _ns1__ReleaseKey* soap_new_req__ns1__ReleaseKey(soap*, ...) allocate, set required members
/// - _ns1__ReleaseKey* soap_new_set__ns1__ReleaseKey(soap*, ...) allocate, set all public members
/// - _ns1__ReleaseKey::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ReleaseKey(soap*, _ns1__ReleaseKey*) deserialize from a stream
/// - int soap_write__ns1__ReleaseKey(soap*, _ns1__ReleaseKey*) serialize to a stream
/// - _ns1__ReleaseKey* _ns1__ReleaseKey::soap_dup(soap*) returns deep copy of _ns1__ReleaseKey, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ReleaseKey::soap_del() deep deletes _ns1__ReleaseKey data members, use only after _ns1__ReleaseKey::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ReleaseKey
{ public:
/// Element "key" of XSD type xs:string.
    char*                                key                            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":ReleaseKeyResponse
/// @brief "http://tempuri.org/":ReleaseKeyResponse is a complexType.
///
/// class _ns1__ReleaseKeyResponse operations:
/// - _ns1__ReleaseKeyResponse* soap_new__ns1__ReleaseKeyResponse(soap*) allocate and default initialize
/// - _ns1__ReleaseKeyResponse* soap_new__ns1__ReleaseKeyResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__ReleaseKeyResponse* soap_new_req__ns1__ReleaseKeyResponse(soap*, ...) allocate, set required members
/// - _ns1__ReleaseKeyResponse* soap_new_set__ns1__ReleaseKeyResponse(soap*, ...) allocate, set all public members
/// - _ns1__ReleaseKeyResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__ReleaseKeyResponse(soap*, _ns1__ReleaseKeyResponse*) deserialize from a stream
/// - int soap_write__ns1__ReleaseKeyResponse(soap*, _ns1__ReleaseKeyResponse*) serialize to a stream
/// - _ns1__ReleaseKeyResponse* _ns1__ReleaseKeyResponse::soap_dup(soap*) returns deep copy of _ns1__ReleaseKeyResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ReleaseKeyResponse::soap_del() deep deletes _ns1__ReleaseKeyResponse data members, use only after _ns1__ReleaseKeyResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ReleaseKeyResponse
{ public:
/// Element "ReleaseKeyResult" of XSD type "http://tempuri.org/":ArrayOfAnyType.
    ns1__ArrayOfAnyType*                 ReleaseKeyResult               0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":BindKey
/// @brief "http://tempuri.org/":BindKey is a complexType.
///
/// class _ns1__BindKey operations:
/// - _ns1__BindKey* soap_new__ns1__BindKey(soap*) allocate and default initialize
/// - _ns1__BindKey* soap_new__ns1__BindKey(soap*, int num) allocate array and default initialize values
/// - _ns1__BindKey* soap_new_req__ns1__BindKey(soap*, ...) allocate, set required members
/// - _ns1__BindKey* soap_new_set__ns1__BindKey(soap*, ...) allocate, set all public members
/// - _ns1__BindKey::soap_default(soap*) default initialize members
/// - int soap_read__ns1__BindKey(soap*, _ns1__BindKey*) deserialize from a stream
/// - int soap_write__ns1__BindKey(soap*, _ns1__BindKey*) serialize to a stream
/// - _ns1__BindKey* _ns1__BindKey::soap_dup(soap*) returns deep copy of _ns1__BindKey, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__BindKey::soap_del() deep deletes _ns1__BindKey data members, use only after _ns1__BindKey::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__BindKey
{ public:
/// Element "key" of XSD type xs:string.
    char*                                key                            0;	///< Optional element.
/// Element "ssn" of XSD type xs:string.
    char*                                ssn                            0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":BindKeyResponse
/// @brief "http://tempuri.org/":BindKeyResponse is a complexType.
///
/// class _ns1__BindKeyResponse operations:
/// - _ns1__BindKeyResponse* soap_new__ns1__BindKeyResponse(soap*) allocate and default initialize
/// - _ns1__BindKeyResponse* soap_new__ns1__BindKeyResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__BindKeyResponse* soap_new_req__ns1__BindKeyResponse(soap*, ...) allocate, set required members
/// - _ns1__BindKeyResponse* soap_new_set__ns1__BindKeyResponse(soap*, ...) allocate, set all public members
/// - _ns1__BindKeyResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__BindKeyResponse(soap*, _ns1__BindKeyResponse*) deserialize from a stream
/// - int soap_write__ns1__BindKeyResponse(soap*, _ns1__BindKeyResponse*) serialize to a stream
/// - _ns1__BindKeyResponse* _ns1__BindKeyResponse::soap_dup(soap*) returns deep copy of _ns1__BindKeyResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__BindKeyResponse::soap_del() deep deletes _ns1__BindKeyResponse data members, use only after _ns1__BindKeyResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__BindKeyResponse
{ public:
/// Element "BindKeyResult" of XSD type "http://tempuri.org/":ArrayOfAnyType.
    ns1__ArrayOfAnyType*                 BindKeyResult                  0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetSparrowCheckData
/// @brief "http://tempuri.org/":GetSparrowCheckData is a complexType.
///
/// class _ns1__GetSparrowCheckData operations:
/// - _ns1__GetSparrowCheckData* soap_new__ns1__GetSparrowCheckData(soap*) allocate and default initialize
/// - _ns1__GetSparrowCheckData* soap_new__ns1__GetSparrowCheckData(soap*, int num) allocate array and default initialize values
/// - _ns1__GetSparrowCheckData* soap_new_req__ns1__GetSparrowCheckData(soap*, ...) allocate, set required members
/// - _ns1__GetSparrowCheckData* soap_new_set__ns1__GetSparrowCheckData(soap*, ...) allocate, set all public members
/// - _ns1__GetSparrowCheckData::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetSparrowCheckData(soap*, _ns1__GetSparrowCheckData*) deserialize from a stream
/// - int soap_write__ns1__GetSparrowCheckData(soap*, _ns1__GetSparrowCheckData*) serialize to a stream
/// - _ns1__GetSparrowCheckData* _ns1__GetSparrowCheckData::soap_dup(soap*) returns deep copy of _ns1__GetSparrowCheckData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetSparrowCheckData::soap_del() deep deletes _ns1__GetSparrowCheckData data members, use only after _ns1__GetSparrowCheckData::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetSparrowCheckData
{ public:
/// Element "SN" of XSD type xs:string.
    char*                                SN                             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":GetSparrowCheckDataResponse
/// @brief "http://tempuri.org/":GetSparrowCheckDataResponse is a complexType.
///
/// class _ns1__GetSparrowCheckDataResponse operations:
/// - _ns1__GetSparrowCheckDataResponse* soap_new__ns1__GetSparrowCheckDataResponse(soap*) allocate and default initialize
/// - _ns1__GetSparrowCheckDataResponse* soap_new__ns1__GetSparrowCheckDataResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetSparrowCheckDataResponse* soap_new_req__ns1__GetSparrowCheckDataResponse(soap*, ...) allocate, set required members
/// - _ns1__GetSparrowCheckDataResponse* soap_new_set__ns1__GetSparrowCheckDataResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetSparrowCheckDataResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetSparrowCheckDataResponse(soap*, _ns1__GetSparrowCheckDataResponse*) deserialize from a stream
/// - int soap_write__ns1__GetSparrowCheckDataResponse(soap*, _ns1__GetSparrowCheckDataResponse*) serialize to a stream
/// - _ns1__GetSparrowCheckDataResponse* _ns1__GetSparrowCheckDataResponse::soap_dup(soap*) returns deep copy of _ns1__GetSparrowCheckDataResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetSparrowCheckDataResponse::soap_del() deep deletes _ns1__GetSparrowCheckDataResponse data members, use only after _ns1__GetSparrowCheckDataResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetSparrowCheckDataResponse
{ public:
/// Element "GetSparrowCheckDataResult" of XSD type "http://tempuri.org/":ArrayOfAnyType.
    ns1__ArrayOfAnyType*                 GetSparrowCheckDataResult      0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":BlindKeyNum
/// @brief "http://tempuri.org/":BlindKeyNum is a complexType.
///
/// class _ns1__BlindKeyNum operations:
/// - _ns1__BlindKeyNum* soap_new__ns1__BlindKeyNum(soap*) allocate and default initialize
/// - _ns1__BlindKeyNum* soap_new__ns1__BlindKeyNum(soap*, int num) allocate array and default initialize values
/// - _ns1__BlindKeyNum* soap_new_req__ns1__BlindKeyNum(soap*, ...) allocate, set required members
/// - _ns1__BlindKeyNum* soap_new_set__ns1__BlindKeyNum(soap*, ...) allocate, set all public members
/// - _ns1__BlindKeyNum::soap_default(soap*) default initialize members
/// - int soap_read__ns1__BlindKeyNum(soap*, _ns1__BlindKeyNum*) deserialize from a stream
/// - int soap_write__ns1__BlindKeyNum(soap*, _ns1__BlindKeyNum*) serialize to a stream
/// - _ns1__BlindKeyNum* _ns1__BlindKeyNum::soap_dup(soap*) returns deep copy of _ns1__BlindKeyNum, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__BlindKeyNum::soap_del() deep deletes _ns1__BlindKeyNum data members, use only after _ns1__BlindKeyNum::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__BlindKeyNum
{ public:
/// Element "strSSN" of XSD type xs:string.
    char*                                strSSN                         0;	///< Optional element.
/// Element "strEventPoint" of XSD type xs:string.
    char*                                strEventPoint                  0;	///< Optional element.
/// Element "user" of XSD type xs:string.
    char*                                user                           0;	///< Optional element.
/// Element "Key" of XSD type xs:string.
    char*                                Key                            0;	///< Optional element.
/// Element "Key2" of XSD type xs:string.
    char*                                Key2                           0;	///< Optional element.
/// Element "Key3" of XSD type xs:string.
    char*                                Key3                           0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":BlindKeyNumResponse
/// @brief "http://tempuri.org/":BlindKeyNumResponse is a complexType.
///
/// class _ns1__BlindKeyNumResponse operations:
/// - _ns1__BlindKeyNumResponse* soap_new__ns1__BlindKeyNumResponse(soap*) allocate and default initialize
/// - _ns1__BlindKeyNumResponse* soap_new__ns1__BlindKeyNumResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__BlindKeyNumResponse* soap_new_req__ns1__BlindKeyNumResponse(soap*, ...) allocate, set required members
/// - _ns1__BlindKeyNumResponse* soap_new_set__ns1__BlindKeyNumResponse(soap*, ...) allocate, set all public members
/// - _ns1__BlindKeyNumResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__BlindKeyNumResponse(soap*, _ns1__BlindKeyNumResponse*) deserialize from a stream
/// - int soap_write__ns1__BlindKeyNumResponse(soap*, _ns1__BlindKeyNumResponse*) serialize to a stream
/// - _ns1__BlindKeyNumResponse* _ns1__BlindKeyNumResponse::soap_dup(soap*) returns deep copy of _ns1__BlindKeyNumResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__BlindKeyNumResponse::soap_del() deep deletes _ns1__BlindKeyNumResponse data members, use only after _ns1__BlindKeyNumResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__BlindKeyNumResponse
{ public:
/// Element "BlindKeyNumResult" of XSD type "http://tempuri.org/":ArrayOfAnyType.
    ns1__ArrayOfAnyType*                 BlindKeyNumResult              0;	///< Optional element.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns1  service name:	SFCWebServiceSoap 
//gsoap ns1  service type:	SFCWebServiceSoap 
//gsoap ns1  service port:	http://192.168.10.21/SfcWebService/SFCWebService.asmx 
//gsoap ns1  service namespace:	http://tempuri.org/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref SFCWebServiceSoap

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page SFCWebServiceSoap Binding "SFCWebServiceSoap"

@section SFCWebServiceSoap_operations Operations of Binding "SFCWebServiceSoap"

  - @ref __ns1__DoFunction

  - @ref __ns1__UploadTestResult

  - @ref __ns1__CheckSSN

  - @ref __ns1__CheckSSN_USCORENEW

  - @ref __ns1__Binding

  - @ref __ns1__QueryBinding

  - @ref __ns1__SfcTestResult_USCOREUpload

  - @ref __ns1__SaveSSN_USCORENEW

  - @ref __ns1__test

  - @ref __ns1__GETMACID

  - @ref __ns1__GetMacBySn

  - @ref __ns1__CartonWeight_USCOREUpload

  - @ref __ns1__PCBData_USCOREUpload

  - @ref __ns1__GetShaoluKey

  - @ref __ns1__ReleaseKey

  - @ref __ns1__BindKey

  - @ref __ns1__GetSparrowCheckData

  - @ref __ns1__BlindKeyNum

  - @ref __ns1__DoFunction_

  - @ref __ns1__UploadTestResult_

  - @ref __ns1__CheckSSN_

  - @ref __ns1__CheckSSN_USCORENEW_

  - @ref __ns1__Binding_

  - @ref __ns1__QueryBinding_

  - @ref __ns1__SfcTestResult_USCOREUpload_

  - @ref __ns1__SaveSSN_USCORENEW_

  - @ref __ns1__test_

  - @ref __ns1__GETMACID_

  - @ref __ns1__GetMacBySn_

  - @ref __ns1__CartonWeight_USCOREUpload_

  - @ref __ns1__PCBData_USCOREUpload_

  - @ref __ns1__GetShaoluKey_

  - @ref __ns1__ReleaseKey_

  - @ref __ns1__BindKey_

  - @ref __ns1__GetSparrowCheckData_

  - @ref __ns1__BlindKeyNum_

@section SFCWebServiceSoap_ports Default endpoints of Binding "SFCWebServiceSoap"

  - http://192.168.10.21/SfcWebService/SFCWebService.asmx

@note Multiple service bindings collected as one, use wsdl2h option -Nname to produce a separate service for each binding


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   SFCWebServiceSoap                                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DoFunction                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DoFunction" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/DoFunction"

  - Addressing input action: "http://tempuri.org/DoFunction"

  - Addressing output action: "http://tempuri.org/DoFunctionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DoFunction(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DoFunction*                   ns1__DoFunction,
    // output parameters:
    _ns1__DoFunctionResponse           &ns1__DoFunctionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DoFunction(
    struct soap *soap,
    // input parameters:
    _ns1__DoFunction*                   ns1__DoFunction,
    // output parameters:
    _ns1__DoFunctionResponse           &ns1__DoFunctionResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DoFunction SOAP
//gsoap ns1  service method-style:	DoFunction document
//gsoap ns1  service method-encoding:	DoFunction literal
//gsoap ns1  service method-input-action:	DoFunction http://tempuri.org/DoFunction
//gsoap ns1  service method-output-action:	DoFunction http://tempuri.org/DoFunctionResponse
int __ns1__DoFunction(
    _ns1__DoFunction*                   ns1__DoFunction,	///< Input parameter
    _ns1__DoFunctionResponse           &ns1__DoFunctionResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UploadTestResult                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UploadTestResult" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/UploadTestResult"

  - Addressing input action: "http://tempuri.org/UploadTestResult"

  - Addressing output action: "http://tempuri.org/UploadTestResultResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UploadTestResult(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UploadTestResult*             ns1__UploadTestResult,
    // output parameters:
    _ns1__UploadTestResultResponse     &ns1__UploadTestResultResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UploadTestResult(
    struct soap *soap,
    // input parameters:
    _ns1__UploadTestResult*             ns1__UploadTestResult,
    // output parameters:
    _ns1__UploadTestResultResponse     &ns1__UploadTestResultResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UploadTestResult SOAP
//gsoap ns1  service method-style:	UploadTestResult document
//gsoap ns1  service method-encoding:	UploadTestResult literal
//gsoap ns1  service method-input-action:	UploadTestResult http://tempuri.org/UploadTestResult
//gsoap ns1  service method-output-action:	UploadTestResult http://tempuri.org/UploadTestResultResponse
int __ns1__UploadTestResult(
    _ns1__UploadTestResult*             ns1__UploadTestResult,	///< Input parameter
    _ns1__UploadTestResultResponse     &ns1__UploadTestResultResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CheckSSN                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CheckSSN" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/CheckSSN"

  - Addressing input action: "http://tempuri.org/CheckSSN"

  - Addressing output action: "http://tempuri.org/CheckSSNResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CheckSSN(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CheckSSN*                     ns1__CheckSSN,
    // output parameters:
    _ns1__CheckSSNResponse             &ns1__CheckSSNResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CheckSSN(
    struct soap *soap,
    // input parameters:
    _ns1__CheckSSN*                     ns1__CheckSSN,
    // output parameters:
    _ns1__CheckSSNResponse             &ns1__CheckSSNResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CheckSSN SOAP
//gsoap ns1  service method-style:	CheckSSN document
//gsoap ns1  service method-encoding:	CheckSSN literal
//gsoap ns1  service method-input-action:	CheckSSN http://tempuri.org/CheckSSN
//gsoap ns1  service method-output-action:	CheckSSN http://tempuri.org/CheckSSNResponse
int __ns1__CheckSSN(
    _ns1__CheckSSN*                     ns1__CheckSSN,	///< Input parameter
    _ns1__CheckSSNResponse             &ns1__CheckSSNResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CheckSSN_USCORENEW                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CheckSSN_USCORENEW" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/CheckSSN_NEW"

  - Addressing input action: "http://tempuri.org/CheckSSN_NEW"

  - Addressing output action: "http://tempuri.org/CheckSSN_NEWResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CheckSSN_USCORENEW(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CheckSSN_USCORENEW*           ns1__CheckSSN_USCORENEW,
    // output parameters:
    _ns1__CheckSSN_USCORENEWResponse   &ns1__CheckSSN_USCORENEWResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CheckSSN_USCORENEW(
    struct soap *soap,
    // input parameters:
    _ns1__CheckSSN_USCORENEW*           ns1__CheckSSN_USCORENEW,
    // output parameters:
    _ns1__CheckSSN_USCORENEWResponse   &ns1__CheckSSN_USCORENEWResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CheckSSN_USCORENEW SOAP
//gsoap ns1  service method-style:	CheckSSN_USCORENEW document
//gsoap ns1  service method-encoding:	CheckSSN_USCORENEW literal
//gsoap ns1  service method-input-action:	CheckSSN_USCORENEW http://tempuri.org/CheckSSN_NEW
//gsoap ns1  service method-output-action:	CheckSSN_USCORENEW http://tempuri.org/CheckSSN_NEWResponse
int __ns1__CheckSSN_USCORENEW(
    _ns1__CheckSSN_USCORENEW*           ns1__CheckSSN_USCORENEW,	///< Input parameter
    _ns1__CheckSSN_USCORENEWResponse   &ns1__CheckSSN_USCORENEWResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Binding                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Binding" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/Binding"

  - Addressing input action: "http://tempuri.org/Binding"

  - Addressing output action: "http://tempuri.org/BindingResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Binding(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Binding*                      ns1__Binding,
    // output parameters:
    _ns1__BindingResponse              &ns1__BindingResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Binding(
    struct soap *soap,
    // input parameters:
    _ns1__Binding*                      ns1__Binding,
    // output parameters:
    _ns1__BindingResponse              &ns1__BindingResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Binding SOAP
//gsoap ns1  service method-style:	Binding document
//gsoap ns1  service method-encoding:	Binding literal
//gsoap ns1  service method-input-action:	Binding http://tempuri.org/Binding
//gsoap ns1  service method-output-action:	Binding http://tempuri.org/BindingResponse
int __ns1__Binding(
    _ns1__Binding*                      ns1__Binding,	///< Input parameter
    _ns1__BindingResponse              &ns1__BindingResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QueryBinding                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QueryBinding" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/QueryBinding"

  - Addressing input action: "http://tempuri.org/QueryBinding"

  - Addressing output action: "http://tempuri.org/QueryBindingResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QueryBinding(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QueryBinding*                 ns1__QueryBinding,
    // output parameters:
    _ns1__QueryBindingResponse         &ns1__QueryBindingResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QueryBinding(
    struct soap *soap,
    // input parameters:
    _ns1__QueryBinding*                 ns1__QueryBinding,
    // output parameters:
    _ns1__QueryBindingResponse         &ns1__QueryBindingResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QueryBinding SOAP
//gsoap ns1  service method-style:	QueryBinding document
//gsoap ns1  service method-encoding:	QueryBinding literal
//gsoap ns1  service method-input-action:	QueryBinding http://tempuri.org/QueryBinding
//gsoap ns1  service method-output-action:	QueryBinding http://tempuri.org/QueryBindingResponse
int __ns1__QueryBinding(
    _ns1__QueryBinding*                 ns1__QueryBinding,	///< Input parameter
    _ns1__QueryBindingResponse         &ns1__QueryBindingResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SfcTestResult_USCOREUpload                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SfcTestResult_USCOREUpload" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/SfcTestResult_Upload"

  - Addressing input action: "http://tempuri.org/SfcTestResult_Upload"

  - Addressing output action: "http://tempuri.org/SfcTestResult_UploadResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SfcTestResult_USCOREUpload(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SfcTestResult_USCOREUpload*   ns1__SfcTestResult_USCOREUpload,
    // output parameters:
    _ns1__SfcTestResult_USCOREUploadResponse&ns1__SfcTestResult_USCOREUploadResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SfcTestResult_USCOREUpload(
    struct soap *soap,
    // input parameters:
    _ns1__SfcTestResult_USCOREUpload*   ns1__SfcTestResult_USCOREUpload,
    // output parameters:
    _ns1__SfcTestResult_USCOREUploadResponse&ns1__SfcTestResult_USCOREUploadResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SfcTestResult_USCOREUpload SOAP
//gsoap ns1  service method-style:	SfcTestResult_USCOREUpload document
//gsoap ns1  service method-encoding:	SfcTestResult_USCOREUpload literal
//gsoap ns1  service method-input-action:	SfcTestResult_USCOREUpload http://tempuri.org/SfcTestResult_Upload
//gsoap ns1  service method-output-action:	SfcTestResult_USCOREUpload http://tempuri.org/SfcTestResult_UploadResponse
int __ns1__SfcTestResult_USCOREUpload(
    _ns1__SfcTestResult_USCOREUpload*   ns1__SfcTestResult_USCOREUpload,	///< Input parameter
    _ns1__SfcTestResult_USCOREUploadResponse&ns1__SfcTestResult_USCOREUploadResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SaveSSN_USCORENEW                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SaveSSN_USCORENEW" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/SaveSSN_NEW"

  - Addressing input action: "http://tempuri.org/SaveSSN_NEW"

  - Addressing output action: "http://tempuri.org/SaveSSN_NEWResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SaveSSN_USCORENEW(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SaveSSN_USCORENEW*            ns1__SaveSSN_USCORENEW,
    // output parameters:
    _ns1__SaveSSN_USCORENEWResponse    &ns1__SaveSSN_USCORENEWResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SaveSSN_USCORENEW(
    struct soap *soap,
    // input parameters:
    _ns1__SaveSSN_USCORENEW*            ns1__SaveSSN_USCORENEW,
    // output parameters:
    _ns1__SaveSSN_USCORENEWResponse    &ns1__SaveSSN_USCORENEWResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SaveSSN_USCORENEW SOAP
//gsoap ns1  service method-style:	SaveSSN_USCORENEW document
//gsoap ns1  service method-encoding:	SaveSSN_USCORENEW literal
//gsoap ns1  service method-input-action:	SaveSSN_USCORENEW http://tempuri.org/SaveSSN_NEW
//gsoap ns1  service method-output-action:	SaveSSN_USCORENEW http://tempuri.org/SaveSSN_NEWResponse
int __ns1__SaveSSN_USCORENEW(
    _ns1__SaveSSN_USCORENEW*            ns1__SaveSSN_USCORENEW,	///< Input parameter
    _ns1__SaveSSN_USCORENEWResponse    &ns1__SaveSSN_USCORENEWResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__test                                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__test" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/test"

  - Addressing input action: "http://tempuri.org/test"

  - Addressing output action: "http://tempuri.org/testResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__test(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__test*                         ns1__test,
    // output parameters:
    _ns1__testResponse                 &ns1__testResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__test(
    struct soap *soap,
    // input parameters:
    _ns1__test*                         ns1__test,
    // output parameters:
    _ns1__testResponse                 &ns1__testResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	test SOAP
//gsoap ns1  service method-style:	test document
//gsoap ns1  service method-encoding:	test literal
//gsoap ns1  service method-input-action:	test http://tempuri.org/test
//gsoap ns1  service method-output-action:	test http://tempuri.org/testResponse
int __ns1__test(
    _ns1__test*                         ns1__test,	///< Input parameter
    _ns1__testResponse                 &ns1__testResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GETMACID                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GETMACID" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GETMACID"

  - Addressing input action: "http://tempuri.org/GETMACID"

  - Addressing output action: "http://tempuri.org/GETMACIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GETMACID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GETMACID*                     ns1__GETMACID,
    // output parameters:
    _ns1__GETMACIDResponse             &ns1__GETMACIDResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GETMACID(
    struct soap *soap,
    // input parameters:
    _ns1__GETMACID*                     ns1__GETMACID,
    // output parameters:
    _ns1__GETMACIDResponse             &ns1__GETMACIDResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GETMACID SOAP
//gsoap ns1  service method-style:	GETMACID document
//gsoap ns1  service method-encoding:	GETMACID literal
//gsoap ns1  service method-input-action:	GETMACID http://tempuri.org/GETMACID
//gsoap ns1  service method-output-action:	GETMACID http://tempuri.org/GETMACIDResponse
int __ns1__GETMACID(
    _ns1__GETMACID*                     ns1__GETMACID,	///< Input parameter
    _ns1__GETMACIDResponse             &ns1__GETMACIDResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMacBySn                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMacBySn" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetMacBySn"

  - Addressing input action: "http://tempuri.org/GetMacBySn"

  - Addressing output action: "http://tempuri.org/GetMacBySnResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMacBySn(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetMacBySn*                   ns1__GetMacBySn,
    // output parameters:
    _ns1__GetMacBySnResponse           &ns1__GetMacBySnResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMacBySn(
    struct soap *soap,
    // input parameters:
    _ns1__GetMacBySn*                   ns1__GetMacBySn,
    // output parameters:
    _ns1__GetMacBySnResponse           &ns1__GetMacBySnResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMacBySn SOAP
//gsoap ns1  service method-style:	GetMacBySn document
//gsoap ns1  service method-encoding:	GetMacBySn literal
//gsoap ns1  service method-input-action:	GetMacBySn http://tempuri.org/GetMacBySn
//gsoap ns1  service method-output-action:	GetMacBySn http://tempuri.org/GetMacBySnResponse
int __ns1__GetMacBySn(
    _ns1__GetMacBySn*                   ns1__GetMacBySn,	///< Input parameter
    _ns1__GetMacBySnResponse           &ns1__GetMacBySnResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CartonWeight_USCOREUpload                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CartonWeight_USCOREUpload" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/CartonWeight_Upload"

  - Addressing input action: "http://tempuri.org/CartonWeight_Upload"

  - Addressing output action: "http://tempuri.org/CartonWeight_UploadResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CartonWeight_USCOREUpload(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CartonWeight_USCOREUpload*    ns1__CartonWeight_USCOREUpload,
    // output parameters:
    _ns1__CartonWeight_USCOREUploadResponse&ns1__CartonWeight_USCOREUploadResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CartonWeight_USCOREUpload(
    struct soap *soap,
    // input parameters:
    _ns1__CartonWeight_USCOREUpload*    ns1__CartonWeight_USCOREUpload,
    // output parameters:
    _ns1__CartonWeight_USCOREUploadResponse&ns1__CartonWeight_USCOREUploadResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CartonWeight_USCOREUpload SOAP
//gsoap ns1  service method-style:	CartonWeight_USCOREUpload document
//gsoap ns1  service method-encoding:	CartonWeight_USCOREUpload literal
//gsoap ns1  service method-input-action:	CartonWeight_USCOREUpload http://tempuri.org/CartonWeight_Upload
//gsoap ns1  service method-output-action:	CartonWeight_USCOREUpload http://tempuri.org/CartonWeight_UploadResponse
int __ns1__CartonWeight_USCOREUpload(
    _ns1__CartonWeight_USCOREUpload*    ns1__CartonWeight_USCOREUpload,	///< Input parameter
    _ns1__CartonWeight_USCOREUploadResponse&ns1__CartonWeight_USCOREUploadResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__PCBData_USCOREUpload                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__PCBData_USCOREUpload" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/PCBData_Upload"

  - Addressing input action: "http://tempuri.org/PCBData_Upload"

  - Addressing output action: "http://tempuri.org/PCBData_UploadResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__PCBData_USCOREUpload(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__PCBData_USCOREUpload*         ns1__PCBData_USCOREUpload,
    // output parameters:
    _ns1__PCBData_USCOREUploadResponse &ns1__PCBData_USCOREUploadResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__PCBData_USCOREUpload(
    struct soap *soap,
    // input parameters:
    _ns1__PCBData_USCOREUpload*         ns1__PCBData_USCOREUpload,
    // output parameters:
    _ns1__PCBData_USCOREUploadResponse &ns1__PCBData_USCOREUploadResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	PCBData_USCOREUpload SOAP
//gsoap ns1  service method-style:	PCBData_USCOREUpload document
//gsoap ns1  service method-encoding:	PCBData_USCOREUpload literal
//gsoap ns1  service method-input-action:	PCBData_USCOREUpload http://tempuri.org/PCBData_Upload
//gsoap ns1  service method-output-action:	PCBData_USCOREUpload http://tempuri.org/PCBData_UploadResponse
int __ns1__PCBData_USCOREUpload(
    _ns1__PCBData_USCOREUpload*         ns1__PCBData_USCOREUpload,	///< Input parameter
    _ns1__PCBData_USCOREUploadResponse &ns1__PCBData_USCOREUploadResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetShaoluKey                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetShaoluKey" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetShaoluKey"

  - Addressing input action: "http://tempuri.org/GetShaoluKey"

  - Addressing output action: "http://tempuri.org/GetShaoluKeyResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetShaoluKey(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetShaoluKey*                 ns1__GetShaoluKey,
    // output parameters:
    _ns1__GetShaoluKeyResponse         &ns1__GetShaoluKeyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetShaoluKey(
    struct soap *soap,
    // input parameters:
    _ns1__GetShaoluKey*                 ns1__GetShaoluKey,
    // output parameters:
    _ns1__GetShaoluKeyResponse         &ns1__GetShaoluKeyResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetShaoluKey SOAP
//gsoap ns1  service method-style:	GetShaoluKey document
//gsoap ns1  service method-encoding:	GetShaoluKey literal
//gsoap ns1  service method-input-action:	GetShaoluKey http://tempuri.org/GetShaoluKey
//gsoap ns1  service method-output-action:	GetShaoluKey http://tempuri.org/GetShaoluKeyResponse
int __ns1__GetShaoluKey(
    _ns1__GetShaoluKey*                 ns1__GetShaoluKey,	///< Input parameter
    _ns1__GetShaoluKeyResponse         &ns1__GetShaoluKeyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ReleaseKey                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ReleaseKey" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/ReleaseKey"

  - Addressing input action: "http://tempuri.org/ReleaseKey"

  - Addressing output action: "http://tempuri.org/ReleaseKeyResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ReleaseKey(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ReleaseKey*                   ns1__ReleaseKey,
    // output parameters:
    _ns1__ReleaseKeyResponse           &ns1__ReleaseKeyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ReleaseKey(
    struct soap *soap,
    // input parameters:
    _ns1__ReleaseKey*                   ns1__ReleaseKey,
    // output parameters:
    _ns1__ReleaseKeyResponse           &ns1__ReleaseKeyResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ReleaseKey SOAP
//gsoap ns1  service method-style:	ReleaseKey document
//gsoap ns1  service method-encoding:	ReleaseKey literal
//gsoap ns1  service method-input-action:	ReleaseKey http://tempuri.org/ReleaseKey
//gsoap ns1  service method-output-action:	ReleaseKey http://tempuri.org/ReleaseKeyResponse
int __ns1__ReleaseKey(
    _ns1__ReleaseKey*                   ns1__ReleaseKey,	///< Input parameter
    _ns1__ReleaseKeyResponse           &ns1__ReleaseKeyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BindKey                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BindKey" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/BindKey"

  - Addressing input action: "http://tempuri.org/BindKey"

  - Addressing output action: "http://tempuri.org/BindKeyResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BindKey(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BindKey*                      ns1__BindKey,
    // output parameters:
    _ns1__BindKeyResponse              &ns1__BindKeyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BindKey(
    struct soap *soap,
    // input parameters:
    _ns1__BindKey*                      ns1__BindKey,
    // output parameters:
    _ns1__BindKeyResponse              &ns1__BindKeyResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BindKey SOAP
//gsoap ns1  service method-style:	BindKey document
//gsoap ns1  service method-encoding:	BindKey literal
//gsoap ns1  service method-input-action:	BindKey http://tempuri.org/BindKey
//gsoap ns1  service method-output-action:	BindKey http://tempuri.org/BindKeyResponse
int __ns1__BindKey(
    _ns1__BindKey*                      ns1__BindKey,	///< Input parameter
    _ns1__BindKeyResponse              &ns1__BindKeyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetSparrowCheckData                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetSparrowCheckData" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetSparrowCheckData"

  - Addressing input action: "http://tempuri.org/GetSparrowCheckData"

  - Addressing output action: "http://tempuri.org/GetSparrowCheckDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetSparrowCheckData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetSparrowCheckData*          ns1__GetSparrowCheckData,
    // output parameters:
    _ns1__GetSparrowCheckDataResponse  &ns1__GetSparrowCheckDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetSparrowCheckData(
    struct soap *soap,
    // input parameters:
    _ns1__GetSparrowCheckData*          ns1__GetSparrowCheckData,
    // output parameters:
    _ns1__GetSparrowCheckDataResponse  &ns1__GetSparrowCheckDataResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetSparrowCheckData SOAP
//gsoap ns1  service method-style:	GetSparrowCheckData document
//gsoap ns1  service method-encoding:	GetSparrowCheckData literal
//gsoap ns1  service method-input-action:	GetSparrowCheckData http://tempuri.org/GetSparrowCheckData
//gsoap ns1  service method-output-action:	GetSparrowCheckData http://tempuri.org/GetSparrowCheckDataResponse
int __ns1__GetSparrowCheckData(
    _ns1__GetSparrowCheckData*          ns1__GetSparrowCheckData,	///< Input parameter
    _ns1__GetSparrowCheckDataResponse  &ns1__GetSparrowCheckDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BlindKeyNum                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BlindKeyNum" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/BlindKeyNum"

  - Addressing input action: "http://tempuri.org/BlindKeyNum"

  - Addressing output action: "http://tempuri.org/BlindKeyNumResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BlindKeyNum(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BlindKeyNum*                  ns1__BlindKeyNum,
    // output parameters:
    _ns1__BlindKeyNumResponse          &ns1__BlindKeyNumResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BlindKeyNum(
    struct soap *soap,
    // input parameters:
    _ns1__BlindKeyNum*                  ns1__BlindKeyNum,
    // output parameters:
    _ns1__BlindKeyNumResponse          &ns1__BlindKeyNumResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BlindKeyNum SOAP
//gsoap ns1  service method-style:	BlindKeyNum document
//gsoap ns1  service method-encoding:	BlindKeyNum literal
//gsoap ns1  service method-input-action:	BlindKeyNum http://tempuri.org/BlindKeyNum
//gsoap ns1  service method-output-action:	BlindKeyNum http://tempuri.org/BlindKeyNumResponse
int __ns1__BlindKeyNum(
    _ns1__BlindKeyNum*                  ns1__BlindKeyNum,	///< Input parameter
    _ns1__BlindKeyNumResponse          &ns1__BlindKeyNumResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DoFunction_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DoFunction_" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/DoFunction"

  - Addressing input action: "http://tempuri.org/DoFunction"

  - Addressing output action: "http://tempuri.org/DoFunctionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DoFunction_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DoFunction*                   ns1__DoFunction,
    // output parameters:
    _ns1__DoFunctionResponse           &ns1__DoFunctionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DoFunction_(
    struct soap *soap,
    // input parameters:
    _ns1__DoFunction*                   ns1__DoFunction,
    // output parameters:
    _ns1__DoFunctionResponse           &ns1__DoFunctionResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DoFunction_ SOAP
//gsoap ns1  service method-style:	DoFunction_ document
//gsoap ns1  service method-encoding:	DoFunction_ literal
//gsoap ns1  service method-input-action:	DoFunction_ http://tempuri.org/DoFunction
//gsoap ns1  service method-output-action:	DoFunction_ http://tempuri.org/DoFunctionResponse
int __ns1__DoFunction_(
    _ns1__DoFunction*                   ns1__DoFunction,	///< Input parameter
    _ns1__DoFunctionResponse           &ns1__DoFunctionResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UploadTestResult_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UploadTestResult_" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/UploadTestResult"

  - Addressing input action: "http://tempuri.org/UploadTestResult"

  - Addressing output action: "http://tempuri.org/UploadTestResultResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UploadTestResult_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UploadTestResult*             ns1__UploadTestResult,
    // output parameters:
    _ns1__UploadTestResultResponse     &ns1__UploadTestResultResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UploadTestResult_(
    struct soap *soap,
    // input parameters:
    _ns1__UploadTestResult*             ns1__UploadTestResult,
    // output parameters:
    _ns1__UploadTestResultResponse     &ns1__UploadTestResultResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UploadTestResult_ SOAP
//gsoap ns1  service method-style:	UploadTestResult_ document
//gsoap ns1  service method-encoding:	UploadTestResult_ literal
//gsoap ns1  service method-input-action:	UploadTestResult_ http://tempuri.org/UploadTestResult
//gsoap ns1  service method-output-action:	UploadTestResult_ http://tempuri.org/UploadTestResultResponse
int __ns1__UploadTestResult_(
    _ns1__UploadTestResult*             ns1__UploadTestResult,	///< Input parameter
    _ns1__UploadTestResultResponse     &ns1__UploadTestResultResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CheckSSN_                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CheckSSN_" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/CheckSSN"

  - Addressing input action: "http://tempuri.org/CheckSSN"

  - Addressing output action: "http://tempuri.org/CheckSSNResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CheckSSN_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CheckSSN*                     ns1__CheckSSN,
    // output parameters:
    _ns1__CheckSSNResponse             &ns1__CheckSSNResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CheckSSN_(
    struct soap *soap,
    // input parameters:
    _ns1__CheckSSN*                     ns1__CheckSSN,
    // output parameters:
    _ns1__CheckSSNResponse             &ns1__CheckSSNResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CheckSSN_ SOAP
//gsoap ns1  service method-style:	CheckSSN_ document
//gsoap ns1  service method-encoding:	CheckSSN_ literal
//gsoap ns1  service method-input-action:	CheckSSN_ http://tempuri.org/CheckSSN
//gsoap ns1  service method-output-action:	CheckSSN_ http://tempuri.org/CheckSSNResponse
int __ns1__CheckSSN_(
    _ns1__CheckSSN*                     ns1__CheckSSN,	///< Input parameter
    _ns1__CheckSSNResponse             &ns1__CheckSSNResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CheckSSN_USCORENEW_                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CheckSSN_USCORENEW_" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/CheckSSN_NEW"

  - Addressing input action: "http://tempuri.org/CheckSSN_NEW"

  - Addressing output action: "http://tempuri.org/CheckSSN_NEWResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CheckSSN_USCORENEW_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CheckSSN_USCORENEW*           ns1__CheckSSN_USCORENEW,
    // output parameters:
    _ns1__CheckSSN_USCORENEWResponse   &ns1__CheckSSN_USCORENEWResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CheckSSN_USCORENEW_(
    struct soap *soap,
    // input parameters:
    _ns1__CheckSSN_USCORENEW*           ns1__CheckSSN_USCORENEW,
    // output parameters:
    _ns1__CheckSSN_USCORENEWResponse   &ns1__CheckSSN_USCORENEWResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CheckSSN_USCORENEW_ SOAP
//gsoap ns1  service method-style:	CheckSSN_USCORENEW_ document
//gsoap ns1  service method-encoding:	CheckSSN_USCORENEW_ literal
//gsoap ns1  service method-input-action:	CheckSSN_USCORENEW_ http://tempuri.org/CheckSSN_NEW
//gsoap ns1  service method-output-action:	CheckSSN_USCORENEW_ http://tempuri.org/CheckSSN_NEWResponse
int __ns1__CheckSSN_USCORENEW_(
    _ns1__CheckSSN_USCORENEW*           ns1__CheckSSN_USCORENEW,	///< Input parameter
    _ns1__CheckSSN_USCORENEWResponse   &ns1__CheckSSN_USCORENEWResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Binding_                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Binding_" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/Binding"

  - Addressing input action: "http://tempuri.org/Binding"

  - Addressing output action: "http://tempuri.org/BindingResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Binding_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Binding*                      ns1__Binding,
    // output parameters:
    _ns1__BindingResponse              &ns1__BindingResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Binding_(
    struct soap *soap,
    // input parameters:
    _ns1__Binding*                      ns1__Binding,
    // output parameters:
    _ns1__BindingResponse              &ns1__BindingResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Binding_ SOAP
//gsoap ns1  service method-style:	Binding_ document
//gsoap ns1  service method-encoding:	Binding_ literal
//gsoap ns1  service method-input-action:	Binding_ http://tempuri.org/Binding
//gsoap ns1  service method-output-action:	Binding_ http://tempuri.org/BindingResponse
int __ns1__Binding_(
    _ns1__Binding*                      ns1__Binding,	///< Input parameter
    _ns1__BindingResponse              &ns1__BindingResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QueryBinding_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QueryBinding_" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/QueryBinding"

  - Addressing input action: "http://tempuri.org/QueryBinding"

  - Addressing output action: "http://tempuri.org/QueryBindingResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QueryBinding_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QueryBinding*                 ns1__QueryBinding,
    // output parameters:
    _ns1__QueryBindingResponse         &ns1__QueryBindingResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QueryBinding_(
    struct soap *soap,
    // input parameters:
    _ns1__QueryBinding*                 ns1__QueryBinding,
    // output parameters:
    _ns1__QueryBindingResponse         &ns1__QueryBindingResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QueryBinding_ SOAP
//gsoap ns1  service method-style:	QueryBinding_ document
//gsoap ns1  service method-encoding:	QueryBinding_ literal
//gsoap ns1  service method-input-action:	QueryBinding_ http://tempuri.org/QueryBinding
//gsoap ns1  service method-output-action:	QueryBinding_ http://tempuri.org/QueryBindingResponse
int __ns1__QueryBinding_(
    _ns1__QueryBinding*                 ns1__QueryBinding,	///< Input parameter
    _ns1__QueryBindingResponse         &ns1__QueryBindingResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SfcTestResult_USCOREUpload_                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SfcTestResult_USCOREUpload_" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/SfcTestResult_Upload"

  - Addressing input action: "http://tempuri.org/SfcTestResult_Upload"

  - Addressing output action: "http://tempuri.org/SfcTestResult_UploadResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SfcTestResult_USCOREUpload_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SfcTestResult_USCOREUpload*   ns1__SfcTestResult_USCOREUpload,
    // output parameters:
    _ns1__SfcTestResult_USCOREUploadResponse&ns1__SfcTestResult_USCOREUploadResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SfcTestResult_USCOREUpload_(
    struct soap *soap,
    // input parameters:
    _ns1__SfcTestResult_USCOREUpload*   ns1__SfcTestResult_USCOREUpload,
    // output parameters:
    _ns1__SfcTestResult_USCOREUploadResponse&ns1__SfcTestResult_USCOREUploadResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SfcTestResult_USCOREUpload_ SOAP
//gsoap ns1  service method-style:	SfcTestResult_USCOREUpload_ document
//gsoap ns1  service method-encoding:	SfcTestResult_USCOREUpload_ literal
//gsoap ns1  service method-input-action:	SfcTestResult_USCOREUpload_ http://tempuri.org/SfcTestResult_Upload
//gsoap ns1  service method-output-action:	SfcTestResult_USCOREUpload_ http://tempuri.org/SfcTestResult_UploadResponse
int __ns1__SfcTestResult_USCOREUpload_(
    _ns1__SfcTestResult_USCOREUpload*   ns1__SfcTestResult_USCOREUpload,	///< Input parameter
    _ns1__SfcTestResult_USCOREUploadResponse&ns1__SfcTestResult_USCOREUploadResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SaveSSN_USCORENEW_                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SaveSSN_USCORENEW_" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/SaveSSN_NEW"

  - Addressing input action: "http://tempuri.org/SaveSSN_NEW"

  - Addressing output action: "http://tempuri.org/SaveSSN_NEWResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SaveSSN_USCORENEW_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SaveSSN_USCORENEW*            ns1__SaveSSN_USCORENEW,
    // output parameters:
    _ns1__SaveSSN_USCORENEWResponse    &ns1__SaveSSN_USCORENEWResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SaveSSN_USCORENEW_(
    struct soap *soap,
    // input parameters:
    _ns1__SaveSSN_USCORENEW*            ns1__SaveSSN_USCORENEW,
    // output parameters:
    _ns1__SaveSSN_USCORENEWResponse    &ns1__SaveSSN_USCORENEWResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SaveSSN_USCORENEW_ SOAP
//gsoap ns1  service method-style:	SaveSSN_USCORENEW_ document
//gsoap ns1  service method-encoding:	SaveSSN_USCORENEW_ literal
//gsoap ns1  service method-input-action:	SaveSSN_USCORENEW_ http://tempuri.org/SaveSSN_NEW
//gsoap ns1  service method-output-action:	SaveSSN_USCORENEW_ http://tempuri.org/SaveSSN_NEWResponse
int __ns1__SaveSSN_USCORENEW_(
    _ns1__SaveSSN_USCORENEW*            ns1__SaveSSN_USCORENEW,	///< Input parameter
    _ns1__SaveSSN_USCORENEWResponse    &ns1__SaveSSN_USCORENEWResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__test_                                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__test_" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/test"

  - Addressing input action: "http://tempuri.org/test"

  - Addressing output action: "http://tempuri.org/testResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__test_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__test*                         ns1__test,
    // output parameters:
    _ns1__testResponse                 &ns1__testResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__test_(
    struct soap *soap,
    // input parameters:
    _ns1__test*                         ns1__test,
    // output parameters:
    _ns1__testResponse                 &ns1__testResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	test_ SOAP
//gsoap ns1  service method-style:	test_ document
//gsoap ns1  service method-encoding:	test_ literal
//gsoap ns1  service method-input-action:	test_ http://tempuri.org/test
//gsoap ns1  service method-output-action:	test_ http://tempuri.org/testResponse
int __ns1__test_(
    _ns1__test*                         ns1__test,	///< Input parameter
    _ns1__testResponse                 &ns1__testResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GETMACID_                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GETMACID_" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GETMACID"

  - Addressing input action: "http://tempuri.org/GETMACID"

  - Addressing output action: "http://tempuri.org/GETMACIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GETMACID_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GETMACID*                     ns1__GETMACID,
    // output parameters:
    _ns1__GETMACIDResponse             &ns1__GETMACIDResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GETMACID_(
    struct soap *soap,
    // input parameters:
    _ns1__GETMACID*                     ns1__GETMACID,
    // output parameters:
    _ns1__GETMACIDResponse             &ns1__GETMACIDResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GETMACID_ SOAP
//gsoap ns1  service method-style:	GETMACID_ document
//gsoap ns1  service method-encoding:	GETMACID_ literal
//gsoap ns1  service method-input-action:	GETMACID_ http://tempuri.org/GETMACID
//gsoap ns1  service method-output-action:	GETMACID_ http://tempuri.org/GETMACIDResponse
int __ns1__GETMACID_(
    _ns1__GETMACID*                     ns1__GETMACID,	///< Input parameter
    _ns1__GETMACIDResponse             &ns1__GETMACIDResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetMacBySn_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetMacBySn_" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetMacBySn"

  - Addressing input action: "http://tempuri.org/GetMacBySn"

  - Addressing output action: "http://tempuri.org/GetMacBySnResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetMacBySn_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetMacBySn*                   ns1__GetMacBySn,
    // output parameters:
    _ns1__GetMacBySnResponse           &ns1__GetMacBySnResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetMacBySn_(
    struct soap *soap,
    // input parameters:
    _ns1__GetMacBySn*                   ns1__GetMacBySn,
    // output parameters:
    _ns1__GetMacBySnResponse           &ns1__GetMacBySnResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetMacBySn_ SOAP
//gsoap ns1  service method-style:	GetMacBySn_ document
//gsoap ns1  service method-encoding:	GetMacBySn_ literal
//gsoap ns1  service method-input-action:	GetMacBySn_ http://tempuri.org/GetMacBySn
//gsoap ns1  service method-output-action:	GetMacBySn_ http://tempuri.org/GetMacBySnResponse
int __ns1__GetMacBySn_(
    _ns1__GetMacBySn*                   ns1__GetMacBySn,	///< Input parameter
    _ns1__GetMacBySnResponse           &ns1__GetMacBySnResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CartonWeight_USCOREUpload_                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CartonWeight_USCOREUpload_" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/CartonWeight_Upload"

  - Addressing input action: "http://tempuri.org/CartonWeight_Upload"

  - Addressing output action: "http://tempuri.org/CartonWeight_UploadResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CartonWeight_USCOREUpload_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CartonWeight_USCOREUpload*    ns1__CartonWeight_USCOREUpload,
    // output parameters:
    _ns1__CartonWeight_USCOREUploadResponse&ns1__CartonWeight_USCOREUploadResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CartonWeight_USCOREUpload_(
    struct soap *soap,
    // input parameters:
    _ns1__CartonWeight_USCOREUpload*    ns1__CartonWeight_USCOREUpload,
    // output parameters:
    _ns1__CartonWeight_USCOREUploadResponse&ns1__CartonWeight_USCOREUploadResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CartonWeight_USCOREUpload_ SOAP
//gsoap ns1  service method-style:	CartonWeight_USCOREUpload_ document
//gsoap ns1  service method-encoding:	CartonWeight_USCOREUpload_ literal
//gsoap ns1  service method-input-action:	CartonWeight_USCOREUpload_ http://tempuri.org/CartonWeight_Upload
//gsoap ns1  service method-output-action:	CartonWeight_USCOREUpload_ http://tempuri.org/CartonWeight_UploadResponse
int __ns1__CartonWeight_USCOREUpload_(
    _ns1__CartonWeight_USCOREUpload*    ns1__CartonWeight_USCOREUpload,	///< Input parameter
    _ns1__CartonWeight_USCOREUploadResponse&ns1__CartonWeight_USCOREUploadResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__PCBData_USCOREUpload_                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__PCBData_USCOREUpload_" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/PCBData_Upload"

  - Addressing input action: "http://tempuri.org/PCBData_Upload"

  - Addressing output action: "http://tempuri.org/PCBData_UploadResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__PCBData_USCOREUpload_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__PCBData_USCOREUpload*         ns1__PCBData_USCOREUpload,
    // output parameters:
    _ns1__PCBData_USCOREUploadResponse &ns1__PCBData_USCOREUploadResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__PCBData_USCOREUpload_(
    struct soap *soap,
    // input parameters:
    _ns1__PCBData_USCOREUpload*         ns1__PCBData_USCOREUpload,
    // output parameters:
    _ns1__PCBData_USCOREUploadResponse &ns1__PCBData_USCOREUploadResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	PCBData_USCOREUpload_ SOAP
//gsoap ns1  service method-style:	PCBData_USCOREUpload_ document
//gsoap ns1  service method-encoding:	PCBData_USCOREUpload_ literal
//gsoap ns1  service method-input-action:	PCBData_USCOREUpload_ http://tempuri.org/PCBData_Upload
//gsoap ns1  service method-output-action:	PCBData_USCOREUpload_ http://tempuri.org/PCBData_UploadResponse
int __ns1__PCBData_USCOREUpload_(
    _ns1__PCBData_USCOREUpload*         ns1__PCBData_USCOREUpload,	///< Input parameter
    _ns1__PCBData_USCOREUploadResponse &ns1__PCBData_USCOREUploadResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetShaoluKey_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetShaoluKey_" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetShaoluKey"

  - Addressing input action: "http://tempuri.org/GetShaoluKey"

  - Addressing output action: "http://tempuri.org/GetShaoluKeyResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetShaoluKey_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetShaoluKey*                 ns1__GetShaoluKey,
    // output parameters:
    _ns1__GetShaoluKeyResponse         &ns1__GetShaoluKeyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetShaoluKey_(
    struct soap *soap,
    // input parameters:
    _ns1__GetShaoluKey*                 ns1__GetShaoluKey,
    // output parameters:
    _ns1__GetShaoluKeyResponse         &ns1__GetShaoluKeyResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetShaoluKey_ SOAP
//gsoap ns1  service method-style:	GetShaoluKey_ document
//gsoap ns1  service method-encoding:	GetShaoluKey_ literal
//gsoap ns1  service method-input-action:	GetShaoluKey_ http://tempuri.org/GetShaoluKey
//gsoap ns1  service method-output-action:	GetShaoluKey_ http://tempuri.org/GetShaoluKeyResponse
int __ns1__GetShaoluKey_(
    _ns1__GetShaoluKey*                 ns1__GetShaoluKey,	///< Input parameter
    _ns1__GetShaoluKeyResponse         &ns1__GetShaoluKeyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ReleaseKey_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ReleaseKey_" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/ReleaseKey"

  - Addressing input action: "http://tempuri.org/ReleaseKey"

  - Addressing output action: "http://tempuri.org/ReleaseKeyResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ReleaseKey_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ReleaseKey*                   ns1__ReleaseKey,
    // output parameters:
    _ns1__ReleaseKeyResponse           &ns1__ReleaseKeyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ReleaseKey_(
    struct soap *soap,
    // input parameters:
    _ns1__ReleaseKey*                   ns1__ReleaseKey,
    // output parameters:
    _ns1__ReleaseKeyResponse           &ns1__ReleaseKeyResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ReleaseKey_ SOAP
//gsoap ns1  service method-style:	ReleaseKey_ document
//gsoap ns1  service method-encoding:	ReleaseKey_ literal
//gsoap ns1  service method-input-action:	ReleaseKey_ http://tempuri.org/ReleaseKey
//gsoap ns1  service method-output-action:	ReleaseKey_ http://tempuri.org/ReleaseKeyResponse
int __ns1__ReleaseKey_(
    _ns1__ReleaseKey*                   ns1__ReleaseKey,	///< Input parameter
    _ns1__ReleaseKeyResponse           &ns1__ReleaseKeyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BindKey_                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BindKey_" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/BindKey"

  - Addressing input action: "http://tempuri.org/BindKey"

  - Addressing output action: "http://tempuri.org/BindKeyResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BindKey_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BindKey*                      ns1__BindKey,
    // output parameters:
    _ns1__BindKeyResponse              &ns1__BindKeyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BindKey_(
    struct soap *soap,
    // input parameters:
    _ns1__BindKey*                      ns1__BindKey,
    // output parameters:
    _ns1__BindKeyResponse              &ns1__BindKeyResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BindKey_ SOAP
//gsoap ns1  service method-style:	BindKey_ document
//gsoap ns1  service method-encoding:	BindKey_ literal
//gsoap ns1  service method-input-action:	BindKey_ http://tempuri.org/BindKey
//gsoap ns1  service method-output-action:	BindKey_ http://tempuri.org/BindKeyResponse
int __ns1__BindKey_(
    _ns1__BindKey*                      ns1__BindKey,	///< Input parameter
    _ns1__BindKeyResponse              &ns1__BindKeyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetSparrowCheckData_                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetSparrowCheckData_" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/GetSparrowCheckData"

  - Addressing input action: "http://tempuri.org/GetSparrowCheckData"

  - Addressing output action: "http://tempuri.org/GetSparrowCheckDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetSparrowCheckData_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetSparrowCheckData*          ns1__GetSparrowCheckData,
    // output parameters:
    _ns1__GetSparrowCheckDataResponse  &ns1__GetSparrowCheckDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetSparrowCheckData_(
    struct soap *soap,
    // input parameters:
    _ns1__GetSparrowCheckData*          ns1__GetSparrowCheckData,
    // output parameters:
    _ns1__GetSparrowCheckDataResponse  &ns1__GetSparrowCheckDataResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetSparrowCheckData_ SOAP
//gsoap ns1  service method-style:	GetSparrowCheckData_ document
//gsoap ns1  service method-encoding:	GetSparrowCheckData_ literal
//gsoap ns1  service method-input-action:	GetSparrowCheckData_ http://tempuri.org/GetSparrowCheckData
//gsoap ns1  service method-output-action:	GetSparrowCheckData_ http://tempuri.org/GetSparrowCheckDataResponse
int __ns1__GetSparrowCheckData_(
    _ns1__GetSparrowCheckData*          ns1__GetSparrowCheckData,	///< Input parameter
    _ns1__GetSparrowCheckDataResponse  &ns1__GetSparrowCheckDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BlindKeyNum_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BlindKeyNum_" of service binding "SFCWebServiceSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://192.168.10.21/SfcWebService/SFCWebService.asmx

  - Default SOAP action or REST location path:
    - "http://tempuri.org/BlindKeyNum"

  - Addressing input action: "http://tempuri.org/BlindKeyNum"

  - Addressing output action: "http://tempuri.org/BlindKeyNumResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BlindKeyNum_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BlindKeyNum*                  ns1__BlindKeyNum,
    // output parameters:
    _ns1__BlindKeyNumResponse          &ns1__BlindKeyNumResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BlindKeyNum_(
    struct soap *soap,
    // input parameters:
    _ns1__BlindKeyNum*                  ns1__BlindKeyNum,
    // output parameters:
    _ns1__BlindKeyNumResponse          &ns1__BlindKeyNumResponse
  );
@endcode

C++ proxy class (defined in soapSFCWebServiceSoapProxy.h generated with soapcpp2):
@code
  class SFCWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapSFCWebServiceSoapService.h generated with soapcpp2):
@code
  class SFCWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BlindKeyNum_ SOAP
//gsoap ns1  service method-style:	BlindKeyNum_ document
//gsoap ns1  service method-encoding:	BlindKeyNum_ literal
//gsoap ns1  service method-input-action:	BlindKeyNum_ http://tempuri.org/BlindKeyNum
//gsoap ns1  service method-output-action:	BlindKeyNum_ http://tempuri.org/BlindKeyNumResponse
int __ns1__BlindKeyNum_(
    _ns1__BlindKeyNum*                  ns1__BlindKeyNum,	///< Input parameter
    _ns1__BlindKeyNumResponse          &ns1__BlindKeyNumResponse	///< Output parameter
);

/**

@page SFCWebServiceSoap Binding "SFCWebServiceSoap"

@section SFCWebServiceSoap_policy_enablers Policy Enablers of Binding "SFCWebServiceSoap"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://tempuri.org/"

  - <ns1:DoFunction> @ref _ns1__DoFunction
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DoFunction(struct soap*, _ns1__DoFunction*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DoFunction(struct soap*, _ns1__DoFunction*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DoFunction(struct soap*, const char *URL, _ns1__DoFunction*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DoFunction(struct soap*, const char *URL, _ns1__DoFunction*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DoFunction(struct soap*, const char *URL, _ns1__DoFunction*);
    soap_POST_recv__ns1__DoFunction(struct soap*, _ns1__DoFunction*);
    @endcode

  - <ns1:DoFunctionResponse> @ref _ns1__DoFunctionResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DoFunctionResponse(struct soap*, _ns1__DoFunctionResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DoFunctionResponse(struct soap*, _ns1__DoFunctionResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DoFunctionResponse(struct soap*, const char *URL, _ns1__DoFunctionResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DoFunctionResponse(struct soap*, const char *URL, _ns1__DoFunctionResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DoFunctionResponse(struct soap*, const char *URL, _ns1__DoFunctionResponse*);
    soap_POST_recv__ns1__DoFunctionResponse(struct soap*, _ns1__DoFunctionResponse*);
    @endcode

  - <ns1:UploadTestResult> @ref _ns1__UploadTestResult
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UploadTestResult(struct soap*, _ns1__UploadTestResult*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UploadTestResult(struct soap*, _ns1__UploadTestResult*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__UploadTestResult(struct soap*, const char *URL, _ns1__UploadTestResult*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__UploadTestResult(struct soap*, const char *URL, _ns1__UploadTestResult*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__UploadTestResult(struct soap*, const char *URL, _ns1__UploadTestResult*);
    soap_POST_recv__ns1__UploadTestResult(struct soap*, _ns1__UploadTestResult*);
    @endcode

  - <ns1:UploadTestResultResponse> @ref _ns1__UploadTestResultResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UploadTestResultResponse(struct soap*, _ns1__UploadTestResultResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UploadTestResultResponse(struct soap*, _ns1__UploadTestResultResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__UploadTestResultResponse(struct soap*, const char *URL, _ns1__UploadTestResultResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__UploadTestResultResponse(struct soap*, const char *URL, _ns1__UploadTestResultResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__UploadTestResultResponse(struct soap*, const char *URL, _ns1__UploadTestResultResponse*);
    soap_POST_recv__ns1__UploadTestResultResponse(struct soap*, _ns1__UploadTestResultResponse*);
    @endcode

  - <ns1:CheckSSN> @ref _ns1__CheckSSN
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CheckSSN(struct soap*, _ns1__CheckSSN*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CheckSSN(struct soap*, _ns1__CheckSSN*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CheckSSN(struct soap*, const char *URL, _ns1__CheckSSN*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CheckSSN(struct soap*, const char *URL, _ns1__CheckSSN*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CheckSSN(struct soap*, const char *URL, _ns1__CheckSSN*);
    soap_POST_recv__ns1__CheckSSN(struct soap*, _ns1__CheckSSN*);
    @endcode

  - <ns1:CheckSSNResponse> @ref _ns1__CheckSSNResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CheckSSNResponse(struct soap*, _ns1__CheckSSNResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CheckSSNResponse(struct soap*, _ns1__CheckSSNResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CheckSSNResponse(struct soap*, const char *URL, _ns1__CheckSSNResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CheckSSNResponse(struct soap*, const char *URL, _ns1__CheckSSNResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CheckSSNResponse(struct soap*, const char *URL, _ns1__CheckSSNResponse*);
    soap_POST_recv__ns1__CheckSSNResponse(struct soap*, _ns1__CheckSSNResponse*);
    @endcode

  - <ns1:CheckSSN_NEW> @ref _ns1__CheckSSN_USCORENEW
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CheckSSN_USCORENEW(struct soap*, _ns1__CheckSSN_USCORENEW*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CheckSSN_USCORENEW(struct soap*, _ns1__CheckSSN_USCORENEW*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CheckSSN_USCORENEW(struct soap*, const char *URL, _ns1__CheckSSN_USCORENEW*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CheckSSN_USCORENEW(struct soap*, const char *URL, _ns1__CheckSSN_USCORENEW*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CheckSSN_USCORENEW(struct soap*, const char *URL, _ns1__CheckSSN_USCORENEW*);
    soap_POST_recv__ns1__CheckSSN_USCORENEW(struct soap*, _ns1__CheckSSN_USCORENEW*);
    @endcode

  - <ns1:CheckSSN_NEWResponse> @ref _ns1__CheckSSN_USCORENEWResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CheckSSN_USCORENEWResponse(struct soap*, _ns1__CheckSSN_USCORENEWResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CheckSSN_USCORENEWResponse(struct soap*, _ns1__CheckSSN_USCORENEWResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CheckSSN_USCORENEWResponse(struct soap*, const char *URL, _ns1__CheckSSN_USCORENEWResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CheckSSN_USCORENEWResponse(struct soap*, const char *URL, _ns1__CheckSSN_USCORENEWResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CheckSSN_USCORENEWResponse(struct soap*, const char *URL, _ns1__CheckSSN_USCORENEWResponse*);
    soap_POST_recv__ns1__CheckSSN_USCORENEWResponse(struct soap*, _ns1__CheckSSN_USCORENEWResponse*);
    @endcode

  - <ns1:Binding> @ref _ns1__Binding
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Binding(struct soap*, _ns1__Binding*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Binding(struct soap*, _ns1__Binding*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__Binding(struct soap*, const char *URL, _ns1__Binding*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__Binding(struct soap*, const char *URL, _ns1__Binding*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__Binding(struct soap*, const char *URL, _ns1__Binding*);
    soap_POST_recv__ns1__Binding(struct soap*, _ns1__Binding*);
    @endcode

  - <ns1:BindingResponse> @ref _ns1__BindingResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BindingResponse(struct soap*, _ns1__BindingResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BindingResponse(struct soap*, _ns1__BindingResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__BindingResponse(struct soap*, const char *URL, _ns1__BindingResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__BindingResponse(struct soap*, const char *URL, _ns1__BindingResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__BindingResponse(struct soap*, const char *URL, _ns1__BindingResponse*);
    soap_POST_recv__ns1__BindingResponse(struct soap*, _ns1__BindingResponse*);
    @endcode

  - <ns1:QueryBinding> @ref _ns1__QueryBinding
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QueryBinding(struct soap*, _ns1__QueryBinding*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QueryBinding(struct soap*, _ns1__QueryBinding*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__QueryBinding(struct soap*, const char *URL, _ns1__QueryBinding*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__QueryBinding(struct soap*, const char *URL, _ns1__QueryBinding*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__QueryBinding(struct soap*, const char *URL, _ns1__QueryBinding*);
    soap_POST_recv__ns1__QueryBinding(struct soap*, _ns1__QueryBinding*);
    @endcode

  - <ns1:QueryBindingResponse> @ref _ns1__QueryBindingResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QueryBindingResponse(struct soap*, _ns1__QueryBindingResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QueryBindingResponse(struct soap*, _ns1__QueryBindingResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__QueryBindingResponse(struct soap*, const char *URL, _ns1__QueryBindingResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__QueryBindingResponse(struct soap*, const char *URL, _ns1__QueryBindingResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__QueryBindingResponse(struct soap*, const char *URL, _ns1__QueryBindingResponse*);
    soap_POST_recv__ns1__QueryBindingResponse(struct soap*, _ns1__QueryBindingResponse*);
    @endcode

  - <ns1:SfcTestResult_Upload> @ref _ns1__SfcTestResult_USCOREUpload
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SfcTestResult_USCOREUpload(struct soap*, _ns1__SfcTestResult_USCOREUpload*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SfcTestResult_USCOREUpload(struct soap*, _ns1__SfcTestResult_USCOREUpload*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__SfcTestResult_USCOREUpload(struct soap*, const char *URL, _ns1__SfcTestResult_USCOREUpload*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__SfcTestResult_USCOREUpload(struct soap*, const char *URL, _ns1__SfcTestResult_USCOREUpload*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__SfcTestResult_USCOREUpload(struct soap*, const char *URL, _ns1__SfcTestResult_USCOREUpload*);
    soap_POST_recv__ns1__SfcTestResult_USCOREUpload(struct soap*, _ns1__SfcTestResult_USCOREUpload*);
    @endcode

  - <ns1:SfcTestResult_UploadResponse> @ref _ns1__SfcTestResult_USCOREUploadResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SfcTestResult_USCOREUploadResponse(struct soap*, _ns1__SfcTestResult_USCOREUploadResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SfcTestResult_USCOREUploadResponse(struct soap*, _ns1__SfcTestResult_USCOREUploadResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__SfcTestResult_USCOREUploadResponse(struct soap*, const char *URL, _ns1__SfcTestResult_USCOREUploadResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__SfcTestResult_USCOREUploadResponse(struct soap*, const char *URL, _ns1__SfcTestResult_USCOREUploadResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__SfcTestResult_USCOREUploadResponse(struct soap*, const char *URL, _ns1__SfcTestResult_USCOREUploadResponse*);
    soap_POST_recv__ns1__SfcTestResult_USCOREUploadResponse(struct soap*, _ns1__SfcTestResult_USCOREUploadResponse*);
    @endcode

  - <ns1:SaveSSN_NEW> @ref _ns1__SaveSSN_USCORENEW
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SaveSSN_USCORENEW(struct soap*, _ns1__SaveSSN_USCORENEW*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SaveSSN_USCORENEW(struct soap*, _ns1__SaveSSN_USCORENEW*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__SaveSSN_USCORENEW(struct soap*, const char *URL, _ns1__SaveSSN_USCORENEW*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__SaveSSN_USCORENEW(struct soap*, const char *URL, _ns1__SaveSSN_USCORENEW*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__SaveSSN_USCORENEW(struct soap*, const char *URL, _ns1__SaveSSN_USCORENEW*);
    soap_POST_recv__ns1__SaveSSN_USCORENEW(struct soap*, _ns1__SaveSSN_USCORENEW*);
    @endcode

  - <ns1:SaveSSN_NEWResponse> @ref _ns1__SaveSSN_USCORENEWResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SaveSSN_USCORENEWResponse(struct soap*, _ns1__SaveSSN_USCORENEWResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SaveSSN_USCORENEWResponse(struct soap*, _ns1__SaveSSN_USCORENEWResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__SaveSSN_USCORENEWResponse(struct soap*, const char *URL, _ns1__SaveSSN_USCORENEWResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__SaveSSN_USCORENEWResponse(struct soap*, const char *URL, _ns1__SaveSSN_USCORENEWResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__SaveSSN_USCORENEWResponse(struct soap*, const char *URL, _ns1__SaveSSN_USCORENEWResponse*);
    soap_POST_recv__ns1__SaveSSN_USCORENEWResponse(struct soap*, _ns1__SaveSSN_USCORENEWResponse*);
    @endcode

  - <ns1:test> @ref _ns1__test
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__test(struct soap*, _ns1__test*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__test(struct soap*, _ns1__test*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__test(struct soap*, const char *URL, _ns1__test*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__test(struct soap*, const char *URL, _ns1__test*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__test(struct soap*, const char *URL, _ns1__test*);
    soap_POST_recv__ns1__test(struct soap*, _ns1__test*);
    @endcode

  - <ns1:testResponse> @ref _ns1__testResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__testResponse(struct soap*, _ns1__testResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__testResponse(struct soap*, _ns1__testResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__testResponse(struct soap*, const char *URL, _ns1__testResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__testResponse(struct soap*, const char *URL, _ns1__testResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__testResponse(struct soap*, const char *URL, _ns1__testResponse*);
    soap_POST_recv__ns1__testResponse(struct soap*, _ns1__testResponse*);
    @endcode

  - <ns1:GETMACID> @ref _ns1__GETMACID
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GETMACID(struct soap*, _ns1__GETMACID*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GETMACID(struct soap*, _ns1__GETMACID*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GETMACID(struct soap*, const char *URL, _ns1__GETMACID*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GETMACID(struct soap*, const char *URL, _ns1__GETMACID*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GETMACID(struct soap*, const char *URL, _ns1__GETMACID*);
    soap_POST_recv__ns1__GETMACID(struct soap*, _ns1__GETMACID*);
    @endcode

  - <ns1:GETMACIDResponse> @ref _ns1__GETMACIDResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GETMACIDResponse(struct soap*, _ns1__GETMACIDResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GETMACIDResponse(struct soap*, _ns1__GETMACIDResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GETMACIDResponse(struct soap*, const char *URL, _ns1__GETMACIDResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GETMACIDResponse(struct soap*, const char *URL, _ns1__GETMACIDResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GETMACIDResponse(struct soap*, const char *URL, _ns1__GETMACIDResponse*);
    soap_POST_recv__ns1__GETMACIDResponse(struct soap*, _ns1__GETMACIDResponse*);
    @endcode

  - <ns1:GetMacBySn> @ref _ns1__GetMacBySn
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetMacBySn(struct soap*, _ns1__GetMacBySn*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetMacBySn(struct soap*, _ns1__GetMacBySn*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetMacBySn(struct soap*, const char *URL, _ns1__GetMacBySn*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetMacBySn(struct soap*, const char *URL, _ns1__GetMacBySn*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetMacBySn(struct soap*, const char *URL, _ns1__GetMacBySn*);
    soap_POST_recv__ns1__GetMacBySn(struct soap*, _ns1__GetMacBySn*);
    @endcode

  - <ns1:GetMacBySnResponse> @ref _ns1__GetMacBySnResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetMacBySnResponse(struct soap*, _ns1__GetMacBySnResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetMacBySnResponse(struct soap*, _ns1__GetMacBySnResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetMacBySnResponse(struct soap*, const char *URL, _ns1__GetMacBySnResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetMacBySnResponse(struct soap*, const char *URL, _ns1__GetMacBySnResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetMacBySnResponse(struct soap*, const char *URL, _ns1__GetMacBySnResponse*);
    soap_POST_recv__ns1__GetMacBySnResponse(struct soap*, _ns1__GetMacBySnResponse*);
    @endcode

  - <ns1:CartonWeight_Upload> @ref _ns1__CartonWeight_USCOREUpload
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CartonWeight_USCOREUpload(struct soap*, _ns1__CartonWeight_USCOREUpload*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CartonWeight_USCOREUpload(struct soap*, _ns1__CartonWeight_USCOREUpload*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CartonWeight_USCOREUpload(struct soap*, const char *URL, _ns1__CartonWeight_USCOREUpload*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CartonWeight_USCOREUpload(struct soap*, const char *URL, _ns1__CartonWeight_USCOREUpload*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CartonWeight_USCOREUpload(struct soap*, const char *URL, _ns1__CartonWeight_USCOREUpload*);
    soap_POST_recv__ns1__CartonWeight_USCOREUpload(struct soap*, _ns1__CartonWeight_USCOREUpload*);
    @endcode

  - <ns1:CartonWeight_UploadResponse> @ref _ns1__CartonWeight_USCOREUploadResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CartonWeight_USCOREUploadResponse(struct soap*, _ns1__CartonWeight_USCOREUploadResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CartonWeight_USCOREUploadResponse(struct soap*, _ns1__CartonWeight_USCOREUploadResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CartonWeight_USCOREUploadResponse(struct soap*, const char *URL, _ns1__CartonWeight_USCOREUploadResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CartonWeight_USCOREUploadResponse(struct soap*, const char *URL, _ns1__CartonWeight_USCOREUploadResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CartonWeight_USCOREUploadResponse(struct soap*, const char *URL, _ns1__CartonWeight_USCOREUploadResponse*);
    soap_POST_recv__ns1__CartonWeight_USCOREUploadResponse(struct soap*, _ns1__CartonWeight_USCOREUploadResponse*);
    @endcode

  - <ns1:PCBData_Upload> @ref _ns1__PCBData_USCOREUpload
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__PCBData_USCOREUpload(struct soap*, _ns1__PCBData_USCOREUpload*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__PCBData_USCOREUpload(struct soap*, _ns1__PCBData_USCOREUpload*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__PCBData_USCOREUpload(struct soap*, const char *URL, _ns1__PCBData_USCOREUpload*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__PCBData_USCOREUpload(struct soap*, const char *URL, _ns1__PCBData_USCOREUpload*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__PCBData_USCOREUpload(struct soap*, const char *URL, _ns1__PCBData_USCOREUpload*);
    soap_POST_recv__ns1__PCBData_USCOREUpload(struct soap*, _ns1__PCBData_USCOREUpload*);
    @endcode

  - <ns1:PCBData_UploadResponse> @ref _ns1__PCBData_USCOREUploadResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__PCBData_USCOREUploadResponse(struct soap*, _ns1__PCBData_USCOREUploadResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__PCBData_USCOREUploadResponse(struct soap*, _ns1__PCBData_USCOREUploadResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__PCBData_USCOREUploadResponse(struct soap*, const char *URL, _ns1__PCBData_USCOREUploadResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__PCBData_USCOREUploadResponse(struct soap*, const char *URL, _ns1__PCBData_USCOREUploadResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__PCBData_USCOREUploadResponse(struct soap*, const char *URL, _ns1__PCBData_USCOREUploadResponse*);
    soap_POST_recv__ns1__PCBData_USCOREUploadResponse(struct soap*, _ns1__PCBData_USCOREUploadResponse*);
    @endcode

  - <ns1:GetShaoluKey> @ref _ns1__GetShaoluKey
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetShaoluKey(struct soap*, _ns1__GetShaoluKey*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetShaoluKey(struct soap*, _ns1__GetShaoluKey*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetShaoluKey(struct soap*, const char *URL, _ns1__GetShaoluKey*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetShaoluKey(struct soap*, const char *URL, _ns1__GetShaoluKey*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetShaoluKey(struct soap*, const char *URL, _ns1__GetShaoluKey*);
    soap_POST_recv__ns1__GetShaoluKey(struct soap*, _ns1__GetShaoluKey*);
    @endcode

  - <ns1:GetShaoluKeyResponse> @ref _ns1__GetShaoluKeyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetShaoluKeyResponse(struct soap*, _ns1__GetShaoluKeyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetShaoluKeyResponse(struct soap*, _ns1__GetShaoluKeyResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetShaoluKeyResponse(struct soap*, const char *URL, _ns1__GetShaoluKeyResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetShaoluKeyResponse(struct soap*, const char *URL, _ns1__GetShaoluKeyResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetShaoluKeyResponse(struct soap*, const char *URL, _ns1__GetShaoluKeyResponse*);
    soap_POST_recv__ns1__GetShaoluKeyResponse(struct soap*, _ns1__GetShaoluKeyResponse*);
    @endcode

  - <ns1:ReleaseKey> @ref _ns1__ReleaseKey
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ReleaseKey(struct soap*, _ns1__ReleaseKey*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ReleaseKey(struct soap*, _ns1__ReleaseKey*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__ReleaseKey(struct soap*, const char *URL, _ns1__ReleaseKey*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__ReleaseKey(struct soap*, const char *URL, _ns1__ReleaseKey*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__ReleaseKey(struct soap*, const char *URL, _ns1__ReleaseKey*);
    soap_POST_recv__ns1__ReleaseKey(struct soap*, _ns1__ReleaseKey*);
    @endcode

  - <ns1:ReleaseKeyResponse> @ref _ns1__ReleaseKeyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ReleaseKeyResponse(struct soap*, _ns1__ReleaseKeyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ReleaseKeyResponse(struct soap*, _ns1__ReleaseKeyResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__ReleaseKeyResponse(struct soap*, const char *URL, _ns1__ReleaseKeyResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__ReleaseKeyResponse(struct soap*, const char *URL, _ns1__ReleaseKeyResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__ReleaseKeyResponse(struct soap*, const char *URL, _ns1__ReleaseKeyResponse*);
    soap_POST_recv__ns1__ReleaseKeyResponse(struct soap*, _ns1__ReleaseKeyResponse*);
    @endcode

  - <ns1:BindKey> @ref _ns1__BindKey
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BindKey(struct soap*, _ns1__BindKey*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BindKey(struct soap*, _ns1__BindKey*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__BindKey(struct soap*, const char *URL, _ns1__BindKey*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__BindKey(struct soap*, const char *URL, _ns1__BindKey*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__BindKey(struct soap*, const char *URL, _ns1__BindKey*);
    soap_POST_recv__ns1__BindKey(struct soap*, _ns1__BindKey*);
    @endcode

  - <ns1:BindKeyResponse> @ref _ns1__BindKeyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BindKeyResponse(struct soap*, _ns1__BindKeyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BindKeyResponse(struct soap*, _ns1__BindKeyResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__BindKeyResponse(struct soap*, const char *URL, _ns1__BindKeyResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__BindKeyResponse(struct soap*, const char *URL, _ns1__BindKeyResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__BindKeyResponse(struct soap*, const char *URL, _ns1__BindKeyResponse*);
    soap_POST_recv__ns1__BindKeyResponse(struct soap*, _ns1__BindKeyResponse*);
    @endcode

  - <ns1:GetSparrowCheckData> @ref _ns1__GetSparrowCheckData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetSparrowCheckData(struct soap*, _ns1__GetSparrowCheckData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetSparrowCheckData(struct soap*, _ns1__GetSparrowCheckData*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetSparrowCheckData(struct soap*, const char *URL, _ns1__GetSparrowCheckData*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetSparrowCheckData(struct soap*, const char *URL, _ns1__GetSparrowCheckData*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetSparrowCheckData(struct soap*, const char *URL, _ns1__GetSparrowCheckData*);
    soap_POST_recv__ns1__GetSparrowCheckData(struct soap*, _ns1__GetSparrowCheckData*);
    @endcode

  - <ns1:GetSparrowCheckDataResponse> @ref _ns1__GetSparrowCheckDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetSparrowCheckDataResponse(struct soap*, _ns1__GetSparrowCheckDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetSparrowCheckDataResponse(struct soap*, _ns1__GetSparrowCheckDataResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetSparrowCheckDataResponse(struct soap*, const char *URL, _ns1__GetSparrowCheckDataResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetSparrowCheckDataResponse(struct soap*, const char *URL, _ns1__GetSparrowCheckDataResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetSparrowCheckDataResponse(struct soap*, const char *URL, _ns1__GetSparrowCheckDataResponse*);
    soap_POST_recv__ns1__GetSparrowCheckDataResponse(struct soap*, _ns1__GetSparrowCheckDataResponse*);
    @endcode

  - <ns1:BlindKeyNum> @ref _ns1__BlindKeyNum
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BlindKeyNum(struct soap*, _ns1__BlindKeyNum*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BlindKeyNum(struct soap*, _ns1__BlindKeyNum*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__BlindKeyNum(struct soap*, const char *URL, _ns1__BlindKeyNum*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__BlindKeyNum(struct soap*, const char *URL, _ns1__BlindKeyNum*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__BlindKeyNum(struct soap*, const char *URL, _ns1__BlindKeyNum*);
    soap_POST_recv__ns1__BlindKeyNum(struct soap*, _ns1__BlindKeyNum*);
    @endcode

  - <ns1:BlindKeyNumResponse> @ref _ns1__BlindKeyNumResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BlindKeyNumResponse(struct soap*, _ns1__BlindKeyNumResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BlindKeyNumResponse(struct soap*, _ns1__BlindKeyNumResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__BlindKeyNumResponse(struct soap*, const char *URL, _ns1__BlindKeyNumResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__BlindKeyNumResponse(struct soap*, const char *URL, _ns1__BlindKeyNumResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__BlindKeyNumResponse(struct soap*, const char *URL, _ns1__BlindKeyNumResponse*);
    soap_POST_recv__ns1__BlindKeyNumResponse(struct soap*, _ns1__BlindKeyNumResponse*);
    @endcode

*/

/* End of webservice.h */
