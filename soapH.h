/* soapH.h
   Generated by gSOAP 2.8.58 for webservice.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_float_DEFINED
#define SOAP_TYPE_float_DEFINED

inline void soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 float * SOAP_FMAC4 soap_new_float(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

inline int soap_write_float(struct soap *soap, float const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_float(soap, p, "float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_float(soap, p, "float", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

inline int soap_read_float(struct soap *soap, float *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_float(struct soap *soap, const char *URL, float *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_float(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_float(struct soap *soap, float *p)
{
	if (soap_read_float(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_dateTime(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (soap_read_dateTime(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_bool(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (soap_read_bool(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GETMACIDResponse_GETMACIDResult_DEFINED
#define SOAP_TYPE__ns1__GETMACIDResponse_GETMACIDResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GETMACIDResponse_GETMACIDResult(struct soap*, const char*, int, const _ns1__GETMACIDResponse_GETMACIDResult *, const char*);
SOAP_FMAC3 _ns1__GETMACIDResponse_GETMACIDResult * SOAP_FMAC4 soap_in__ns1__GETMACIDResponse_GETMACIDResult(struct soap*, const char*, _ns1__GETMACIDResponse_GETMACIDResult *, const char*);
SOAP_FMAC1 _ns1__GETMACIDResponse_GETMACIDResult * SOAP_FMAC2 soap_instantiate__ns1__GETMACIDResponse_GETMACIDResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GETMACIDResponse_GETMACIDResult * soap_new__ns1__GETMACIDResponse_GETMACIDResult(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GETMACIDResponse_GETMACIDResult(soap, n, NULL, NULL, NULL);
}

inline _ns1__GETMACIDResponse_GETMACIDResult * soap_new_req__ns1__GETMACIDResponse_GETMACIDResult(
	struct soap *soap,
	int __size,
	char *__any)
{
	_ns1__GETMACIDResponse_GETMACIDResult *_p = soap_new__ns1__GETMACIDResponse_GETMACIDResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GETMACIDResponse_GETMACIDResult::__size = __size;
		_p->_ns1__GETMACIDResponse_GETMACIDResult::__any = __any;
	}
	return _p;
}

inline _ns1__GETMACIDResponse_GETMACIDResult * soap_new_set__ns1__GETMACIDResponse_GETMACIDResult(
	struct soap *soap,
	int __size,
	char *__any,
	char *__any_)
{
	_ns1__GETMACIDResponse_GETMACIDResult *_p = soap_new__ns1__GETMACIDResponse_GETMACIDResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GETMACIDResponse_GETMACIDResult::__size = __size;
		_p->_ns1__GETMACIDResponse_GETMACIDResult::__any = __any;
		_p->_ns1__GETMACIDResponse_GETMACIDResult::__any_ = __any_;
	}
	return _p;
}

inline int soap_write__ns1__GETMACIDResponse_GETMACIDResult(struct soap *soap, _ns1__GETMACIDResponse_GETMACIDResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GETMACIDResponse-GETMACIDResult", p->soap_type() == SOAP_TYPE__ns1__GETMACIDResponse_GETMACIDResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GETMACIDResponse_GETMACIDResult(struct soap *soap, const char *URL, _ns1__GETMACIDResponse_GETMACIDResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GETMACIDResponse-GETMACIDResult", p->soap_type() == SOAP_TYPE__ns1__GETMACIDResponse_GETMACIDResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GETMACIDResponse_GETMACIDResult(struct soap *soap, const char *URL, _ns1__GETMACIDResponse_GETMACIDResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GETMACIDResponse-GETMACIDResult", p->soap_type() == SOAP_TYPE__ns1__GETMACIDResponse_GETMACIDResult ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GETMACIDResponse_GETMACIDResult * SOAP_FMAC4 soap_get__ns1__GETMACIDResponse_GETMACIDResult(struct soap*, _ns1__GETMACIDResponse_GETMACIDResult *, const char*, const char*);

inline int soap_read__ns1__GETMACIDResponse_GETMACIDResult(struct soap *soap, _ns1__GETMACIDResponse_GETMACIDResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GETMACIDResponse_GETMACIDResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GETMACIDResponse_GETMACIDResult(struct soap *soap, const char *URL, _ns1__GETMACIDResponse_GETMACIDResult *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GETMACIDResponse_GETMACIDResult(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GETMACIDResponse_GETMACIDResult(struct soap *soap, _ns1__GETMACIDResponse_GETMACIDResult *p)
{
	if (soap_read__ns1__GETMACIDResponse_GETMACIDResult(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__BlindKeyNumResponse_DEFINED
#define SOAP_TYPE__ns1__BlindKeyNumResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BlindKeyNumResponse(struct soap*, const char*, int, const _ns1__BlindKeyNumResponse *, const char*);
SOAP_FMAC3 _ns1__BlindKeyNumResponse * SOAP_FMAC4 soap_in__ns1__BlindKeyNumResponse(struct soap*, const char*, _ns1__BlindKeyNumResponse *, const char*);
SOAP_FMAC1 _ns1__BlindKeyNumResponse * SOAP_FMAC2 soap_instantiate__ns1__BlindKeyNumResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BlindKeyNumResponse * soap_new__ns1__BlindKeyNumResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BlindKeyNumResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__BlindKeyNumResponse * soap_new_req__ns1__BlindKeyNumResponse(
	struct soap *soap)
{
	_ns1__BlindKeyNumResponse *_p = soap_new__ns1__BlindKeyNumResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__BlindKeyNumResponse * soap_new_set__ns1__BlindKeyNumResponse(
	struct soap *soap,
	ns1__ArrayOfAnyType *BlindKeyNumResult)
{
	_ns1__BlindKeyNumResponse *_p = soap_new__ns1__BlindKeyNumResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BlindKeyNumResponse::BlindKeyNumResult = BlindKeyNumResult;
	}
	return _p;
}

inline int soap_write__ns1__BlindKeyNumResponse(struct soap *soap, _ns1__BlindKeyNumResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BlindKeyNumResponse", p->soap_type() == SOAP_TYPE__ns1__BlindKeyNumResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BlindKeyNumResponse(struct soap *soap, const char *URL, _ns1__BlindKeyNumResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BlindKeyNumResponse", p->soap_type() == SOAP_TYPE__ns1__BlindKeyNumResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BlindKeyNumResponse(struct soap *soap, const char *URL, _ns1__BlindKeyNumResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BlindKeyNumResponse", p->soap_type() == SOAP_TYPE__ns1__BlindKeyNumResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BlindKeyNumResponse * SOAP_FMAC4 soap_get__ns1__BlindKeyNumResponse(struct soap*, _ns1__BlindKeyNumResponse *, const char*, const char*);

inline int soap_read__ns1__BlindKeyNumResponse(struct soap *soap, _ns1__BlindKeyNumResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__BlindKeyNumResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BlindKeyNumResponse(struct soap *soap, const char *URL, _ns1__BlindKeyNumResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__BlindKeyNumResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__BlindKeyNumResponse(struct soap *soap, _ns1__BlindKeyNumResponse *p)
{
	if (soap_read__ns1__BlindKeyNumResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__BlindKeyNum_DEFINED
#define SOAP_TYPE__ns1__BlindKeyNum_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BlindKeyNum(struct soap*, const char*, int, const _ns1__BlindKeyNum *, const char*);
SOAP_FMAC3 _ns1__BlindKeyNum * SOAP_FMAC4 soap_in__ns1__BlindKeyNum(struct soap*, const char*, _ns1__BlindKeyNum *, const char*);
SOAP_FMAC1 _ns1__BlindKeyNum * SOAP_FMAC2 soap_instantiate__ns1__BlindKeyNum(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BlindKeyNum * soap_new__ns1__BlindKeyNum(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BlindKeyNum(soap, n, NULL, NULL, NULL);
}

inline _ns1__BlindKeyNum * soap_new_req__ns1__BlindKeyNum(
	struct soap *soap)
{
	_ns1__BlindKeyNum *_p = soap_new__ns1__BlindKeyNum(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__BlindKeyNum * soap_new_set__ns1__BlindKeyNum(
	struct soap *soap,
	char *strSSN,
	char *strEventPoint,
	char *user,
	char *Key,
	char *Key2,
	char *Key3)
{
	_ns1__BlindKeyNum *_p = soap_new__ns1__BlindKeyNum(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BlindKeyNum::strSSN = strSSN;
		_p->_ns1__BlindKeyNum::strEventPoint = strEventPoint;
		_p->_ns1__BlindKeyNum::user = user;
		_p->_ns1__BlindKeyNum::Key = Key;
		_p->_ns1__BlindKeyNum::Key2 = Key2;
		_p->_ns1__BlindKeyNum::Key3 = Key3;
	}
	return _p;
}

inline int soap_write__ns1__BlindKeyNum(struct soap *soap, _ns1__BlindKeyNum const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BlindKeyNum", p->soap_type() == SOAP_TYPE__ns1__BlindKeyNum ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BlindKeyNum(struct soap *soap, const char *URL, _ns1__BlindKeyNum const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BlindKeyNum", p->soap_type() == SOAP_TYPE__ns1__BlindKeyNum ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BlindKeyNum(struct soap *soap, const char *URL, _ns1__BlindKeyNum const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BlindKeyNum", p->soap_type() == SOAP_TYPE__ns1__BlindKeyNum ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BlindKeyNum * SOAP_FMAC4 soap_get__ns1__BlindKeyNum(struct soap*, _ns1__BlindKeyNum *, const char*, const char*);

inline int soap_read__ns1__BlindKeyNum(struct soap *soap, _ns1__BlindKeyNum *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__BlindKeyNum(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BlindKeyNum(struct soap *soap, const char *URL, _ns1__BlindKeyNum *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__BlindKeyNum(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__BlindKeyNum(struct soap *soap, _ns1__BlindKeyNum *p)
{
	if (soap_read__ns1__BlindKeyNum(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetSparrowCheckDataResponse_DEFINED
#define SOAP_TYPE__ns1__GetSparrowCheckDataResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSparrowCheckDataResponse(struct soap*, const char*, int, const _ns1__GetSparrowCheckDataResponse *, const char*);
SOAP_FMAC3 _ns1__GetSparrowCheckDataResponse * SOAP_FMAC4 soap_in__ns1__GetSparrowCheckDataResponse(struct soap*, const char*, _ns1__GetSparrowCheckDataResponse *, const char*);
SOAP_FMAC1 _ns1__GetSparrowCheckDataResponse * SOAP_FMAC2 soap_instantiate__ns1__GetSparrowCheckDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetSparrowCheckDataResponse * soap_new__ns1__GetSparrowCheckDataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetSparrowCheckDataResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetSparrowCheckDataResponse * soap_new_req__ns1__GetSparrowCheckDataResponse(
	struct soap *soap)
{
	_ns1__GetSparrowCheckDataResponse *_p = soap_new__ns1__GetSparrowCheckDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetSparrowCheckDataResponse * soap_new_set__ns1__GetSparrowCheckDataResponse(
	struct soap *soap,
	ns1__ArrayOfAnyType *GetSparrowCheckDataResult)
{
	_ns1__GetSparrowCheckDataResponse *_p = soap_new__ns1__GetSparrowCheckDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetSparrowCheckDataResponse::GetSparrowCheckDataResult = GetSparrowCheckDataResult;
	}
	return _p;
}

inline int soap_write__ns1__GetSparrowCheckDataResponse(struct soap *soap, _ns1__GetSparrowCheckDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSparrowCheckDataResponse", p->soap_type() == SOAP_TYPE__ns1__GetSparrowCheckDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetSparrowCheckDataResponse(struct soap *soap, const char *URL, _ns1__GetSparrowCheckDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSparrowCheckDataResponse", p->soap_type() == SOAP_TYPE__ns1__GetSparrowCheckDataResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetSparrowCheckDataResponse(struct soap *soap, const char *URL, _ns1__GetSparrowCheckDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSparrowCheckDataResponse", p->soap_type() == SOAP_TYPE__ns1__GetSparrowCheckDataResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetSparrowCheckDataResponse * SOAP_FMAC4 soap_get__ns1__GetSparrowCheckDataResponse(struct soap*, _ns1__GetSparrowCheckDataResponse *, const char*, const char*);

inline int soap_read__ns1__GetSparrowCheckDataResponse(struct soap *soap, _ns1__GetSparrowCheckDataResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetSparrowCheckDataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetSparrowCheckDataResponse(struct soap *soap, const char *URL, _ns1__GetSparrowCheckDataResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetSparrowCheckDataResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetSparrowCheckDataResponse(struct soap *soap, _ns1__GetSparrowCheckDataResponse *p)
{
	if (soap_read__ns1__GetSparrowCheckDataResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetSparrowCheckData_DEFINED
#define SOAP_TYPE__ns1__GetSparrowCheckData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSparrowCheckData(struct soap*, const char*, int, const _ns1__GetSparrowCheckData *, const char*);
SOAP_FMAC3 _ns1__GetSparrowCheckData * SOAP_FMAC4 soap_in__ns1__GetSparrowCheckData(struct soap*, const char*, _ns1__GetSparrowCheckData *, const char*);
SOAP_FMAC1 _ns1__GetSparrowCheckData * SOAP_FMAC2 soap_instantiate__ns1__GetSparrowCheckData(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetSparrowCheckData * soap_new__ns1__GetSparrowCheckData(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetSparrowCheckData(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetSparrowCheckData * soap_new_req__ns1__GetSparrowCheckData(
	struct soap *soap)
{
	_ns1__GetSparrowCheckData *_p = soap_new__ns1__GetSparrowCheckData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetSparrowCheckData * soap_new_set__ns1__GetSparrowCheckData(
	struct soap *soap,
	char *SN)
{
	_ns1__GetSparrowCheckData *_p = soap_new__ns1__GetSparrowCheckData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetSparrowCheckData::SN = SN;
	}
	return _p;
}

inline int soap_write__ns1__GetSparrowCheckData(struct soap *soap, _ns1__GetSparrowCheckData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSparrowCheckData", p->soap_type() == SOAP_TYPE__ns1__GetSparrowCheckData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetSparrowCheckData(struct soap *soap, const char *URL, _ns1__GetSparrowCheckData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSparrowCheckData", p->soap_type() == SOAP_TYPE__ns1__GetSparrowCheckData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetSparrowCheckData(struct soap *soap, const char *URL, _ns1__GetSparrowCheckData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSparrowCheckData", p->soap_type() == SOAP_TYPE__ns1__GetSparrowCheckData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetSparrowCheckData * SOAP_FMAC4 soap_get__ns1__GetSparrowCheckData(struct soap*, _ns1__GetSparrowCheckData *, const char*, const char*);

inline int soap_read__ns1__GetSparrowCheckData(struct soap *soap, _ns1__GetSparrowCheckData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetSparrowCheckData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetSparrowCheckData(struct soap *soap, const char *URL, _ns1__GetSparrowCheckData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetSparrowCheckData(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetSparrowCheckData(struct soap *soap, _ns1__GetSparrowCheckData *p)
{
	if (soap_read__ns1__GetSparrowCheckData(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__BindKeyResponse_DEFINED
#define SOAP_TYPE__ns1__BindKeyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BindKeyResponse(struct soap*, const char*, int, const _ns1__BindKeyResponse *, const char*);
SOAP_FMAC3 _ns1__BindKeyResponse * SOAP_FMAC4 soap_in__ns1__BindKeyResponse(struct soap*, const char*, _ns1__BindKeyResponse *, const char*);
SOAP_FMAC1 _ns1__BindKeyResponse * SOAP_FMAC2 soap_instantiate__ns1__BindKeyResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BindKeyResponse * soap_new__ns1__BindKeyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BindKeyResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__BindKeyResponse * soap_new_req__ns1__BindKeyResponse(
	struct soap *soap)
{
	_ns1__BindKeyResponse *_p = soap_new__ns1__BindKeyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__BindKeyResponse * soap_new_set__ns1__BindKeyResponse(
	struct soap *soap,
	ns1__ArrayOfAnyType *BindKeyResult)
{
	_ns1__BindKeyResponse *_p = soap_new__ns1__BindKeyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BindKeyResponse::BindKeyResult = BindKeyResult;
	}
	return _p;
}

inline int soap_write__ns1__BindKeyResponse(struct soap *soap, _ns1__BindKeyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindKeyResponse", p->soap_type() == SOAP_TYPE__ns1__BindKeyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BindKeyResponse(struct soap *soap, const char *URL, _ns1__BindKeyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindKeyResponse", p->soap_type() == SOAP_TYPE__ns1__BindKeyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BindKeyResponse(struct soap *soap, const char *URL, _ns1__BindKeyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindKeyResponse", p->soap_type() == SOAP_TYPE__ns1__BindKeyResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BindKeyResponse * SOAP_FMAC4 soap_get__ns1__BindKeyResponse(struct soap*, _ns1__BindKeyResponse *, const char*, const char*);

inline int soap_read__ns1__BindKeyResponse(struct soap *soap, _ns1__BindKeyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__BindKeyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BindKeyResponse(struct soap *soap, const char *URL, _ns1__BindKeyResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__BindKeyResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__BindKeyResponse(struct soap *soap, _ns1__BindKeyResponse *p)
{
	if (soap_read__ns1__BindKeyResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__BindKey_DEFINED
#define SOAP_TYPE__ns1__BindKey_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BindKey(struct soap*, const char*, int, const _ns1__BindKey *, const char*);
SOAP_FMAC3 _ns1__BindKey * SOAP_FMAC4 soap_in__ns1__BindKey(struct soap*, const char*, _ns1__BindKey *, const char*);
SOAP_FMAC1 _ns1__BindKey * SOAP_FMAC2 soap_instantiate__ns1__BindKey(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BindKey * soap_new__ns1__BindKey(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BindKey(soap, n, NULL, NULL, NULL);
}

inline _ns1__BindKey * soap_new_req__ns1__BindKey(
	struct soap *soap)
{
	_ns1__BindKey *_p = soap_new__ns1__BindKey(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__BindKey * soap_new_set__ns1__BindKey(
	struct soap *soap,
	char *key,
	char *ssn)
{
	_ns1__BindKey *_p = soap_new__ns1__BindKey(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BindKey::key = key;
		_p->_ns1__BindKey::ssn = ssn;
	}
	return _p;
}

inline int soap_write__ns1__BindKey(struct soap *soap, _ns1__BindKey const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindKey", p->soap_type() == SOAP_TYPE__ns1__BindKey ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BindKey(struct soap *soap, const char *URL, _ns1__BindKey const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindKey", p->soap_type() == SOAP_TYPE__ns1__BindKey ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BindKey(struct soap *soap, const char *URL, _ns1__BindKey const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindKey", p->soap_type() == SOAP_TYPE__ns1__BindKey ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BindKey * SOAP_FMAC4 soap_get__ns1__BindKey(struct soap*, _ns1__BindKey *, const char*, const char*);

inline int soap_read__ns1__BindKey(struct soap *soap, _ns1__BindKey *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__BindKey(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BindKey(struct soap *soap, const char *URL, _ns1__BindKey *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__BindKey(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__BindKey(struct soap *soap, _ns1__BindKey *p)
{
	if (soap_read__ns1__BindKey(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ReleaseKeyResponse_DEFINED
#define SOAP_TYPE__ns1__ReleaseKeyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReleaseKeyResponse(struct soap*, const char*, int, const _ns1__ReleaseKeyResponse *, const char*);
SOAP_FMAC3 _ns1__ReleaseKeyResponse * SOAP_FMAC4 soap_in__ns1__ReleaseKeyResponse(struct soap*, const char*, _ns1__ReleaseKeyResponse *, const char*);
SOAP_FMAC1 _ns1__ReleaseKeyResponse * SOAP_FMAC2 soap_instantiate__ns1__ReleaseKeyResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ReleaseKeyResponse * soap_new__ns1__ReleaseKeyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ReleaseKeyResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ReleaseKeyResponse * soap_new_req__ns1__ReleaseKeyResponse(
	struct soap *soap)
{
	_ns1__ReleaseKeyResponse *_p = soap_new__ns1__ReleaseKeyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ReleaseKeyResponse * soap_new_set__ns1__ReleaseKeyResponse(
	struct soap *soap,
	ns1__ArrayOfAnyType *ReleaseKeyResult)
{
	_ns1__ReleaseKeyResponse *_p = soap_new__ns1__ReleaseKeyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ReleaseKeyResponse::ReleaseKeyResult = ReleaseKeyResult;
	}
	return _p;
}

inline int soap_write__ns1__ReleaseKeyResponse(struct soap *soap, _ns1__ReleaseKeyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReleaseKeyResponse", p->soap_type() == SOAP_TYPE__ns1__ReleaseKeyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ReleaseKeyResponse(struct soap *soap, const char *URL, _ns1__ReleaseKeyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReleaseKeyResponse", p->soap_type() == SOAP_TYPE__ns1__ReleaseKeyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ReleaseKeyResponse(struct soap *soap, const char *URL, _ns1__ReleaseKeyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReleaseKeyResponse", p->soap_type() == SOAP_TYPE__ns1__ReleaseKeyResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ReleaseKeyResponse * SOAP_FMAC4 soap_get__ns1__ReleaseKeyResponse(struct soap*, _ns1__ReleaseKeyResponse *, const char*, const char*);

inline int soap_read__ns1__ReleaseKeyResponse(struct soap *soap, _ns1__ReleaseKeyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ReleaseKeyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ReleaseKeyResponse(struct soap *soap, const char *URL, _ns1__ReleaseKeyResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ReleaseKeyResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ReleaseKeyResponse(struct soap *soap, _ns1__ReleaseKeyResponse *p)
{
	if (soap_read__ns1__ReleaseKeyResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ReleaseKey_DEFINED
#define SOAP_TYPE__ns1__ReleaseKey_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ReleaseKey(struct soap*, const char*, int, const _ns1__ReleaseKey *, const char*);
SOAP_FMAC3 _ns1__ReleaseKey * SOAP_FMAC4 soap_in__ns1__ReleaseKey(struct soap*, const char*, _ns1__ReleaseKey *, const char*);
SOAP_FMAC1 _ns1__ReleaseKey * SOAP_FMAC2 soap_instantiate__ns1__ReleaseKey(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ReleaseKey * soap_new__ns1__ReleaseKey(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ReleaseKey(soap, n, NULL, NULL, NULL);
}

inline _ns1__ReleaseKey * soap_new_req__ns1__ReleaseKey(
	struct soap *soap)
{
	_ns1__ReleaseKey *_p = soap_new__ns1__ReleaseKey(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ReleaseKey * soap_new_set__ns1__ReleaseKey(
	struct soap *soap,
	char *key)
{
	_ns1__ReleaseKey *_p = soap_new__ns1__ReleaseKey(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ReleaseKey::key = key;
	}
	return _p;
}

inline int soap_write__ns1__ReleaseKey(struct soap *soap, _ns1__ReleaseKey const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReleaseKey", p->soap_type() == SOAP_TYPE__ns1__ReleaseKey ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ReleaseKey(struct soap *soap, const char *URL, _ns1__ReleaseKey const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReleaseKey", p->soap_type() == SOAP_TYPE__ns1__ReleaseKey ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ReleaseKey(struct soap *soap, const char *URL, _ns1__ReleaseKey const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReleaseKey", p->soap_type() == SOAP_TYPE__ns1__ReleaseKey ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ReleaseKey * SOAP_FMAC4 soap_get__ns1__ReleaseKey(struct soap*, _ns1__ReleaseKey *, const char*, const char*);

inline int soap_read__ns1__ReleaseKey(struct soap *soap, _ns1__ReleaseKey *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__ReleaseKey(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ReleaseKey(struct soap *soap, const char *URL, _ns1__ReleaseKey *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__ReleaseKey(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ReleaseKey(struct soap *soap, _ns1__ReleaseKey *p)
{
	if (soap_read__ns1__ReleaseKey(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetShaoluKeyResponse_DEFINED
#define SOAP_TYPE__ns1__GetShaoluKeyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetShaoluKeyResponse(struct soap*, const char*, int, const _ns1__GetShaoluKeyResponse *, const char*);
SOAP_FMAC3 _ns1__GetShaoluKeyResponse * SOAP_FMAC4 soap_in__ns1__GetShaoluKeyResponse(struct soap*, const char*, _ns1__GetShaoluKeyResponse *, const char*);
SOAP_FMAC1 _ns1__GetShaoluKeyResponse * SOAP_FMAC2 soap_instantiate__ns1__GetShaoluKeyResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetShaoluKeyResponse * soap_new__ns1__GetShaoluKeyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetShaoluKeyResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetShaoluKeyResponse * soap_new_req__ns1__GetShaoluKeyResponse(
	struct soap *soap)
{
	_ns1__GetShaoluKeyResponse *_p = soap_new__ns1__GetShaoluKeyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetShaoluKeyResponse * soap_new_set__ns1__GetShaoluKeyResponse(
	struct soap *soap,
	ns1__ArrayOfAnyType *GetShaoluKeyResult)
{
	_ns1__GetShaoluKeyResponse *_p = soap_new__ns1__GetShaoluKeyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetShaoluKeyResponse::GetShaoluKeyResult = GetShaoluKeyResult;
	}
	return _p;
}

inline int soap_write__ns1__GetShaoluKeyResponse(struct soap *soap, _ns1__GetShaoluKeyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShaoluKeyResponse", p->soap_type() == SOAP_TYPE__ns1__GetShaoluKeyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetShaoluKeyResponse(struct soap *soap, const char *URL, _ns1__GetShaoluKeyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShaoluKeyResponse", p->soap_type() == SOAP_TYPE__ns1__GetShaoluKeyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetShaoluKeyResponse(struct soap *soap, const char *URL, _ns1__GetShaoluKeyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShaoluKeyResponse", p->soap_type() == SOAP_TYPE__ns1__GetShaoluKeyResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetShaoluKeyResponse * SOAP_FMAC4 soap_get__ns1__GetShaoluKeyResponse(struct soap*, _ns1__GetShaoluKeyResponse *, const char*, const char*);

inline int soap_read__ns1__GetShaoluKeyResponse(struct soap *soap, _ns1__GetShaoluKeyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetShaoluKeyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetShaoluKeyResponse(struct soap *soap, const char *URL, _ns1__GetShaoluKeyResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetShaoluKeyResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetShaoluKeyResponse(struct soap *soap, _ns1__GetShaoluKeyResponse *p)
{
	if (soap_read__ns1__GetShaoluKeyResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetShaoluKey_DEFINED
#define SOAP_TYPE__ns1__GetShaoluKey_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetShaoluKey(struct soap*, const char*, int, const _ns1__GetShaoluKey *, const char*);
SOAP_FMAC3 _ns1__GetShaoluKey * SOAP_FMAC4 soap_in__ns1__GetShaoluKey(struct soap*, const char*, _ns1__GetShaoluKey *, const char*);
SOAP_FMAC1 _ns1__GetShaoluKey * SOAP_FMAC2 soap_instantiate__ns1__GetShaoluKey(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetShaoluKey * soap_new__ns1__GetShaoluKey(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetShaoluKey(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetShaoluKey * soap_new_req__ns1__GetShaoluKey(
	struct soap *soap)
{
	_ns1__GetShaoluKey *_p = soap_new__ns1__GetShaoluKey(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetShaoluKey * soap_new_set__ns1__GetShaoluKey(
	struct soap *soap,
	char *customer,
	char *ssn)
{
	_ns1__GetShaoluKey *_p = soap_new__ns1__GetShaoluKey(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetShaoluKey::customer = customer;
		_p->_ns1__GetShaoluKey::ssn = ssn;
	}
	return _p;
}

inline int soap_write__ns1__GetShaoluKey(struct soap *soap, _ns1__GetShaoluKey const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShaoluKey", p->soap_type() == SOAP_TYPE__ns1__GetShaoluKey ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetShaoluKey(struct soap *soap, const char *URL, _ns1__GetShaoluKey const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShaoluKey", p->soap_type() == SOAP_TYPE__ns1__GetShaoluKey ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetShaoluKey(struct soap *soap, const char *URL, _ns1__GetShaoluKey const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetShaoluKey", p->soap_type() == SOAP_TYPE__ns1__GetShaoluKey ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetShaoluKey * SOAP_FMAC4 soap_get__ns1__GetShaoluKey(struct soap*, _ns1__GetShaoluKey *, const char*, const char*);

inline int soap_read__ns1__GetShaoluKey(struct soap *soap, _ns1__GetShaoluKey *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetShaoluKey(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetShaoluKey(struct soap *soap, const char *URL, _ns1__GetShaoluKey *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetShaoluKey(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetShaoluKey(struct soap *soap, _ns1__GetShaoluKey *p)
{
	if (soap_read__ns1__GetShaoluKey(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__PCBData_USCOREUploadResponse_DEFINED
#define SOAP_TYPE__ns1__PCBData_USCOREUploadResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__PCBData_USCOREUploadResponse(struct soap*, const char*, int, const _ns1__PCBData_USCOREUploadResponse *, const char*);
SOAP_FMAC3 _ns1__PCBData_USCOREUploadResponse * SOAP_FMAC4 soap_in__ns1__PCBData_USCOREUploadResponse(struct soap*, const char*, _ns1__PCBData_USCOREUploadResponse *, const char*);
SOAP_FMAC1 _ns1__PCBData_USCOREUploadResponse * SOAP_FMAC2 soap_instantiate__ns1__PCBData_USCOREUploadResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__PCBData_USCOREUploadResponse * soap_new__ns1__PCBData_USCOREUploadResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__PCBData_USCOREUploadResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__PCBData_USCOREUploadResponse * soap_new_req__ns1__PCBData_USCOREUploadResponse(
	struct soap *soap)
{
	_ns1__PCBData_USCOREUploadResponse *_p = soap_new__ns1__PCBData_USCOREUploadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__PCBData_USCOREUploadResponse * soap_new_set__ns1__PCBData_USCOREUploadResponse(
	struct soap *soap,
	ns1__ArrayOfAnyType *PCBData_USCOREUploadResult)
{
	_ns1__PCBData_USCOREUploadResponse *_p = soap_new__ns1__PCBData_USCOREUploadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__PCBData_USCOREUploadResponse::PCBData_USCOREUploadResult = PCBData_USCOREUploadResult;
	}
	return _p;
}

inline int soap_write__ns1__PCBData_USCOREUploadResponse(struct soap *soap, _ns1__PCBData_USCOREUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PCBData_UploadResponse", p->soap_type() == SOAP_TYPE__ns1__PCBData_USCOREUploadResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__PCBData_USCOREUploadResponse(struct soap *soap, const char *URL, _ns1__PCBData_USCOREUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PCBData_UploadResponse", p->soap_type() == SOAP_TYPE__ns1__PCBData_USCOREUploadResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__PCBData_USCOREUploadResponse(struct soap *soap, const char *URL, _ns1__PCBData_USCOREUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PCBData_UploadResponse", p->soap_type() == SOAP_TYPE__ns1__PCBData_USCOREUploadResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__PCBData_USCOREUploadResponse * SOAP_FMAC4 soap_get__ns1__PCBData_USCOREUploadResponse(struct soap*, _ns1__PCBData_USCOREUploadResponse *, const char*, const char*);

inline int soap_read__ns1__PCBData_USCOREUploadResponse(struct soap *soap, _ns1__PCBData_USCOREUploadResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__PCBData_USCOREUploadResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__PCBData_USCOREUploadResponse(struct soap *soap, const char *URL, _ns1__PCBData_USCOREUploadResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__PCBData_USCOREUploadResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__PCBData_USCOREUploadResponse(struct soap *soap, _ns1__PCBData_USCOREUploadResponse *p)
{
	if (soap_read__ns1__PCBData_USCOREUploadResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__PCBData_USCOREUpload_DEFINED
#define SOAP_TYPE__ns1__PCBData_USCOREUpload_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__PCBData_USCOREUpload(struct soap*, const char*, int, const _ns1__PCBData_USCOREUpload *, const char*);
SOAP_FMAC3 _ns1__PCBData_USCOREUpload * SOAP_FMAC4 soap_in__ns1__PCBData_USCOREUpload(struct soap*, const char*, _ns1__PCBData_USCOREUpload *, const char*);
SOAP_FMAC1 _ns1__PCBData_USCOREUpload * SOAP_FMAC2 soap_instantiate__ns1__PCBData_USCOREUpload(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__PCBData_USCOREUpload * soap_new__ns1__PCBData_USCOREUpload(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__PCBData_USCOREUpload(soap, n, NULL, NULL, NULL);
}

inline _ns1__PCBData_USCOREUpload * soap_new_req__ns1__PCBData_USCOREUpload(
	struct soap *soap)
{
	_ns1__PCBData_USCOREUpload *_p = soap_new__ns1__PCBData_USCOREUpload(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__PCBData_USCOREUpload * soap_new_set__ns1__PCBData_USCOREUpload(
	struct soap *soap,
	char *partno,
	char *FTdata,
	char *version,
	char *PCBsn,
	char *cpu,
	char *flash,
	char *rom,
	char *wifi,
	char *bt)
{
	_ns1__PCBData_USCOREUpload *_p = soap_new__ns1__PCBData_USCOREUpload(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__PCBData_USCOREUpload::partno = partno;
		_p->_ns1__PCBData_USCOREUpload::FTdata = FTdata;
		_p->_ns1__PCBData_USCOREUpload::version = version;
		_p->_ns1__PCBData_USCOREUpload::PCBsn = PCBsn;
		_p->_ns1__PCBData_USCOREUpload::cpu = cpu;
		_p->_ns1__PCBData_USCOREUpload::flash = flash;
		_p->_ns1__PCBData_USCOREUpload::rom = rom;
		_p->_ns1__PCBData_USCOREUpload::wifi = wifi;
		_p->_ns1__PCBData_USCOREUpload::bt = bt;
	}
	return _p;
}

inline int soap_write__ns1__PCBData_USCOREUpload(struct soap *soap, _ns1__PCBData_USCOREUpload const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PCBData_Upload", p->soap_type() == SOAP_TYPE__ns1__PCBData_USCOREUpload ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__PCBData_USCOREUpload(struct soap *soap, const char *URL, _ns1__PCBData_USCOREUpload const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PCBData_Upload", p->soap_type() == SOAP_TYPE__ns1__PCBData_USCOREUpload ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__PCBData_USCOREUpload(struct soap *soap, const char *URL, _ns1__PCBData_USCOREUpload const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PCBData_Upload", p->soap_type() == SOAP_TYPE__ns1__PCBData_USCOREUpload ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__PCBData_USCOREUpload * SOAP_FMAC4 soap_get__ns1__PCBData_USCOREUpload(struct soap*, _ns1__PCBData_USCOREUpload *, const char*, const char*);

inline int soap_read__ns1__PCBData_USCOREUpload(struct soap *soap, _ns1__PCBData_USCOREUpload *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__PCBData_USCOREUpload(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__PCBData_USCOREUpload(struct soap *soap, const char *URL, _ns1__PCBData_USCOREUpload *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__PCBData_USCOREUpload(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__PCBData_USCOREUpload(struct soap *soap, _ns1__PCBData_USCOREUpload *p)
{
	if (soap_read__ns1__PCBData_USCOREUpload(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CartonWeight_USCOREUploadResponse_DEFINED
#define SOAP_TYPE__ns1__CartonWeight_USCOREUploadResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CartonWeight_USCOREUploadResponse(struct soap*, const char*, int, const _ns1__CartonWeight_USCOREUploadResponse *, const char*);
SOAP_FMAC3 _ns1__CartonWeight_USCOREUploadResponse * SOAP_FMAC4 soap_in__ns1__CartonWeight_USCOREUploadResponse(struct soap*, const char*, _ns1__CartonWeight_USCOREUploadResponse *, const char*);
SOAP_FMAC1 _ns1__CartonWeight_USCOREUploadResponse * SOAP_FMAC2 soap_instantiate__ns1__CartonWeight_USCOREUploadResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CartonWeight_USCOREUploadResponse * soap_new__ns1__CartonWeight_USCOREUploadResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CartonWeight_USCOREUploadResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CartonWeight_USCOREUploadResponse * soap_new_req__ns1__CartonWeight_USCOREUploadResponse(
	struct soap *soap)
{
	_ns1__CartonWeight_USCOREUploadResponse *_p = soap_new__ns1__CartonWeight_USCOREUploadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CartonWeight_USCOREUploadResponse * soap_new_set__ns1__CartonWeight_USCOREUploadResponse(
	struct soap *soap,
	ns1__ArrayOfAnyType *CartonWeight_USCOREUploadResult)
{
	_ns1__CartonWeight_USCOREUploadResponse *_p = soap_new__ns1__CartonWeight_USCOREUploadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CartonWeight_USCOREUploadResponse::CartonWeight_USCOREUploadResult = CartonWeight_USCOREUploadResult;
	}
	return _p;
}

inline int soap_write__ns1__CartonWeight_USCOREUploadResponse(struct soap *soap, _ns1__CartonWeight_USCOREUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CartonWeight_UploadResponse", p->soap_type() == SOAP_TYPE__ns1__CartonWeight_USCOREUploadResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CartonWeight_USCOREUploadResponse(struct soap *soap, const char *URL, _ns1__CartonWeight_USCOREUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CartonWeight_UploadResponse", p->soap_type() == SOAP_TYPE__ns1__CartonWeight_USCOREUploadResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CartonWeight_USCOREUploadResponse(struct soap *soap, const char *URL, _ns1__CartonWeight_USCOREUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CartonWeight_UploadResponse", p->soap_type() == SOAP_TYPE__ns1__CartonWeight_USCOREUploadResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CartonWeight_USCOREUploadResponse * SOAP_FMAC4 soap_get__ns1__CartonWeight_USCOREUploadResponse(struct soap*, _ns1__CartonWeight_USCOREUploadResponse *, const char*, const char*);

inline int soap_read__ns1__CartonWeight_USCOREUploadResponse(struct soap *soap, _ns1__CartonWeight_USCOREUploadResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CartonWeight_USCOREUploadResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CartonWeight_USCOREUploadResponse(struct soap *soap, const char *URL, _ns1__CartonWeight_USCOREUploadResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CartonWeight_USCOREUploadResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CartonWeight_USCOREUploadResponse(struct soap *soap, _ns1__CartonWeight_USCOREUploadResponse *p)
{
	if (soap_read__ns1__CartonWeight_USCOREUploadResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CartonWeight_USCOREUpload_DEFINED
#define SOAP_TYPE__ns1__CartonWeight_USCOREUpload_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CartonWeight_USCOREUpload(struct soap*, const char*, int, const _ns1__CartonWeight_USCOREUpload *, const char*);
SOAP_FMAC3 _ns1__CartonWeight_USCOREUpload * SOAP_FMAC4 soap_in__ns1__CartonWeight_USCOREUpload(struct soap*, const char*, _ns1__CartonWeight_USCOREUpload *, const char*);
SOAP_FMAC1 _ns1__CartonWeight_USCOREUpload * SOAP_FMAC2 soap_instantiate__ns1__CartonWeight_USCOREUpload(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CartonWeight_USCOREUpload * soap_new__ns1__CartonWeight_USCOREUpload(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CartonWeight_USCOREUpload(soap, n, NULL, NULL, NULL);
}

inline _ns1__CartonWeight_USCOREUpload * soap_new_req__ns1__CartonWeight_USCOREUpload(
	struct soap *soap,
	float weight,
	bool ismore)
{
	_ns1__CartonWeight_USCOREUpload *_p = soap_new__ns1__CartonWeight_USCOREUpload(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CartonWeight_USCOREUpload::weight = weight;
		_p->_ns1__CartonWeight_USCOREUpload::ismore = ismore;
	}
	return _p;
}

inline _ns1__CartonWeight_USCOREUpload * soap_new_set__ns1__CartonWeight_USCOREUpload(
	struct soap *soap,
	char *strSN,
	float weight,
	bool ismore,
	char *editby)
{
	_ns1__CartonWeight_USCOREUpload *_p = soap_new__ns1__CartonWeight_USCOREUpload(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CartonWeight_USCOREUpload::strSN = strSN;
		_p->_ns1__CartonWeight_USCOREUpload::weight = weight;
		_p->_ns1__CartonWeight_USCOREUpload::ismore = ismore;
		_p->_ns1__CartonWeight_USCOREUpload::editby = editby;
	}
	return _p;
}

inline int soap_write__ns1__CartonWeight_USCOREUpload(struct soap *soap, _ns1__CartonWeight_USCOREUpload const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CartonWeight_Upload", p->soap_type() == SOAP_TYPE__ns1__CartonWeight_USCOREUpload ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CartonWeight_USCOREUpload(struct soap *soap, const char *URL, _ns1__CartonWeight_USCOREUpload const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CartonWeight_Upload", p->soap_type() == SOAP_TYPE__ns1__CartonWeight_USCOREUpload ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CartonWeight_USCOREUpload(struct soap *soap, const char *URL, _ns1__CartonWeight_USCOREUpload const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CartonWeight_Upload", p->soap_type() == SOAP_TYPE__ns1__CartonWeight_USCOREUpload ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CartonWeight_USCOREUpload * SOAP_FMAC4 soap_get__ns1__CartonWeight_USCOREUpload(struct soap*, _ns1__CartonWeight_USCOREUpload *, const char*, const char*);

inline int soap_read__ns1__CartonWeight_USCOREUpload(struct soap *soap, _ns1__CartonWeight_USCOREUpload *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CartonWeight_USCOREUpload(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CartonWeight_USCOREUpload(struct soap *soap, const char *URL, _ns1__CartonWeight_USCOREUpload *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CartonWeight_USCOREUpload(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CartonWeight_USCOREUpload(struct soap *soap, _ns1__CartonWeight_USCOREUpload *p)
{
	if (soap_read__ns1__CartonWeight_USCOREUpload(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetMacBySnResponse_DEFINED
#define SOAP_TYPE__ns1__GetMacBySnResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMacBySnResponse(struct soap*, const char*, int, const _ns1__GetMacBySnResponse *, const char*);
SOAP_FMAC3 _ns1__GetMacBySnResponse * SOAP_FMAC4 soap_in__ns1__GetMacBySnResponse(struct soap*, const char*, _ns1__GetMacBySnResponse *, const char*);
SOAP_FMAC1 _ns1__GetMacBySnResponse * SOAP_FMAC2 soap_instantiate__ns1__GetMacBySnResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetMacBySnResponse * soap_new__ns1__GetMacBySnResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetMacBySnResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetMacBySnResponse * soap_new_req__ns1__GetMacBySnResponse(
	struct soap *soap)
{
	_ns1__GetMacBySnResponse *_p = soap_new__ns1__GetMacBySnResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetMacBySnResponse * soap_new_set__ns1__GetMacBySnResponse(
	struct soap *soap,
	ns1__ArrayOfAnyType *GetMacBySnResult)
{
	_ns1__GetMacBySnResponse *_p = soap_new__ns1__GetMacBySnResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetMacBySnResponse::GetMacBySnResult = GetMacBySnResult;
	}
	return _p;
}

inline int soap_write__ns1__GetMacBySnResponse(struct soap *soap, _ns1__GetMacBySnResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMacBySnResponse", p->soap_type() == SOAP_TYPE__ns1__GetMacBySnResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetMacBySnResponse(struct soap *soap, const char *URL, _ns1__GetMacBySnResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMacBySnResponse", p->soap_type() == SOAP_TYPE__ns1__GetMacBySnResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetMacBySnResponse(struct soap *soap, const char *URL, _ns1__GetMacBySnResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMacBySnResponse", p->soap_type() == SOAP_TYPE__ns1__GetMacBySnResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetMacBySnResponse * SOAP_FMAC4 soap_get__ns1__GetMacBySnResponse(struct soap*, _ns1__GetMacBySnResponse *, const char*, const char*);

inline int soap_read__ns1__GetMacBySnResponse(struct soap *soap, _ns1__GetMacBySnResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetMacBySnResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetMacBySnResponse(struct soap *soap, const char *URL, _ns1__GetMacBySnResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetMacBySnResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetMacBySnResponse(struct soap *soap, _ns1__GetMacBySnResponse *p)
{
	if (soap_read__ns1__GetMacBySnResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetMacBySn_DEFINED
#define SOAP_TYPE__ns1__GetMacBySn_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMacBySn(struct soap*, const char*, int, const _ns1__GetMacBySn *, const char*);
SOAP_FMAC3 _ns1__GetMacBySn * SOAP_FMAC4 soap_in__ns1__GetMacBySn(struct soap*, const char*, _ns1__GetMacBySn *, const char*);
SOAP_FMAC1 _ns1__GetMacBySn * SOAP_FMAC2 soap_instantiate__ns1__GetMacBySn(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetMacBySn * soap_new__ns1__GetMacBySn(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetMacBySn(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetMacBySn * soap_new_req__ns1__GetMacBySn(
	struct soap *soap)
{
	_ns1__GetMacBySn *_p = soap_new__ns1__GetMacBySn(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetMacBySn * soap_new_set__ns1__GetMacBySn(
	struct soap *soap,
	char *strSN)
{
	_ns1__GetMacBySn *_p = soap_new__ns1__GetMacBySn(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetMacBySn::strSN = strSN;
	}
	return _p;
}

inline int soap_write__ns1__GetMacBySn(struct soap *soap, _ns1__GetMacBySn const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMacBySn", p->soap_type() == SOAP_TYPE__ns1__GetMacBySn ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetMacBySn(struct soap *soap, const char *URL, _ns1__GetMacBySn const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMacBySn", p->soap_type() == SOAP_TYPE__ns1__GetMacBySn ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetMacBySn(struct soap *soap, const char *URL, _ns1__GetMacBySn const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetMacBySn", p->soap_type() == SOAP_TYPE__ns1__GetMacBySn ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetMacBySn * SOAP_FMAC4 soap_get__ns1__GetMacBySn(struct soap*, _ns1__GetMacBySn *, const char*, const char*);

inline int soap_read__ns1__GetMacBySn(struct soap *soap, _ns1__GetMacBySn *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetMacBySn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetMacBySn(struct soap *soap, const char *URL, _ns1__GetMacBySn *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GetMacBySn(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetMacBySn(struct soap *soap, _ns1__GetMacBySn *p)
{
	if (soap_read__ns1__GetMacBySn(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GETMACIDResponse_DEFINED
#define SOAP_TYPE__ns1__GETMACIDResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GETMACIDResponse(struct soap*, const char*, int, const _ns1__GETMACIDResponse *, const char*);
SOAP_FMAC3 _ns1__GETMACIDResponse * SOAP_FMAC4 soap_in__ns1__GETMACIDResponse(struct soap*, const char*, _ns1__GETMACIDResponse *, const char*);
SOAP_FMAC1 _ns1__GETMACIDResponse * SOAP_FMAC2 soap_instantiate__ns1__GETMACIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GETMACIDResponse * soap_new__ns1__GETMACIDResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GETMACIDResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GETMACIDResponse * soap_new_req__ns1__GETMACIDResponse(
	struct soap *soap)
{
	_ns1__GETMACIDResponse *_p = soap_new__ns1__GETMACIDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GETMACIDResponse * soap_new_set__ns1__GETMACIDResponse(
	struct soap *soap,
	_ns1__GETMACIDResponse_GETMACIDResult *GETMACIDResult)
{
	_ns1__GETMACIDResponse *_p = soap_new__ns1__GETMACIDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GETMACIDResponse::GETMACIDResult = GETMACIDResult;
	}
	return _p;
}

inline int soap_write__ns1__GETMACIDResponse(struct soap *soap, _ns1__GETMACIDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GETMACIDResponse", p->soap_type() == SOAP_TYPE__ns1__GETMACIDResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GETMACIDResponse(struct soap *soap, const char *URL, _ns1__GETMACIDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GETMACIDResponse", p->soap_type() == SOAP_TYPE__ns1__GETMACIDResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GETMACIDResponse(struct soap *soap, const char *URL, _ns1__GETMACIDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GETMACIDResponse", p->soap_type() == SOAP_TYPE__ns1__GETMACIDResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GETMACIDResponse * SOAP_FMAC4 soap_get__ns1__GETMACIDResponse(struct soap*, _ns1__GETMACIDResponse *, const char*, const char*);

inline int soap_read__ns1__GETMACIDResponse(struct soap *soap, _ns1__GETMACIDResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GETMACIDResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GETMACIDResponse(struct soap *soap, const char *URL, _ns1__GETMACIDResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GETMACIDResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GETMACIDResponse(struct soap *soap, _ns1__GETMACIDResponse *p)
{
	if (soap_read__ns1__GETMACIDResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GETMACID_DEFINED
#define SOAP_TYPE__ns1__GETMACID_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GETMACID(struct soap*, const char*, int, const _ns1__GETMACID *, const char*);
SOAP_FMAC3 _ns1__GETMACID * SOAP_FMAC4 soap_in__ns1__GETMACID(struct soap*, const char*, _ns1__GETMACID *, const char*);
SOAP_FMAC1 _ns1__GETMACID * SOAP_FMAC2 soap_instantiate__ns1__GETMACID(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GETMACID * soap_new__ns1__GETMACID(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GETMACID(soap, n, NULL, NULL, NULL);
}

inline _ns1__GETMACID * soap_new_req__ns1__GETMACID(
	struct soap *soap)
{
	_ns1__GETMACID *_p = soap_new__ns1__GETMACID(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GETMACID * soap_new_set__ns1__GETMACID(
	struct soap *soap,
	char *strSN)
{
	_ns1__GETMACID *_p = soap_new__ns1__GETMACID(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GETMACID::strSN = strSN;
	}
	return _p;
}

inline int soap_write__ns1__GETMACID(struct soap *soap, _ns1__GETMACID const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GETMACID", p->soap_type() == SOAP_TYPE__ns1__GETMACID ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GETMACID(struct soap *soap, const char *URL, _ns1__GETMACID const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GETMACID", p->soap_type() == SOAP_TYPE__ns1__GETMACID ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GETMACID(struct soap *soap, const char *URL, _ns1__GETMACID const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GETMACID", p->soap_type() == SOAP_TYPE__ns1__GETMACID ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GETMACID * SOAP_FMAC4 soap_get__ns1__GETMACID(struct soap*, _ns1__GETMACID *, const char*, const char*);

inline int soap_read__ns1__GETMACID(struct soap *soap, _ns1__GETMACID *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GETMACID(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GETMACID(struct soap *soap, const char *URL, _ns1__GETMACID *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__GETMACID(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GETMACID(struct soap *soap, _ns1__GETMACID *p)
{
	if (soap_read__ns1__GETMACID(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__testResponse_DEFINED
#define SOAP_TYPE__ns1__testResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__testResponse(struct soap*, const char*, int, const _ns1__testResponse *, const char*);
SOAP_FMAC3 _ns1__testResponse * SOAP_FMAC4 soap_in__ns1__testResponse(struct soap*, const char*, _ns1__testResponse *, const char*);
SOAP_FMAC1 _ns1__testResponse * SOAP_FMAC2 soap_instantiate__ns1__testResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__testResponse * soap_new__ns1__testResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__testResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__testResponse * soap_new_req__ns1__testResponse(
	struct soap *soap)
{
	_ns1__testResponse *_p = soap_new__ns1__testResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__testResponse * soap_new_set__ns1__testResponse(
	struct soap *soap,
	ns1__ArrayOfAnyType *testResult)
{
	_ns1__testResponse *_p = soap_new__ns1__testResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__testResponse::testResult = testResult;
	}
	return _p;
}

inline int soap_write__ns1__testResponse(struct soap *soap, _ns1__testResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:testResponse", p->soap_type() == SOAP_TYPE__ns1__testResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__testResponse(struct soap *soap, const char *URL, _ns1__testResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:testResponse", p->soap_type() == SOAP_TYPE__ns1__testResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__testResponse(struct soap *soap, const char *URL, _ns1__testResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:testResponse", p->soap_type() == SOAP_TYPE__ns1__testResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__testResponse * SOAP_FMAC4 soap_get__ns1__testResponse(struct soap*, _ns1__testResponse *, const char*, const char*);

inline int soap_read__ns1__testResponse(struct soap *soap, _ns1__testResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__testResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__testResponse(struct soap *soap, const char *URL, _ns1__testResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__testResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__testResponse(struct soap *soap, _ns1__testResponse *p)
{
	if (soap_read__ns1__testResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__test_DEFINED
#define SOAP_TYPE__ns1__test_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__test(struct soap*, const char*, int, const _ns1__test *, const char*);
SOAP_FMAC3 _ns1__test * SOAP_FMAC4 soap_in__ns1__test(struct soap*, const char*, _ns1__test *, const char*);
SOAP_FMAC1 _ns1__test * SOAP_FMAC2 soap_instantiate__ns1__test(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__test * soap_new__ns1__test(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__test(soap, n, NULL, NULL, NULL);
}

inline _ns1__test * soap_new_req__ns1__test(
	struct soap *soap)
{
	_ns1__test *_p = soap_new__ns1__test(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__test * soap_new_set__ns1__test(
	struct soap *soap,
	char *strSN,
	char *aa)
{
	_ns1__test *_p = soap_new__ns1__test(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__test::strSN = strSN;
		_p->_ns1__test::aa = aa;
	}
	return _p;
}

inline int soap_write__ns1__test(struct soap *soap, _ns1__test const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:test", p->soap_type() == SOAP_TYPE__ns1__test ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__test(struct soap *soap, const char *URL, _ns1__test const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:test", p->soap_type() == SOAP_TYPE__ns1__test ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__test(struct soap *soap, const char *URL, _ns1__test const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:test", p->soap_type() == SOAP_TYPE__ns1__test ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__test * SOAP_FMAC4 soap_get__ns1__test(struct soap*, _ns1__test *, const char*, const char*);

inline int soap_read__ns1__test(struct soap *soap, _ns1__test *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__test(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__test(struct soap *soap, const char *URL, _ns1__test *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__test(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__test(struct soap *soap, _ns1__test *p)
{
	if (soap_read__ns1__test(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SaveSSN_USCORENEWResponse_DEFINED
#define SOAP_TYPE__ns1__SaveSSN_USCORENEWResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SaveSSN_USCORENEWResponse(struct soap*, const char*, int, const _ns1__SaveSSN_USCORENEWResponse *, const char*);
SOAP_FMAC3 _ns1__SaveSSN_USCORENEWResponse * SOAP_FMAC4 soap_in__ns1__SaveSSN_USCORENEWResponse(struct soap*, const char*, _ns1__SaveSSN_USCORENEWResponse *, const char*);
SOAP_FMAC1 _ns1__SaveSSN_USCORENEWResponse * SOAP_FMAC2 soap_instantiate__ns1__SaveSSN_USCORENEWResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SaveSSN_USCORENEWResponse * soap_new__ns1__SaveSSN_USCORENEWResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SaveSSN_USCORENEWResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SaveSSN_USCORENEWResponse * soap_new_req__ns1__SaveSSN_USCORENEWResponse(
	struct soap *soap)
{
	_ns1__SaveSSN_USCORENEWResponse *_p = soap_new__ns1__SaveSSN_USCORENEWResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SaveSSN_USCORENEWResponse * soap_new_set__ns1__SaveSSN_USCORENEWResponse(
	struct soap *soap,
	ns1__ArrayOfAnyType *SaveSSN_USCORENEWResult)
{
	_ns1__SaveSSN_USCORENEWResponse *_p = soap_new__ns1__SaveSSN_USCORENEWResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SaveSSN_USCORENEWResponse::SaveSSN_USCORENEWResult = SaveSSN_USCORENEWResult;
	}
	return _p;
}

inline int soap_write__ns1__SaveSSN_USCORENEWResponse(struct soap *soap, _ns1__SaveSSN_USCORENEWResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SaveSSN_NEWResponse", p->soap_type() == SOAP_TYPE__ns1__SaveSSN_USCORENEWResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SaveSSN_USCORENEWResponse(struct soap *soap, const char *URL, _ns1__SaveSSN_USCORENEWResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SaveSSN_NEWResponse", p->soap_type() == SOAP_TYPE__ns1__SaveSSN_USCORENEWResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SaveSSN_USCORENEWResponse(struct soap *soap, const char *URL, _ns1__SaveSSN_USCORENEWResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SaveSSN_NEWResponse", p->soap_type() == SOAP_TYPE__ns1__SaveSSN_USCORENEWResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SaveSSN_USCORENEWResponse * SOAP_FMAC4 soap_get__ns1__SaveSSN_USCORENEWResponse(struct soap*, _ns1__SaveSSN_USCORENEWResponse *, const char*, const char*);

inline int soap_read__ns1__SaveSSN_USCORENEWResponse(struct soap *soap, _ns1__SaveSSN_USCORENEWResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SaveSSN_USCORENEWResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SaveSSN_USCORENEWResponse(struct soap *soap, const char *URL, _ns1__SaveSSN_USCORENEWResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SaveSSN_USCORENEWResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SaveSSN_USCORENEWResponse(struct soap *soap, _ns1__SaveSSN_USCORENEWResponse *p)
{
	if (soap_read__ns1__SaveSSN_USCORENEWResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SaveSSN_USCORENEW_DEFINED
#define SOAP_TYPE__ns1__SaveSSN_USCORENEW_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SaveSSN_USCORENEW(struct soap*, const char*, int, const _ns1__SaveSSN_USCORENEW *, const char*);
SOAP_FMAC3 _ns1__SaveSSN_USCORENEW * SOAP_FMAC4 soap_in__ns1__SaveSSN_USCORENEW(struct soap*, const char*, _ns1__SaveSSN_USCORENEW *, const char*);
SOAP_FMAC1 _ns1__SaveSSN_USCORENEW * SOAP_FMAC2 soap_instantiate__ns1__SaveSSN_USCORENEW(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SaveSSN_USCORENEW * soap_new__ns1__SaveSSN_USCORENEW(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SaveSSN_USCORENEW(soap, n, NULL, NULL, NULL);
}

inline _ns1__SaveSSN_USCORENEW * soap_new_req__ns1__SaveSSN_USCORENEW(
	struct soap *soap)
{
	_ns1__SaveSSN_USCORENEW *_p = soap_new__ns1__SaveSSN_USCORENEW(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SaveSSN_USCORENEW * soap_new_set__ns1__SaveSSN_USCORENEW(
	struct soap *soap,
	char *strSSN,
	char *strEventPoint,
	char *strIspass,
	char *strFailcode,
	char *strScanner)
{
	_ns1__SaveSSN_USCORENEW *_p = soap_new__ns1__SaveSSN_USCORENEW(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SaveSSN_USCORENEW::strSSN = strSSN;
		_p->_ns1__SaveSSN_USCORENEW::strEventPoint = strEventPoint;
		_p->_ns1__SaveSSN_USCORENEW::strIspass = strIspass;
		_p->_ns1__SaveSSN_USCORENEW::strFailcode = strFailcode;
		_p->_ns1__SaveSSN_USCORENEW::strScanner = strScanner;
	}
	return _p;
}

inline int soap_write__ns1__SaveSSN_USCORENEW(struct soap *soap, _ns1__SaveSSN_USCORENEW const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SaveSSN_NEW", p->soap_type() == SOAP_TYPE__ns1__SaveSSN_USCORENEW ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SaveSSN_USCORENEW(struct soap *soap, const char *URL, _ns1__SaveSSN_USCORENEW const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SaveSSN_NEW", p->soap_type() == SOAP_TYPE__ns1__SaveSSN_USCORENEW ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SaveSSN_USCORENEW(struct soap *soap, const char *URL, _ns1__SaveSSN_USCORENEW const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SaveSSN_NEW", p->soap_type() == SOAP_TYPE__ns1__SaveSSN_USCORENEW ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SaveSSN_USCORENEW * SOAP_FMAC4 soap_get__ns1__SaveSSN_USCORENEW(struct soap*, _ns1__SaveSSN_USCORENEW *, const char*, const char*);

inline int soap_read__ns1__SaveSSN_USCORENEW(struct soap *soap, _ns1__SaveSSN_USCORENEW *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SaveSSN_USCORENEW(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SaveSSN_USCORENEW(struct soap *soap, const char *URL, _ns1__SaveSSN_USCORENEW *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SaveSSN_USCORENEW(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SaveSSN_USCORENEW(struct soap *soap, _ns1__SaveSSN_USCORENEW *p)
{
	if (soap_read__ns1__SaveSSN_USCORENEW(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SfcTestResult_USCOREUploadResponse_DEFINED
#define SOAP_TYPE__ns1__SfcTestResult_USCOREUploadResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SfcTestResult_USCOREUploadResponse(struct soap*, const char*, int, const _ns1__SfcTestResult_USCOREUploadResponse *, const char*);
SOAP_FMAC3 _ns1__SfcTestResult_USCOREUploadResponse * SOAP_FMAC4 soap_in__ns1__SfcTestResult_USCOREUploadResponse(struct soap*, const char*, _ns1__SfcTestResult_USCOREUploadResponse *, const char*);
SOAP_FMAC1 _ns1__SfcTestResult_USCOREUploadResponse * SOAP_FMAC2 soap_instantiate__ns1__SfcTestResult_USCOREUploadResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SfcTestResult_USCOREUploadResponse * soap_new__ns1__SfcTestResult_USCOREUploadResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SfcTestResult_USCOREUploadResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SfcTestResult_USCOREUploadResponse * soap_new_req__ns1__SfcTestResult_USCOREUploadResponse(
	struct soap *soap)
{
	_ns1__SfcTestResult_USCOREUploadResponse *_p = soap_new__ns1__SfcTestResult_USCOREUploadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SfcTestResult_USCOREUploadResponse * soap_new_set__ns1__SfcTestResult_USCOREUploadResponse(
	struct soap *soap,
	ns1__ArrayOfAnyType *SfcTestResult_USCOREUploadResult)
{
	_ns1__SfcTestResult_USCOREUploadResponse *_p = soap_new__ns1__SfcTestResult_USCOREUploadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SfcTestResult_USCOREUploadResponse::SfcTestResult_USCOREUploadResult = SfcTestResult_USCOREUploadResult;
	}
	return _p;
}

inline int soap_write__ns1__SfcTestResult_USCOREUploadResponse(struct soap *soap, _ns1__SfcTestResult_USCOREUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SfcTestResult_UploadResponse", p->soap_type() == SOAP_TYPE__ns1__SfcTestResult_USCOREUploadResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SfcTestResult_USCOREUploadResponse(struct soap *soap, const char *URL, _ns1__SfcTestResult_USCOREUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SfcTestResult_UploadResponse", p->soap_type() == SOAP_TYPE__ns1__SfcTestResult_USCOREUploadResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SfcTestResult_USCOREUploadResponse(struct soap *soap, const char *URL, _ns1__SfcTestResult_USCOREUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SfcTestResult_UploadResponse", p->soap_type() == SOAP_TYPE__ns1__SfcTestResult_USCOREUploadResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SfcTestResult_USCOREUploadResponse * SOAP_FMAC4 soap_get__ns1__SfcTestResult_USCOREUploadResponse(struct soap*, _ns1__SfcTestResult_USCOREUploadResponse *, const char*, const char*);

inline int soap_read__ns1__SfcTestResult_USCOREUploadResponse(struct soap *soap, _ns1__SfcTestResult_USCOREUploadResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SfcTestResult_USCOREUploadResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SfcTestResult_USCOREUploadResponse(struct soap *soap, const char *URL, _ns1__SfcTestResult_USCOREUploadResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SfcTestResult_USCOREUploadResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SfcTestResult_USCOREUploadResponse(struct soap *soap, _ns1__SfcTestResult_USCOREUploadResponse *p)
{
	if (soap_read__ns1__SfcTestResult_USCOREUploadResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SfcTestResult_USCOREUpload_DEFINED
#define SOAP_TYPE__ns1__SfcTestResult_USCOREUpload_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SfcTestResult_USCOREUpload(struct soap*, const char*, int, const _ns1__SfcTestResult_USCOREUpload *, const char*);
SOAP_FMAC3 _ns1__SfcTestResult_USCOREUpload * SOAP_FMAC4 soap_in__ns1__SfcTestResult_USCOREUpload(struct soap*, const char*, _ns1__SfcTestResult_USCOREUpload *, const char*);
SOAP_FMAC1 _ns1__SfcTestResult_USCOREUpload * SOAP_FMAC2 soap_instantiate__ns1__SfcTestResult_USCOREUpload(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SfcTestResult_USCOREUpload * soap_new__ns1__SfcTestResult_USCOREUpload(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SfcTestResult_USCOREUpload(soap, n, NULL, NULL, NULL);
}

inline _ns1__SfcTestResult_USCOREUpload * soap_new_req__ns1__SfcTestResult_USCOREUpload(
	struct soap *soap,
	time_t testtime)
{
	_ns1__SfcTestResult_USCOREUpload *_p = soap_new__ns1__SfcTestResult_USCOREUpload(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SfcTestResult_USCOREUpload::testtime = testtime;
	}
	return _p;
}

inline _ns1__SfcTestResult_USCOREUpload * soap_new_set__ns1__SfcTestResult_USCOREUpload(
	struct soap *soap,
	char *strEventPoint,
	char *strSSN,
	char *testresult,
	time_t testtime,
	char *testitem,
	char *testvalue,
	char *strScanner)
{
	_ns1__SfcTestResult_USCOREUpload *_p = soap_new__ns1__SfcTestResult_USCOREUpload(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SfcTestResult_USCOREUpload::strEventPoint = strEventPoint;
		_p->_ns1__SfcTestResult_USCOREUpload::strSSN = strSSN;
		_p->_ns1__SfcTestResult_USCOREUpload::testresult = testresult;
		_p->_ns1__SfcTestResult_USCOREUpload::testtime = testtime;
		_p->_ns1__SfcTestResult_USCOREUpload::testitem = testitem;
		_p->_ns1__SfcTestResult_USCOREUpload::testvalue = testvalue;
		_p->_ns1__SfcTestResult_USCOREUpload::strScanner = strScanner;
	}
	return _p;
}

inline int soap_write__ns1__SfcTestResult_USCOREUpload(struct soap *soap, _ns1__SfcTestResult_USCOREUpload const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SfcTestResult_Upload", p->soap_type() == SOAP_TYPE__ns1__SfcTestResult_USCOREUpload ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SfcTestResult_USCOREUpload(struct soap *soap, const char *URL, _ns1__SfcTestResult_USCOREUpload const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SfcTestResult_Upload", p->soap_type() == SOAP_TYPE__ns1__SfcTestResult_USCOREUpload ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SfcTestResult_USCOREUpload(struct soap *soap, const char *URL, _ns1__SfcTestResult_USCOREUpload const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SfcTestResult_Upload", p->soap_type() == SOAP_TYPE__ns1__SfcTestResult_USCOREUpload ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SfcTestResult_USCOREUpload * SOAP_FMAC4 soap_get__ns1__SfcTestResult_USCOREUpload(struct soap*, _ns1__SfcTestResult_USCOREUpload *, const char*, const char*);

inline int soap_read__ns1__SfcTestResult_USCOREUpload(struct soap *soap, _ns1__SfcTestResult_USCOREUpload *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SfcTestResult_USCOREUpload(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SfcTestResult_USCOREUpload(struct soap *soap, const char *URL, _ns1__SfcTestResult_USCOREUpload *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__SfcTestResult_USCOREUpload(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SfcTestResult_USCOREUpload(struct soap *soap, _ns1__SfcTestResult_USCOREUpload *p)
{
	if (soap_read__ns1__SfcTestResult_USCOREUpload(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__QueryBindingResponse_DEFINED
#define SOAP_TYPE__ns1__QueryBindingResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QueryBindingResponse(struct soap*, const char*, int, const _ns1__QueryBindingResponse *, const char*);
SOAP_FMAC3 _ns1__QueryBindingResponse * SOAP_FMAC4 soap_in__ns1__QueryBindingResponse(struct soap*, const char*, _ns1__QueryBindingResponse *, const char*);
SOAP_FMAC1 _ns1__QueryBindingResponse * SOAP_FMAC2 soap_instantiate__ns1__QueryBindingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__QueryBindingResponse * soap_new__ns1__QueryBindingResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__QueryBindingResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__QueryBindingResponse * soap_new_req__ns1__QueryBindingResponse(
	struct soap *soap)
{
	_ns1__QueryBindingResponse *_p = soap_new__ns1__QueryBindingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__QueryBindingResponse * soap_new_set__ns1__QueryBindingResponse(
	struct soap *soap,
	ns1__ArrayOfAnyType *QueryBindingResult)
{
	_ns1__QueryBindingResponse *_p = soap_new__ns1__QueryBindingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__QueryBindingResponse::QueryBindingResult = QueryBindingResult;
	}
	return _p;
}

inline int soap_write__ns1__QueryBindingResponse(struct soap *soap, _ns1__QueryBindingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QueryBindingResponse", p->soap_type() == SOAP_TYPE__ns1__QueryBindingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__QueryBindingResponse(struct soap *soap, const char *URL, _ns1__QueryBindingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QueryBindingResponse", p->soap_type() == SOAP_TYPE__ns1__QueryBindingResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__QueryBindingResponse(struct soap *soap, const char *URL, _ns1__QueryBindingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QueryBindingResponse", p->soap_type() == SOAP_TYPE__ns1__QueryBindingResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__QueryBindingResponse * SOAP_FMAC4 soap_get__ns1__QueryBindingResponse(struct soap*, _ns1__QueryBindingResponse *, const char*, const char*);

inline int soap_read__ns1__QueryBindingResponse(struct soap *soap, _ns1__QueryBindingResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__QueryBindingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__QueryBindingResponse(struct soap *soap, const char *URL, _ns1__QueryBindingResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__QueryBindingResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__QueryBindingResponse(struct soap *soap, _ns1__QueryBindingResponse *p)
{
	if (soap_read__ns1__QueryBindingResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__QueryBinding_DEFINED
#define SOAP_TYPE__ns1__QueryBinding_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QueryBinding(struct soap*, const char*, int, const _ns1__QueryBinding *, const char*);
SOAP_FMAC3 _ns1__QueryBinding * SOAP_FMAC4 soap_in__ns1__QueryBinding(struct soap*, const char*, _ns1__QueryBinding *, const char*);
SOAP_FMAC1 _ns1__QueryBinding * SOAP_FMAC2 soap_instantiate__ns1__QueryBinding(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__QueryBinding * soap_new__ns1__QueryBinding(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__QueryBinding(soap, n, NULL, NULL, NULL);
}

inline _ns1__QueryBinding * soap_new_req__ns1__QueryBinding(
	struct soap *soap)
{
	_ns1__QueryBinding *_p = soap_new__ns1__QueryBinding(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__QueryBinding * soap_new_set__ns1__QueryBinding(
	struct soap *soap,
	char *DataType,
	char *DataValue,
	char *querytype)
{
	_ns1__QueryBinding *_p = soap_new__ns1__QueryBinding(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__QueryBinding::DataType = DataType;
		_p->_ns1__QueryBinding::DataValue = DataValue;
		_p->_ns1__QueryBinding::querytype = querytype;
	}
	return _p;
}

inline int soap_write__ns1__QueryBinding(struct soap *soap, _ns1__QueryBinding const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QueryBinding", p->soap_type() == SOAP_TYPE__ns1__QueryBinding ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__QueryBinding(struct soap *soap, const char *URL, _ns1__QueryBinding const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QueryBinding", p->soap_type() == SOAP_TYPE__ns1__QueryBinding ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__QueryBinding(struct soap *soap, const char *URL, _ns1__QueryBinding const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QueryBinding", p->soap_type() == SOAP_TYPE__ns1__QueryBinding ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__QueryBinding * SOAP_FMAC4 soap_get__ns1__QueryBinding(struct soap*, _ns1__QueryBinding *, const char*, const char*);

inline int soap_read__ns1__QueryBinding(struct soap *soap, _ns1__QueryBinding *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__QueryBinding(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__QueryBinding(struct soap *soap, const char *URL, _ns1__QueryBinding *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__QueryBinding(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__QueryBinding(struct soap *soap, _ns1__QueryBinding *p)
{
	if (soap_read__ns1__QueryBinding(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__BindingResponse_DEFINED
#define SOAP_TYPE__ns1__BindingResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BindingResponse(struct soap*, const char*, int, const _ns1__BindingResponse *, const char*);
SOAP_FMAC3 _ns1__BindingResponse * SOAP_FMAC4 soap_in__ns1__BindingResponse(struct soap*, const char*, _ns1__BindingResponse *, const char*);
SOAP_FMAC1 _ns1__BindingResponse * SOAP_FMAC2 soap_instantiate__ns1__BindingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BindingResponse * soap_new__ns1__BindingResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BindingResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__BindingResponse * soap_new_req__ns1__BindingResponse(
	struct soap *soap)
{
	_ns1__BindingResponse *_p = soap_new__ns1__BindingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__BindingResponse * soap_new_set__ns1__BindingResponse(
	struct soap *soap,
	ns1__ArrayOfAnyType *BindingResult)
{
	_ns1__BindingResponse *_p = soap_new__ns1__BindingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BindingResponse::BindingResult = BindingResult;
	}
	return _p;
}

inline int soap_write__ns1__BindingResponse(struct soap *soap, _ns1__BindingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindingResponse", p->soap_type() == SOAP_TYPE__ns1__BindingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__BindingResponse(struct soap *soap, const char *URL, _ns1__BindingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindingResponse", p->soap_type() == SOAP_TYPE__ns1__BindingResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__BindingResponse(struct soap *soap, const char *URL, _ns1__BindingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindingResponse", p->soap_type() == SOAP_TYPE__ns1__BindingResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BindingResponse * SOAP_FMAC4 soap_get__ns1__BindingResponse(struct soap*, _ns1__BindingResponse *, const char*, const char*);

inline int soap_read__ns1__BindingResponse(struct soap *soap, _ns1__BindingResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__BindingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__BindingResponse(struct soap *soap, const char *URL, _ns1__BindingResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__BindingResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__BindingResponse(struct soap *soap, _ns1__BindingResponse *p)
{
	if (soap_read__ns1__BindingResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__Binding_DEFINED
#define SOAP_TYPE__ns1__Binding_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Binding(struct soap*, const char*, int, const _ns1__Binding *, const char*);
SOAP_FMAC3 _ns1__Binding * SOAP_FMAC4 soap_in__ns1__Binding(struct soap*, const char*, _ns1__Binding *, const char*);
SOAP_FMAC1 _ns1__Binding * SOAP_FMAC2 soap_instantiate__ns1__Binding(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Binding * soap_new__ns1__Binding(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__Binding(soap, n, NULL, NULL, NULL);
}

inline _ns1__Binding * soap_new_req__ns1__Binding(
	struct soap *soap)
{
	_ns1__Binding *_p = soap_new__ns1__Binding(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Binding * soap_new_set__ns1__Binding(
	struct soap *soap,
	char *ssn,
	char *csn,
	char *key,
	char *station,
	char *user)
{
	_ns1__Binding *_p = soap_new__ns1__Binding(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Binding::ssn = ssn;
		_p->_ns1__Binding::csn = csn;
		_p->_ns1__Binding::key = key;
		_p->_ns1__Binding::station = station;
		_p->_ns1__Binding::user = user;
	}
	return _p;
}

inline int soap_write__ns1__Binding(struct soap *soap, _ns1__Binding const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Binding", p->soap_type() == SOAP_TYPE__ns1__Binding ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__Binding(struct soap *soap, const char *URL, _ns1__Binding const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Binding", p->soap_type() == SOAP_TYPE__ns1__Binding ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__Binding(struct soap *soap, const char *URL, _ns1__Binding const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Binding", p->soap_type() == SOAP_TYPE__ns1__Binding ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Binding * SOAP_FMAC4 soap_get__ns1__Binding(struct soap*, _ns1__Binding *, const char*, const char*);

inline int soap_read__ns1__Binding(struct soap *soap, _ns1__Binding *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__Binding(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__Binding(struct soap *soap, const char *URL, _ns1__Binding *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__Binding(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__Binding(struct soap *soap, _ns1__Binding *p)
{
	if (soap_read__ns1__Binding(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CheckSSN_USCORENEWResponse_DEFINED
#define SOAP_TYPE__ns1__CheckSSN_USCORENEWResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CheckSSN_USCORENEWResponse(struct soap*, const char*, int, const _ns1__CheckSSN_USCORENEWResponse *, const char*);
SOAP_FMAC3 _ns1__CheckSSN_USCORENEWResponse * SOAP_FMAC4 soap_in__ns1__CheckSSN_USCORENEWResponse(struct soap*, const char*, _ns1__CheckSSN_USCORENEWResponse *, const char*);
SOAP_FMAC1 _ns1__CheckSSN_USCORENEWResponse * SOAP_FMAC2 soap_instantiate__ns1__CheckSSN_USCORENEWResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CheckSSN_USCORENEWResponse * soap_new__ns1__CheckSSN_USCORENEWResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CheckSSN_USCORENEWResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CheckSSN_USCORENEWResponse * soap_new_req__ns1__CheckSSN_USCORENEWResponse(
	struct soap *soap)
{
	_ns1__CheckSSN_USCORENEWResponse *_p = soap_new__ns1__CheckSSN_USCORENEWResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CheckSSN_USCORENEWResponse * soap_new_set__ns1__CheckSSN_USCORENEWResponse(
	struct soap *soap,
	ns1__ArrayOfAnyType *CheckSSN_USCORENEWResult)
{
	_ns1__CheckSSN_USCORENEWResponse *_p = soap_new__ns1__CheckSSN_USCORENEWResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CheckSSN_USCORENEWResponse::CheckSSN_USCORENEWResult = CheckSSN_USCORENEWResult;
	}
	return _p;
}

inline int soap_write__ns1__CheckSSN_USCORENEWResponse(struct soap *soap, _ns1__CheckSSN_USCORENEWResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CheckSSN_NEWResponse", p->soap_type() == SOAP_TYPE__ns1__CheckSSN_USCORENEWResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CheckSSN_USCORENEWResponse(struct soap *soap, const char *URL, _ns1__CheckSSN_USCORENEWResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CheckSSN_NEWResponse", p->soap_type() == SOAP_TYPE__ns1__CheckSSN_USCORENEWResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CheckSSN_USCORENEWResponse(struct soap *soap, const char *URL, _ns1__CheckSSN_USCORENEWResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CheckSSN_NEWResponse", p->soap_type() == SOAP_TYPE__ns1__CheckSSN_USCORENEWResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CheckSSN_USCORENEWResponse * SOAP_FMAC4 soap_get__ns1__CheckSSN_USCORENEWResponse(struct soap*, _ns1__CheckSSN_USCORENEWResponse *, const char*, const char*);

inline int soap_read__ns1__CheckSSN_USCORENEWResponse(struct soap *soap, _ns1__CheckSSN_USCORENEWResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CheckSSN_USCORENEWResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CheckSSN_USCORENEWResponse(struct soap *soap, const char *URL, _ns1__CheckSSN_USCORENEWResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CheckSSN_USCORENEWResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CheckSSN_USCORENEWResponse(struct soap *soap, _ns1__CheckSSN_USCORENEWResponse *p)
{
	if (soap_read__ns1__CheckSSN_USCORENEWResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CheckSSN_USCORENEW_DEFINED
#define SOAP_TYPE__ns1__CheckSSN_USCORENEW_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CheckSSN_USCORENEW(struct soap*, const char*, int, const _ns1__CheckSSN_USCORENEW *, const char*);
SOAP_FMAC3 _ns1__CheckSSN_USCORENEW * SOAP_FMAC4 soap_in__ns1__CheckSSN_USCORENEW(struct soap*, const char*, _ns1__CheckSSN_USCORENEW *, const char*);
SOAP_FMAC1 _ns1__CheckSSN_USCORENEW * SOAP_FMAC2 soap_instantiate__ns1__CheckSSN_USCORENEW(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CheckSSN_USCORENEW * soap_new__ns1__CheckSSN_USCORENEW(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CheckSSN_USCORENEW(soap, n, NULL, NULL, NULL);
}

inline _ns1__CheckSSN_USCORENEW * soap_new_req__ns1__CheckSSN_USCORENEW(
	struct soap *soap)
{
	_ns1__CheckSSN_USCORENEW *_p = soap_new__ns1__CheckSSN_USCORENEW(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CheckSSN_USCORENEW * soap_new_set__ns1__CheckSSN_USCORENEW(
	struct soap *soap,
	char *strSN,
	char *station)
{
	_ns1__CheckSSN_USCORENEW *_p = soap_new__ns1__CheckSSN_USCORENEW(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CheckSSN_USCORENEW::strSN = strSN;
		_p->_ns1__CheckSSN_USCORENEW::station = station;
	}
	return _p;
}

inline int soap_write__ns1__CheckSSN_USCORENEW(struct soap *soap, _ns1__CheckSSN_USCORENEW const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CheckSSN_NEW", p->soap_type() == SOAP_TYPE__ns1__CheckSSN_USCORENEW ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CheckSSN_USCORENEW(struct soap *soap, const char *URL, _ns1__CheckSSN_USCORENEW const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CheckSSN_NEW", p->soap_type() == SOAP_TYPE__ns1__CheckSSN_USCORENEW ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CheckSSN_USCORENEW(struct soap *soap, const char *URL, _ns1__CheckSSN_USCORENEW const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CheckSSN_NEW", p->soap_type() == SOAP_TYPE__ns1__CheckSSN_USCORENEW ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CheckSSN_USCORENEW * SOAP_FMAC4 soap_get__ns1__CheckSSN_USCORENEW(struct soap*, _ns1__CheckSSN_USCORENEW *, const char*, const char*);

inline int soap_read__ns1__CheckSSN_USCORENEW(struct soap *soap, _ns1__CheckSSN_USCORENEW *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CheckSSN_USCORENEW(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CheckSSN_USCORENEW(struct soap *soap, const char *URL, _ns1__CheckSSN_USCORENEW *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CheckSSN_USCORENEW(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CheckSSN_USCORENEW(struct soap *soap, _ns1__CheckSSN_USCORENEW *p)
{
	if (soap_read__ns1__CheckSSN_USCORENEW(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CheckSSNResponse_DEFINED
#define SOAP_TYPE__ns1__CheckSSNResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CheckSSNResponse(struct soap*, const char*, int, const _ns1__CheckSSNResponse *, const char*);
SOAP_FMAC3 _ns1__CheckSSNResponse * SOAP_FMAC4 soap_in__ns1__CheckSSNResponse(struct soap*, const char*, _ns1__CheckSSNResponse *, const char*);
SOAP_FMAC1 _ns1__CheckSSNResponse * SOAP_FMAC2 soap_instantiate__ns1__CheckSSNResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CheckSSNResponse * soap_new__ns1__CheckSSNResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CheckSSNResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CheckSSNResponse * soap_new_req__ns1__CheckSSNResponse(
	struct soap *soap)
{
	_ns1__CheckSSNResponse *_p = soap_new__ns1__CheckSSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CheckSSNResponse * soap_new_set__ns1__CheckSSNResponse(
	struct soap *soap,
	ns1__ArrayOfAnyType *CheckSSNResult)
{
	_ns1__CheckSSNResponse *_p = soap_new__ns1__CheckSSNResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CheckSSNResponse::CheckSSNResult = CheckSSNResult;
	}
	return _p;
}

inline int soap_write__ns1__CheckSSNResponse(struct soap *soap, _ns1__CheckSSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CheckSSNResponse", p->soap_type() == SOAP_TYPE__ns1__CheckSSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CheckSSNResponse(struct soap *soap, const char *URL, _ns1__CheckSSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CheckSSNResponse", p->soap_type() == SOAP_TYPE__ns1__CheckSSNResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CheckSSNResponse(struct soap *soap, const char *URL, _ns1__CheckSSNResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CheckSSNResponse", p->soap_type() == SOAP_TYPE__ns1__CheckSSNResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CheckSSNResponse * SOAP_FMAC4 soap_get__ns1__CheckSSNResponse(struct soap*, _ns1__CheckSSNResponse *, const char*, const char*);

inline int soap_read__ns1__CheckSSNResponse(struct soap *soap, _ns1__CheckSSNResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CheckSSNResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CheckSSNResponse(struct soap *soap, const char *URL, _ns1__CheckSSNResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CheckSSNResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CheckSSNResponse(struct soap *soap, _ns1__CheckSSNResponse *p)
{
	if (soap_read__ns1__CheckSSNResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CheckSSN_DEFINED
#define SOAP_TYPE__ns1__CheckSSN_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CheckSSN(struct soap*, const char*, int, const _ns1__CheckSSN *, const char*);
SOAP_FMAC3 _ns1__CheckSSN * SOAP_FMAC4 soap_in__ns1__CheckSSN(struct soap*, const char*, _ns1__CheckSSN *, const char*);
SOAP_FMAC1 _ns1__CheckSSN * SOAP_FMAC2 soap_instantiate__ns1__CheckSSN(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CheckSSN * soap_new__ns1__CheckSSN(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CheckSSN(soap, n, NULL, NULL, NULL);
}

inline _ns1__CheckSSN * soap_new_req__ns1__CheckSSN(
	struct soap *soap)
{
	_ns1__CheckSSN *_p = soap_new__ns1__CheckSSN(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CheckSSN * soap_new_set__ns1__CheckSSN(
	struct soap *soap,
	char *strSN)
{
	_ns1__CheckSSN *_p = soap_new__ns1__CheckSSN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CheckSSN::strSN = strSN;
	}
	return _p;
}

inline int soap_write__ns1__CheckSSN(struct soap *soap, _ns1__CheckSSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CheckSSN", p->soap_type() == SOAP_TYPE__ns1__CheckSSN ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CheckSSN(struct soap *soap, const char *URL, _ns1__CheckSSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CheckSSN", p->soap_type() == SOAP_TYPE__ns1__CheckSSN ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CheckSSN(struct soap *soap, const char *URL, _ns1__CheckSSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CheckSSN", p->soap_type() == SOAP_TYPE__ns1__CheckSSN ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CheckSSN * SOAP_FMAC4 soap_get__ns1__CheckSSN(struct soap*, _ns1__CheckSSN *, const char*, const char*);

inline int soap_read__ns1__CheckSSN(struct soap *soap, _ns1__CheckSSN *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CheckSSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CheckSSN(struct soap *soap, const char *URL, _ns1__CheckSSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__CheckSSN(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CheckSSN(struct soap *soap, _ns1__CheckSSN *p)
{
	if (soap_read__ns1__CheckSSN(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UploadTestResultResponse_DEFINED
#define SOAP_TYPE__ns1__UploadTestResultResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadTestResultResponse(struct soap*, const char*, int, const _ns1__UploadTestResultResponse *, const char*);
SOAP_FMAC3 _ns1__UploadTestResultResponse * SOAP_FMAC4 soap_in__ns1__UploadTestResultResponse(struct soap*, const char*, _ns1__UploadTestResultResponse *, const char*);
SOAP_FMAC1 _ns1__UploadTestResultResponse * SOAP_FMAC2 soap_instantiate__ns1__UploadTestResultResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UploadTestResultResponse * soap_new__ns1__UploadTestResultResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__UploadTestResultResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__UploadTestResultResponse * soap_new_req__ns1__UploadTestResultResponse(
	struct soap *soap)
{
	_ns1__UploadTestResultResponse *_p = soap_new__ns1__UploadTestResultResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__UploadTestResultResponse * soap_new_set__ns1__UploadTestResultResponse(
	struct soap *soap,
	ns1__ArrayOfAnyType *UploadTestResultResult)
{
	_ns1__UploadTestResultResponse *_p = soap_new__ns1__UploadTestResultResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UploadTestResultResponse::UploadTestResultResult = UploadTestResultResult;
	}
	return _p;
}

inline int soap_write__ns1__UploadTestResultResponse(struct soap *soap, _ns1__UploadTestResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UploadTestResultResponse", p->soap_type() == SOAP_TYPE__ns1__UploadTestResultResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__UploadTestResultResponse(struct soap *soap, const char *URL, _ns1__UploadTestResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UploadTestResultResponse", p->soap_type() == SOAP_TYPE__ns1__UploadTestResultResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__UploadTestResultResponse(struct soap *soap, const char *URL, _ns1__UploadTestResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UploadTestResultResponse", p->soap_type() == SOAP_TYPE__ns1__UploadTestResultResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UploadTestResultResponse * SOAP_FMAC4 soap_get__ns1__UploadTestResultResponse(struct soap*, _ns1__UploadTestResultResponse *, const char*, const char*);

inline int soap_read__ns1__UploadTestResultResponse(struct soap *soap, _ns1__UploadTestResultResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UploadTestResultResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__UploadTestResultResponse(struct soap *soap, const char *URL, _ns1__UploadTestResultResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__UploadTestResultResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__UploadTestResultResponse(struct soap *soap, _ns1__UploadTestResultResponse *p)
{
	if (soap_read__ns1__UploadTestResultResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UploadTestResult_DEFINED
#define SOAP_TYPE__ns1__UploadTestResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadTestResult(struct soap*, const char*, int, const _ns1__UploadTestResult *, const char*);
SOAP_FMAC3 _ns1__UploadTestResult * SOAP_FMAC4 soap_in__ns1__UploadTestResult(struct soap*, const char*, _ns1__UploadTestResult *, const char*);
SOAP_FMAC1 _ns1__UploadTestResult * SOAP_FMAC2 soap_instantiate__ns1__UploadTestResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UploadTestResult * soap_new__ns1__UploadTestResult(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__UploadTestResult(soap, n, NULL, NULL, NULL);
}

inline _ns1__UploadTestResult * soap_new_req__ns1__UploadTestResult(
	struct soap *soap)
{
	_ns1__UploadTestResult *_p = soap_new__ns1__UploadTestResult(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__UploadTestResult * soap_new_set__ns1__UploadTestResult(
	struct soap *soap,
	ns1__ArrayOfAnyType *objs)
{
	_ns1__UploadTestResult *_p = soap_new__ns1__UploadTestResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UploadTestResult::objs = objs;
	}
	return _p;
}

inline int soap_write__ns1__UploadTestResult(struct soap *soap, _ns1__UploadTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UploadTestResult", p->soap_type() == SOAP_TYPE__ns1__UploadTestResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__UploadTestResult(struct soap *soap, const char *URL, _ns1__UploadTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UploadTestResult", p->soap_type() == SOAP_TYPE__ns1__UploadTestResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__UploadTestResult(struct soap *soap, const char *URL, _ns1__UploadTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UploadTestResult", p->soap_type() == SOAP_TYPE__ns1__UploadTestResult ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UploadTestResult * SOAP_FMAC4 soap_get__ns1__UploadTestResult(struct soap*, _ns1__UploadTestResult *, const char*, const char*);

inline int soap_read__ns1__UploadTestResult(struct soap *soap, _ns1__UploadTestResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UploadTestResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__UploadTestResult(struct soap *soap, const char *URL, _ns1__UploadTestResult *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__UploadTestResult(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__UploadTestResult(struct soap *soap, _ns1__UploadTestResult *p)
{
	if (soap_read__ns1__UploadTestResult(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DoFunctionResponse_DEFINED
#define SOAP_TYPE__ns1__DoFunctionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DoFunctionResponse(struct soap*, const char*, int, const _ns1__DoFunctionResponse *, const char*);
SOAP_FMAC3 _ns1__DoFunctionResponse * SOAP_FMAC4 soap_in__ns1__DoFunctionResponse(struct soap*, const char*, _ns1__DoFunctionResponse *, const char*);
SOAP_FMAC1 _ns1__DoFunctionResponse * SOAP_FMAC2 soap_instantiate__ns1__DoFunctionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DoFunctionResponse * soap_new__ns1__DoFunctionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DoFunctionResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__DoFunctionResponse * soap_new_req__ns1__DoFunctionResponse(
	struct soap *soap)
{
	_ns1__DoFunctionResponse *_p = soap_new__ns1__DoFunctionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__DoFunctionResponse * soap_new_set__ns1__DoFunctionResponse(
	struct soap *soap,
	ns1__ArrayOfAnyType *DoFunctionResult)
{
	_ns1__DoFunctionResponse *_p = soap_new__ns1__DoFunctionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoFunctionResponse::DoFunctionResult = DoFunctionResult;
	}
	return _p;
}

inline int soap_write__ns1__DoFunctionResponse(struct soap *soap, _ns1__DoFunctionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoFunctionResponse", p->soap_type() == SOAP_TYPE__ns1__DoFunctionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DoFunctionResponse(struct soap *soap, const char *URL, _ns1__DoFunctionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoFunctionResponse", p->soap_type() == SOAP_TYPE__ns1__DoFunctionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DoFunctionResponse(struct soap *soap, const char *URL, _ns1__DoFunctionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoFunctionResponse", p->soap_type() == SOAP_TYPE__ns1__DoFunctionResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DoFunctionResponse * SOAP_FMAC4 soap_get__ns1__DoFunctionResponse(struct soap*, _ns1__DoFunctionResponse *, const char*, const char*);

inline int soap_read__ns1__DoFunctionResponse(struct soap *soap, _ns1__DoFunctionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DoFunctionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DoFunctionResponse(struct soap *soap, const char *URL, _ns1__DoFunctionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__DoFunctionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DoFunctionResponse(struct soap *soap, _ns1__DoFunctionResponse *p)
{
	if (soap_read__ns1__DoFunctionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DoFunction_DEFINED
#define SOAP_TYPE__ns1__DoFunction_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DoFunction(struct soap*, const char*, int, const _ns1__DoFunction *, const char*);
SOAP_FMAC3 _ns1__DoFunction * SOAP_FMAC4 soap_in__ns1__DoFunction(struct soap*, const char*, _ns1__DoFunction *, const char*);
SOAP_FMAC1 _ns1__DoFunction * SOAP_FMAC2 soap_instantiate__ns1__DoFunction(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DoFunction * soap_new__ns1__DoFunction(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DoFunction(soap, n, NULL, NULL, NULL);
}

inline _ns1__DoFunction * soap_new_req__ns1__DoFunction(
	struct soap *soap)
{
	_ns1__DoFunction *_p = soap_new__ns1__DoFunction(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__DoFunction * soap_new_set__ns1__DoFunction(
	struct soap *soap,
	char *FunctionName,
	ns1__ArrayOfAnyType *objs)
{
	_ns1__DoFunction *_p = soap_new__ns1__DoFunction(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DoFunction::FunctionName = FunctionName;
		_p->_ns1__DoFunction::objs = objs;
	}
	return _p;
}

inline int soap_write__ns1__DoFunction(struct soap *soap, _ns1__DoFunction const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoFunction", p->soap_type() == SOAP_TYPE__ns1__DoFunction ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DoFunction(struct soap *soap, const char *URL, _ns1__DoFunction const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoFunction", p->soap_type() == SOAP_TYPE__ns1__DoFunction ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DoFunction(struct soap *soap, const char *URL, _ns1__DoFunction const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DoFunction", p->soap_type() == SOAP_TYPE__ns1__DoFunction ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DoFunction * SOAP_FMAC4 soap_get__ns1__DoFunction(struct soap*, _ns1__DoFunction *, const char*, const char*);

inline int soap_read__ns1__DoFunction(struct soap *soap, _ns1__DoFunction *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__DoFunction(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DoFunction(struct soap *soap, const char *URL, _ns1__DoFunction *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__DoFunction(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DoFunction(struct soap *soap, _ns1__DoFunction *p)
{
	if (soap_read__ns1__DoFunction(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfAnyType_DEFINED
#define SOAP_TYPE_ns1__ArrayOfAnyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfAnyType(struct soap*, const char*, int, const ns1__ArrayOfAnyType *, const char*);
SOAP_FMAC3 ns1__ArrayOfAnyType * SOAP_FMAC4 soap_in_ns1__ArrayOfAnyType(struct soap*, const char*, ns1__ArrayOfAnyType *, const char*);
SOAP_FMAC1 ns1__ArrayOfAnyType * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfAnyType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfAnyType * soap_new_ns1__ArrayOfAnyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ArrayOfAnyType(soap, n, NULL, NULL, NULL);
}

inline ns1__ArrayOfAnyType * soap_new_req_ns1__ArrayOfAnyType(
	struct soap *soap,
	int __sizeanyType,
	char **anyType)
{
	ns1__ArrayOfAnyType *_p = soap_new_ns1__ArrayOfAnyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfAnyType::__sizeanyType = __sizeanyType;
		_p->ns1__ArrayOfAnyType::anyType = anyType;
	}
	return _p;
}

inline ns1__ArrayOfAnyType * soap_new_set_ns1__ArrayOfAnyType(
	struct soap *soap,
	int __sizeanyType,
	char **anyType)
{
	ns1__ArrayOfAnyType *_p = soap_new_ns1__ArrayOfAnyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfAnyType::__sizeanyType = __sizeanyType;
		_p->ns1__ArrayOfAnyType::anyType = anyType;
	}
	return _p;
}

inline int soap_write_ns1__ArrayOfAnyType(struct soap *soap, ns1__ArrayOfAnyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfAnyType", p->soap_type() == SOAP_TYPE_ns1__ArrayOfAnyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ArrayOfAnyType(struct soap *soap, const char *URL, ns1__ArrayOfAnyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfAnyType", p->soap_type() == SOAP_TYPE_ns1__ArrayOfAnyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ArrayOfAnyType(struct soap *soap, const char *URL, ns1__ArrayOfAnyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfAnyType", p->soap_type() == SOAP_TYPE_ns1__ArrayOfAnyType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ArrayOfAnyType * SOAP_FMAC4 soap_get_ns1__ArrayOfAnyType(struct soap*, ns1__ArrayOfAnyType *, const char*, const char*);

inline int soap_read_ns1__ArrayOfAnyType(struct soap *soap, ns1__ArrayOfAnyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ArrayOfAnyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ArrayOfAnyType(struct soap *soap, const char *URL, ns1__ArrayOfAnyType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ArrayOfAnyType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ArrayOfAnyType(struct soap *soap, ns1__ArrayOfAnyType *p)
{
	if (soap_read_ns1__ArrayOfAnyType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__BlindKeyNum__DEFINED
#define SOAP_TYPE___ns1__BlindKeyNum__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BlindKeyNum_(struct soap*, struct __ns1__BlindKeyNum_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BlindKeyNum_(struct soap*, const struct __ns1__BlindKeyNum_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BlindKeyNum_(struct soap*, const char*, int, const struct __ns1__BlindKeyNum_ *, const char*);
SOAP_FMAC3 struct __ns1__BlindKeyNum_ * SOAP_FMAC4 soap_in___ns1__BlindKeyNum_(struct soap*, const char*, struct __ns1__BlindKeyNum_ *, const char*);
SOAP_FMAC1 struct __ns1__BlindKeyNum_ * SOAP_FMAC2 soap_instantiate___ns1__BlindKeyNum_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BlindKeyNum_ * soap_new___ns1__BlindKeyNum_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BlindKeyNum_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BlindKeyNum_ * soap_new_req___ns1__BlindKeyNum_(
	struct soap *soap)
{
	struct __ns1__BlindKeyNum_ *_p = soap_new___ns1__BlindKeyNum_(soap);
	if (_p)
	{	soap_default___ns1__BlindKeyNum_(soap, _p);
	}
	return _p;
}

inline struct __ns1__BlindKeyNum_ * soap_new_set___ns1__BlindKeyNum_(
	struct soap *soap,
	_ns1__BlindKeyNum *ns1__BlindKeyNum)
{
	struct __ns1__BlindKeyNum_ *_p = soap_new___ns1__BlindKeyNum_(soap);
	if (_p)
	{	soap_default___ns1__BlindKeyNum_(soap, _p);
		_p->ns1__BlindKeyNum = ns1__BlindKeyNum;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BlindKeyNum_(struct soap*, const struct __ns1__BlindKeyNum_ *, const char*, const char*);

inline int soap_write___ns1__BlindKeyNum_(struct soap *soap, struct __ns1__BlindKeyNum_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__BlindKeyNum_(soap, p), 0) || soap_put___ns1__BlindKeyNum_(soap, p, "-ns1:BlindKeyNum", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BlindKeyNum_(struct soap *soap, const char *URL, struct __ns1__BlindKeyNum_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BlindKeyNum_(soap, p), 0) || soap_put___ns1__BlindKeyNum_(soap, p, "-ns1:BlindKeyNum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BlindKeyNum_(struct soap *soap, const char *URL, struct __ns1__BlindKeyNum_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BlindKeyNum_(soap, p), 0) || soap_put___ns1__BlindKeyNum_(soap, p, "-ns1:BlindKeyNum", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BlindKeyNum_ * SOAP_FMAC4 soap_get___ns1__BlindKeyNum_(struct soap*, struct __ns1__BlindKeyNum_ *, const char*, const char*);

inline int soap_read___ns1__BlindKeyNum_(struct soap *soap, struct __ns1__BlindKeyNum_ *p)
{
	if (p)
	{	soap_default___ns1__BlindKeyNum_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BlindKeyNum_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BlindKeyNum_(struct soap *soap, const char *URL, struct __ns1__BlindKeyNum_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__BlindKeyNum_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__BlindKeyNum_(struct soap *soap, struct __ns1__BlindKeyNum_ *p)
{
	if (soap_read___ns1__BlindKeyNum_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetSparrowCheckData__DEFINED
#define SOAP_TYPE___ns1__GetSparrowCheckData__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetSparrowCheckData_(struct soap*, struct __ns1__GetSparrowCheckData_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetSparrowCheckData_(struct soap*, const struct __ns1__GetSparrowCheckData_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetSparrowCheckData_(struct soap*, const char*, int, const struct __ns1__GetSparrowCheckData_ *, const char*);
SOAP_FMAC3 struct __ns1__GetSparrowCheckData_ * SOAP_FMAC4 soap_in___ns1__GetSparrowCheckData_(struct soap*, const char*, struct __ns1__GetSparrowCheckData_ *, const char*);
SOAP_FMAC1 struct __ns1__GetSparrowCheckData_ * SOAP_FMAC2 soap_instantiate___ns1__GetSparrowCheckData_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetSparrowCheckData_ * soap_new___ns1__GetSparrowCheckData_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetSparrowCheckData_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetSparrowCheckData_ * soap_new_req___ns1__GetSparrowCheckData_(
	struct soap *soap)
{
	struct __ns1__GetSparrowCheckData_ *_p = soap_new___ns1__GetSparrowCheckData_(soap);
	if (_p)
	{	soap_default___ns1__GetSparrowCheckData_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetSparrowCheckData_ * soap_new_set___ns1__GetSparrowCheckData_(
	struct soap *soap,
	_ns1__GetSparrowCheckData *ns1__GetSparrowCheckData)
{
	struct __ns1__GetSparrowCheckData_ *_p = soap_new___ns1__GetSparrowCheckData_(soap);
	if (_p)
	{	soap_default___ns1__GetSparrowCheckData_(soap, _p);
		_p->ns1__GetSparrowCheckData = ns1__GetSparrowCheckData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetSparrowCheckData_(struct soap*, const struct __ns1__GetSparrowCheckData_ *, const char*, const char*);

inline int soap_write___ns1__GetSparrowCheckData_(struct soap *soap, struct __ns1__GetSparrowCheckData_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetSparrowCheckData_(soap, p), 0) || soap_put___ns1__GetSparrowCheckData_(soap, p, "-ns1:GetSparrowCheckData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetSparrowCheckData_(struct soap *soap, const char *URL, struct __ns1__GetSparrowCheckData_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetSparrowCheckData_(soap, p), 0) || soap_put___ns1__GetSparrowCheckData_(soap, p, "-ns1:GetSparrowCheckData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetSparrowCheckData_(struct soap *soap, const char *URL, struct __ns1__GetSparrowCheckData_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetSparrowCheckData_(soap, p), 0) || soap_put___ns1__GetSparrowCheckData_(soap, p, "-ns1:GetSparrowCheckData", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetSparrowCheckData_ * SOAP_FMAC4 soap_get___ns1__GetSparrowCheckData_(struct soap*, struct __ns1__GetSparrowCheckData_ *, const char*, const char*);

inline int soap_read___ns1__GetSparrowCheckData_(struct soap *soap, struct __ns1__GetSparrowCheckData_ *p)
{
	if (p)
	{	soap_default___ns1__GetSparrowCheckData_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetSparrowCheckData_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetSparrowCheckData_(struct soap *soap, const char *URL, struct __ns1__GetSparrowCheckData_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetSparrowCheckData_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetSparrowCheckData_(struct soap *soap, struct __ns1__GetSparrowCheckData_ *p)
{
	if (soap_read___ns1__GetSparrowCheckData_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__BindKey__DEFINED
#define SOAP_TYPE___ns1__BindKey__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BindKey_(struct soap*, struct __ns1__BindKey_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BindKey_(struct soap*, const struct __ns1__BindKey_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BindKey_(struct soap*, const char*, int, const struct __ns1__BindKey_ *, const char*);
SOAP_FMAC3 struct __ns1__BindKey_ * SOAP_FMAC4 soap_in___ns1__BindKey_(struct soap*, const char*, struct __ns1__BindKey_ *, const char*);
SOAP_FMAC1 struct __ns1__BindKey_ * SOAP_FMAC2 soap_instantiate___ns1__BindKey_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BindKey_ * soap_new___ns1__BindKey_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BindKey_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BindKey_ * soap_new_req___ns1__BindKey_(
	struct soap *soap)
{
	struct __ns1__BindKey_ *_p = soap_new___ns1__BindKey_(soap);
	if (_p)
	{	soap_default___ns1__BindKey_(soap, _p);
	}
	return _p;
}

inline struct __ns1__BindKey_ * soap_new_set___ns1__BindKey_(
	struct soap *soap,
	_ns1__BindKey *ns1__BindKey)
{
	struct __ns1__BindKey_ *_p = soap_new___ns1__BindKey_(soap);
	if (_p)
	{	soap_default___ns1__BindKey_(soap, _p);
		_p->ns1__BindKey = ns1__BindKey;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BindKey_(struct soap*, const struct __ns1__BindKey_ *, const char*, const char*);

inline int soap_write___ns1__BindKey_(struct soap *soap, struct __ns1__BindKey_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__BindKey_(soap, p), 0) || soap_put___ns1__BindKey_(soap, p, "-ns1:BindKey", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BindKey_(struct soap *soap, const char *URL, struct __ns1__BindKey_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BindKey_(soap, p), 0) || soap_put___ns1__BindKey_(soap, p, "-ns1:BindKey", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BindKey_(struct soap *soap, const char *URL, struct __ns1__BindKey_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BindKey_(soap, p), 0) || soap_put___ns1__BindKey_(soap, p, "-ns1:BindKey", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BindKey_ * SOAP_FMAC4 soap_get___ns1__BindKey_(struct soap*, struct __ns1__BindKey_ *, const char*, const char*);

inline int soap_read___ns1__BindKey_(struct soap *soap, struct __ns1__BindKey_ *p)
{
	if (p)
	{	soap_default___ns1__BindKey_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BindKey_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BindKey_(struct soap *soap, const char *URL, struct __ns1__BindKey_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__BindKey_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__BindKey_(struct soap *soap, struct __ns1__BindKey_ *p)
{
	if (soap_read___ns1__BindKey_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ReleaseKey__DEFINED
#define SOAP_TYPE___ns1__ReleaseKey__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ReleaseKey_(struct soap*, struct __ns1__ReleaseKey_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ReleaseKey_(struct soap*, const struct __ns1__ReleaseKey_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ReleaseKey_(struct soap*, const char*, int, const struct __ns1__ReleaseKey_ *, const char*);
SOAP_FMAC3 struct __ns1__ReleaseKey_ * SOAP_FMAC4 soap_in___ns1__ReleaseKey_(struct soap*, const char*, struct __ns1__ReleaseKey_ *, const char*);
SOAP_FMAC1 struct __ns1__ReleaseKey_ * SOAP_FMAC2 soap_instantiate___ns1__ReleaseKey_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ReleaseKey_ * soap_new___ns1__ReleaseKey_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ReleaseKey_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ReleaseKey_ * soap_new_req___ns1__ReleaseKey_(
	struct soap *soap)
{
	struct __ns1__ReleaseKey_ *_p = soap_new___ns1__ReleaseKey_(soap);
	if (_p)
	{	soap_default___ns1__ReleaseKey_(soap, _p);
	}
	return _p;
}

inline struct __ns1__ReleaseKey_ * soap_new_set___ns1__ReleaseKey_(
	struct soap *soap,
	_ns1__ReleaseKey *ns1__ReleaseKey)
{
	struct __ns1__ReleaseKey_ *_p = soap_new___ns1__ReleaseKey_(soap);
	if (_p)
	{	soap_default___ns1__ReleaseKey_(soap, _p);
		_p->ns1__ReleaseKey = ns1__ReleaseKey;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ReleaseKey_(struct soap*, const struct __ns1__ReleaseKey_ *, const char*, const char*);

inline int soap_write___ns1__ReleaseKey_(struct soap *soap, struct __ns1__ReleaseKey_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ReleaseKey_(soap, p), 0) || soap_put___ns1__ReleaseKey_(soap, p, "-ns1:ReleaseKey", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ReleaseKey_(struct soap *soap, const char *URL, struct __ns1__ReleaseKey_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ReleaseKey_(soap, p), 0) || soap_put___ns1__ReleaseKey_(soap, p, "-ns1:ReleaseKey", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ReleaseKey_(struct soap *soap, const char *URL, struct __ns1__ReleaseKey_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ReleaseKey_(soap, p), 0) || soap_put___ns1__ReleaseKey_(soap, p, "-ns1:ReleaseKey", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ReleaseKey_ * SOAP_FMAC4 soap_get___ns1__ReleaseKey_(struct soap*, struct __ns1__ReleaseKey_ *, const char*, const char*);

inline int soap_read___ns1__ReleaseKey_(struct soap *soap, struct __ns1__ReleaseKey_ *p)
{
	if (p)
	{	soap_default___ns1__ReleaseKey_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ReleaseKey_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ReleaseKey_(struct soap *soap, const char *URL, struct __ns1__ReleaseKey_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ReleaseKey_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ReleaseKey_(struct soap *soap, struct __ns1__ReleaseKey_ *p)
{
	if (soap_read___ns1__ReleaseKey_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetShaoluKey__DEFINED
#define SOAP_TYPE___ns1__GetShaoluKey__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetShaoluKey_(struct soap*, struct __ns1__GetShaoluKey_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetShaoluKey_(struct soap*, const struct __ns1__GetShaoluKey_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetShaoluKey_(struct soap*, const char*, int, const struct __ns1__GetShaoluKey_ *, const char*);
SOAP_FMAC3 struct __ns1__GetShaoluKey_ * SOAP_FMAC4 soap_in___ns1__GetShaoluKey_(struct soap*, const char*, struct __ns1__GetShaoluKey_ *, const char*);
SOAP_FMAC1 struct __ns1__GetShaoluKey_ * SOAP_FMAC2 soap_instantiate___ns1__GetShaoluKey_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetShaoluKey_ * soap_new___ns1__GetShaoluKey_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetShaoluKey_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetShaoluKey_ * soap_new_req___ns1__GetShaoluKey_(
	struct soap *soap)
{
	struct __ns1__GetShaoluKey_ *_p = soap_new___ns1__GetShaoluKey_(soap);
	if (_p)
	{	soap_default___ns1__GetShaoluKey_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetShaoluKey_ * soap_new_set___ns1__GetShaoluKey_(
	struct soap *soap,
	_ns1__GetShaoluKey *ns1__GetShaoluKey)
{
	struct __ns1__GetShaoluKey_ *_p = soap_new___ns1__GetShaoluKey_(soap);
	if (_p)
	{	soap_default___ns1__GetShaoluKey_(soap, _p);
		_p->ns1__GetShaoluKey = ns1__GetShaoluKey;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetShaoluKey_(struct soap*, const struct __ns1__GetShaoluKey_ *, const char*, const char*);

inline int soap_write___ns1__GetShaoluKey_(struct soap *soap, struct __ns1__GetShaoluKey_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetShaoluKey_(soap, p), 0) || soap_put___ns1__GetShaoluKey_(soap, p, "-ns1:GetShaoluKey", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetShaoluKey_(struct soap *soap, const char *URL, struct __ns1__GetShaoluKey_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShaoluKey_(soap, p), 0) || soap_put___ns1__GetShaoluKey_(soap, p, "-ns1:GetShaoluKey", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetShaoluKey_(struct soap *soap, const char *URL, struct __ns1__GetShaoluKey_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShaoluKey_(soap, p), 0) || soap_put___ns1__GetShaoluKey_(soap, p, "-ns1:GetShaoluKey", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetShaoluKey_ * SOAP_FMAC4 soap_get___ns1__GetShaoluKey_(struct soap*, struct __ns1__GetShaoluKey_ *, const char*, const char*);

inline int soap_read___ns1__GetShaoluKey_(struct soap *soap, struct __ns1__GetShaoluKey_ *p)
{
	if (p)
	{	soap_default___ns1__GetShaoluKey_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetShaoluKey_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetShaoluKey_(struct soap *soap, const char *URL, struct __ns1__GetShaoluKey_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetShaoluKey_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetShaoluKey_(struct soap *soap, struct __ns1__GetShaoluKey_ *p)
{
	if (soap_read___ns1__GetShaoluKey_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__PCBData_USCOREUpload__DEFINED
#define SOAP_TYPE___ns1__PCBData_USCOREUpload__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__PCBData_USCOREUpload_(struct soap*, struct __ns1__PCBData_USCOREUpload_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__PCBData_USCOREUpload_(struct soap*, const struct __ns1__PCBData_USCOREUpload_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__PCBData_USCOREUpload_(struct soap*, const char*, int, const struct __ns1__PCBData_USCOREUpload_ *, const char*);
SOAP_FMAC3 struct __ns1__PCBData_USCOREUpload_ * SOAP_FMAC4 soap_in___ns1__PCBData_USCOREUpload_(struct soap*, const char*, struct __ns1__PCBData_USCOREUpload_ *, const char*);
SOAP_FMAC1 struct __ns1__PCBData_USCOREUpload_ * SOAP_FMAC2 soap_instantiate___ns1__PCBData_USCOREUpload_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__PCBData_USCOREUpload_ * soap_new___ns1__PCBData_USCOREUpload_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__PCBData_USCOREUpload_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__PCBData_USCOREUpload_ * soap_new_req___ns1__PCBData_USCOREUpload_(
	struct soap *soap)
{
	struct __ns1__PCBData_USCOREUpload_ *_p = soap_new___ns1__PCBData_USCOREUpload_(soap);
	if (_p)
	{	soap_default___ns1__PCBData_USCOREUpload_(soap, _p);
	}
	return _p;
}

inline struct __ns1__PCBData_USCOREUpload_ * soap_new_set___ns1__PCBData_USCOREUpload_(
	struct soap *soap,
	_ns1__PCBData_USCOREUpload *ns1__PCBData_USCOREUpload)
{
	struct __ns1__PCBData_USCOREUpload_ *_p = soap_new___ns1__PCBData_USCOREUpload_(soap);
	if (_p)
	{	soap_default___ns1__PCBData_USCOREUpload_(soap, _p);
		_p->ns1__PCBData_USCOREUpload = ns1__PCBData_USCOREUpload;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__PCBData_USCOREUpload_(struct soap*, const struct __ns1__PCBData_USCOREUpload_ *, const char*, const char*);

inline int soap_write___ns1__PCBData_USCOREUpload_(struct soap *soap, struct __ns1__PCBData_USCOREUpload_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__PCBData_USCOREUpload_(soap, p), 0) || soap_put___ns1__PCBData_USCOREUpload_(soap, p, "-ns1:PCBData_Upload", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__PCBData_USCOREUpload_(struct soap *soap, const char *URL, struct __ns1__PCBData_USCOREUpload_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__PCBData_USCOREUpload_(soap, p), 0) || soap_put___ns1__PCBData_USCOREUpload_(soap, p, "-ns1:PCBData_Upload", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__PCBData_USCOREUpload_(struct soap *soap, const char *URL, struct __ns1__PCBData_USCOREUpload_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__PCBData_USCOREUpload_(soap, p), 0) || soap_put___ns1__PCBData_USCOREUpload_(soap, p, "-ns1:PCBData_Upload", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__PCBData_USCOREUpload_ * SOAP_FMAC4 soap_get___ns1__PCBData_USCOREUpload_(struct soap*, struct __ns1__PCBData_USCOREUpload_ *, const char*, const char*);

inline int soap_read___ns1__PCBData_USCOREUpload_(struct soap *soap, struct __ns1__PCBData_USCOREUpload_ *p)
{
	if (p)
	{	soap_default___ns1__PCBData_USCOREUpload_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__PCBData_USCOREUpload_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__PCBData_USCOREUpload_(struct soap *soap, const char *URL, struct __ns1__PCBData_USCOREUpload_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__PCBData_USCOREUpload_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__PCBData_USCOREUpload_(struct soap *soap, struct __ns1__PCBData_USCOREUpload_ *p)
{
	if (soap_read___ns1__PCBData_USCOREUpload_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CartonWeight_USCOREUpload__DEFINED
#define SOAP_TYPE___ns1__CartonWeight_USCOREUpload__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CartonWeight_USCOREUpload_(struct soap*, struct __ns1__CartonWeight_USCOREUpload_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CartonWeight_USCOREUpload_(struct soap*, const struct __ns1__CartonWeight_USCOREUpload_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CartonWeight_USCOREUpload_(struct soap*, const char*, int, const struct __ns1__CartonWeight_USCOREUpload_ *, const char*);
SOAP_FMAC3 struct __ns1__CartonWeight_USCOREUpload_ * SOAP_FMAC4 soap_in___ns1__CartonWeight_USCOREUpload_(struct soap*, const char*, struct __ns1__CartonWeight_USCOREUpload_ *, const char*);
SOAP_FMAC1 struct __ns1__CartonWeight_USCOREUpload_ * SOAP_FMAC2 soap_instantiate___ns1__CartonWeight_USCOREUpload_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CartonWeight_USCOREUpload_ * soap_new___ns1__CartonWeight_USCOREUpload_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CartonWeight_USCOREUpload_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CartonWeight_USCOREUpload_ * soap_new_req___ns1__CartonWeight_USCOREUpload_(
	struct soap *soap)
{
	struct __ns1__CartonWeight_USCOREUpload_ *_p = soap_new___ns1__CartonWeight_USCOREUpload_(soap);
	if (_p)
	{	soap_default___ns1__CartonWeight_USCOREUpload_(soap, _p);
	}
	return _p;
}

inline struct __ns1__CartonWeight_USCOREUpload_ * soap_new_set___ns1__CartonWeight_USCOREUpload_(
	struct soap *soap,
	_ns1__CartonWeight_USCOREUpload *ns1__CartonWeight_USCOREUpload)
{
	struct __ns1__CartonWeight_USCOREUpload_ *_p = soap_new___ns1__CartonWeight_USCOREUpload_(soap);
	if (_p)
	{	soap_default___ns1__CartonWeight_USCOREUpload_(soap, _p);
		_p->ns1__CartonWeight_USCOREUpload = ns1__CartonWeight_USCOREUpload;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CartonWeight_USCOREUpload_(struct soap*, const struct __ns1__CartonWeight_USCOREUpload_ *, const char*, const char*);

inline int soap_write___ns1__CartonWeight_USCOREUpload_(struct soap *soap, struct __ns1__CartonWeight_USCOREUpload_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CartonWeight_USCOREUpload_(soap, p), 0) || soap_put___ns1__CartonWeight_USCOREUpload_(soap, p, "-ns1:CartonWeight_Upload", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CartonWeight_USCOREUpload_(struct soap *soap, const char *URL, struct __ns1__CartonWeight_USCOREUpload_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CartonWeight_USCOREUpload_(soap, p), 0) || soap_put___ns1__CartonWeight_USCOREUpload_(soap, p, "-ns1:CartonWeight_Upload", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CartonWeight_USCOREUpload_(struct soap *soap, const char *URL, struct __ns1__CartonWeight_USCOREUpload_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CartonWeight_USCOREUpload_(soap, p), 0) || soap_put___ns1__CartonWeight_USCOREUpload_(soap, p, "-ns1:CartonWeight_Upload", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CartonWeight_USCOREUpload_ * SOAP_FMAC4 soap_get___ns1__CartonWeight_USCOREUpload_(struct soap*, struct __ns1__CartonWeight_USCOREUpload_ *, const char*, const char*);

inline int soap_read___ns1__CartonWeight_USCOREUpload_(struct soap *soap, struct __ns1__CartonWeight_USCOREUpload_ *p)
{
	if (p)
	{	soap_default___ns1__CartonWeight_USCOREUpload_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CartonWeight_USCOREUpload_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CartonWeight_USCOREUpload_(struct soap *soap, const char *URL, struct __ns1__CartonWeight_USCOREUpload_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CartonWeight_USCOREUpload_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CartonWeight_USCOREUpload_(struct soap *soap, struct __ns1__CartonWeight_USCOREUpload_ *p)
{
	if (soap_read___ns1__CartonWeight_USCOREUpload_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetMacBySn__DEFINED
#define SOAP_TYPE___ns1__GetMacBySn__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetMacBySn_(struct soap*, struct __ns1__GetMacBySn_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetMacBySn_(struct soap*, const struct __ns1__GetMacBySn_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetMacBySn_(struct soap*, const char*, int, const struct __ns1__GetMacBySn_ *, const char*);
SOAP_FMAC3 struct __ns1__GetMacBySn_ * SOAP_FMAC4 soap_in___ns1__GetMacBySn_(struct soap*, const char*, struct __ns1__GetMacBySn_ *, const char*);
SOAP_FMAC1 struct __ns1__GetMacBySn_ * SOAP_FMAC2 soap_instantiate___ns1__GetMacBySn_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetMacBySn_ * soap_new___ns1__GetMacBySn_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetMacBySn_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetMacBySn_ * soap_new_req___ns1__GetMacBySn_(
	struct soap *soap)
{
	struct __ns1__GetMacBySn_ *_p = soap_new___ns1__GetMacBySn_(soap);
	if (_p)
	{	soap_default___ns1__GetMacBySn_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetMacBySn_ * soap_new_set___ns1__GetMacBySn_(
	struct soap *soap,
	_ns1__GetMacBySn *ns1__GetMacBySn)
{
	struct __ns1__GetMacBySn_ *_p = soap_new___ns1__GetMacBySn_(soap);
	if (_p)
	{	soap_default___ns1__GetMacBySn_(soap, _p);
		_p->ns1__GetMacBySn = ns1__GetMacBySn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetMacBySn_(struct soap*, const struct __ns1__GetMacBySn_ *, const char*, const char*);

inline int soap_write___ns1__GetMacBySn_(struct soap *soap, struct __ns1__GetMacBySn_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetMacBySn_(soap, p), 0) || soap_put___ns1__GetMacBySn_(soap, p, "-ns1:GetMacBySn", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetMacBySn_(struct soap *soap, const char *URL, struct __ns1__GetMacBySn_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetMacBySn_(soap, p), 0) || soap_put___ns1__GetMacBySn_(soap, p, "-ns1:GetMacBySn", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetMacBySn_(struct soap *soap, const char *URL, struct __ns1__GetMacBySn_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetMacBySn_(soap, p), 0) || soap_put___ns1__GetMacBySn_(soap, p, "-ns1:GetMacBySn", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetMacBySn_ * SOAP_FMAC4 soap_get___ns1__GetMacBySn_(struct soap*, struct __ns1__GetMacBySn_ *, const char*, const char*);

inline int soap_read___ns1__GetMacBySn_(struct soap *soap, struct __ns1__GetMacBySn_ *p)
{
	if (p)
	{	soap_default___ns1__GetMacBySn_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetMacBySn_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetMacBySn_(struct soap *soap, const char *URL, struct __ns1__GetMacBySn_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetMacBySn_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetMacBySn_(struct soap *soap, struct __ns1__GetMacBySn_ *p)
{
	if (soap_read___ns1__GetMacBySn_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GETMACID__DEFINED
#define SOAP_TYPE___ns1__GETMACID__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GETMACID_(struct soap*, struct __ns1__GETMACID_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GETMACID_(struct soap*, const struct __ns1__GETMACID_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GETMACID_(struct soap*, const char*, int, const struct __ns1__GETMACID_ *, const char*);
SOAP_FMAC3 struct __ns1__GETMACID_ * SOAP_FMAC4 soap_in___ns1__GETMACID_(struct soap*, const char*, struct __ns1__GETMACID_ *, const char*);
SOAP_FMAC1 struct __ns1__GETMACID_ * SOAP_FMAC2 soap_instantiate___ns1__GETMACID_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GETMACID_ * soap_new___ns1__GETMACID_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GETMACID_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GETMACID_ * soap_new_req___ns1__GETMACID_(
	struct soap *soap)
{
	struct __ns1__GETMACID_ *_p = soap_new___ns1__GETMACID_(soap);
	if (_p)
	{	soap_default___ns1__GETMACID_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GETMACID_ * soap_new_set___ns1__GETMACID_(
	struct soap *soap,
	_ns1__GETMACID *ns1__GETMACID)
{
	struct __ns1__GETMACID_ *_p = soap_new___ns1__GETMACID_(soap);
	if (_p)
	{	soap_default___ns1__GETMACID_(soap, _p);
		_p->ns1__GETMACID = ns1__GETMACID;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GETMACID_(struct soap*, const struct __ns1__GETMACID_ *, const char*, const char*);

inline int soap_write___ns1__GETMACID_(struct soap *soap, struct __ns1__GETMACID_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GETMACID_(soap, p), 0) || soap_put___ns1__GETMACID_(soap, p, "-ns1:GETMACID", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GETMACID_(struct soap *soap, const char *URL, struct __ns1__GETMACID_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GETMACID_(soap, p), 0) || soap_put___ns1__GETMACID_(soap, p, "-ns1:GETMACID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GETMACID_(struct soap *soap, const char *URL, struct __ns1__GETMACID_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GETMACID_(soap, p), 0) || soap_put___ns1__GETMACID_(soap, p, "-ns1:GETMACID", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GETMACID_ * SOAP_FMAC4 soap_get___ns1__GETMACID_(struct soap*, struct __ns1__GETMACID_ *, const char*, const char*);

inline int soap_read___ns1__GETMACID_(struct soap *soap, struct __ns1__GETMACID_ *p)
{
	if (p)
	{	soap_default___ns1__GETMACID_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GETMACID_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GETMACID_(struct soap *soap, const char *URL, struct __ns1__GETMACID_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GETMACID_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GETMACID_(struct soap *soap, struct __ns1__GETMACID_ *p)
{
	if (soap_read___ns1__GETMACID_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__test__DEFINED
#define SOAP_TYPE___ns1__test__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__test_(struct soap*, struct __ns1__test_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__test_(struct soap*, const struct __ns1__test_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__test_(struct soap*, const char*, int, const struct __ns1__test_ *, const char*);
SOAP_FMAC3 struct __ns1__test_ * SOAP_FMAC4 soap_in___ns1__test_(struct soap*, const char*, struct __ns1__test_ *, const char*);
SOAP_FMAC1 struct __ns1__test_ * SOAP_FMAC2 soap_instantiate___ns1__test_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__test_ * soap_new___ns1__test_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__test_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__test_ * soap_new_req___ns1__test_(
	struct soap *soap)
{
	struct __ns1__test_ *_p = soap_new___ns1__test_(soap);
	if (_p)
	{	soap_default___ns1__test_(soap, _p);
	}
	return _p;
}

inline struct __ns1__test_ * soap_new_set___ns1__test_(
	struct soap *soap,
	_ns1__test *ns1__test)
{
	struct __ns1__test_ *_p = soap_new___ns1__test_(soap);
	if (_p)
	{	soap_default___ns1__test_(soap, _p);
		_p->ns1__test = ns1__test;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__test_(struct soap*, const struct __ns1__test_ *, const char*, const char*);

inline int soap_write___ns1__test_(struct soap *soap, struct __ns1__test_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__test_(soap, p), 0) || soap_put___ns1__test_(soap, p, "-ns1:test", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__test_(struct soap *soap, const char *URL, struct __ns1__test_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__test_(soap, p), 0) || soap_put___ns1__test_(soap, p, "-ns1:test", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__test_(struct soap *soap, const char *URL, struct __ns1__test_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__test_(soap, p), 0) || soap_put___ns1__test_(soap, p, "-ns1:test", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__test_ * SOAP_FMAC4 soap_get___ns1__test_(struct soap*, struct __ns1__test_ *, const char*, const char*);

inline int soap_read___ns1__test_(struct soap *soap, struct __ns1__test_ *p)
{
	if (p)
	{	soap_default___ns1__test_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__test_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__test_(struct soap *soap, const char *URL, struct __ns1__test_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__test_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__test_(struct soap *soap, struct __ns1__test_ *p)
{
	if (soap_read___ns1__test_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SaveSSN_USCORENEW__DEFINED
#define SOAP_TYPE___ns1__SaveSSN_USCORENEW__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SaveSSN_USCORENEW_(struct soap*, struct __ns1__SaveSSN_USCORENEW_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SaveSSN_USCORENEW_(struct soap*, const struct __ns1__SaveSSN_USCORENEW_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SaveSSN_USCORENEW_(struct soap*, const char*, int, const struct __ns1__SaveSSN_USCORENEW_ *, const char*);
SOAP_FMAC3 struct __ns1__SaveSSN_USCORENEW_ * SOAP_FMAC4 soap_in___ns1__SaveSSN_USCORENEW_(struct soap*, const char*, struct __ns1__SaveSSN_USCORENEW_ *, const char*);
SOAP_FMAC1 struct __ns1__SaveSSN_USCORENEW_ * SOAP_FMAC2 soap_instantiate___ns1__SaveSSN_USCORENEW_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SaveSSN_USCORENEW_ * soap_new___ns1__SaveSSN_USCORENEW_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SaveSSN_USCORENEW_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SaveSSN_USCORENEW_ * soap_new_req___ns1__SaveSSN_USCORENEW_(
	struct soap *soap)
{
	struct __ns1__SaveSSN_USCORENEW_ *_p = soap_new___ns1__SaveSSN_USCORENEW_(soap);
	if (_p)
	{	soap_default___ns1__SaveSSN_USCORENEW_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SaveSSN_USCORENEW_ * soap_new_set___ns1__SaveSSN_USCORENEW_(
	struct soap *soap,
	_ns1__SaveSSN_USCORENEW *ns1__SaveSSN_USCORENEW)
{
	struct __ns1__SaveSSN_USCORENEW_ *_p = soap_new___ns1__SaveSSN_USCORENEW_(soap);
	if (_p)
	{	soap_default___ns1__SaveSSN_USCORENEW_(soap, _p);
		_p->ns1__SaveSSN_USCORENEW = ns1__SaveSSN_USCORENEW;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SaveSSN_USCORENEW_(struct soap*, const struct __ns1__SaveSSN_USCORENEW_ *, const char*, const char*);

inline int soap_write___ns1__SaveSSN_USCORENEW_(struct soap *soap, struct __ns1__SaveSSN_USCORENEW_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SaveSSN_USCORENEW_(soap, p), 0) || soap_put___ns1__SaveSSN_USCORENEW_(soap, p, "-ns1:SaveSSN_NEW", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SaveSSN_USCORENEW_(struct soap *soap, const char *URL, struct __ns1__SaveSSN_USCORENEW_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SaveSSN_USCORENEW_(soap, p), 0) || soap_put___ns1__SaveSSN_USCORENEW_(soap, p, "-ns1:SaveSSN_NEW", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SaveSSN_USCORENEW_(struct soap *soap, const char *URL, struct __ns1__SaveSSN_USCORENEW_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SaveSSN_USCORENEW_(soap, p), 0) || soap_put___ns1__SaveSSN_USCORENEW_(soap, p, "-ns1:SaveSSN_NEW", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SaveSSN_USCORENEW_ * SOAP_FMAC4 soap_get___ns1__SaveSSN_USCORENEW_(struct soap*, struct __ns1__SaveSSN_USCORENEW_ *, const char*, const char*);

inline int soap_read___ns1__SaveSSN_USCORENEW_(struct soap *soap, struct __ns1__SaveSSN_USCORENEW_ *p)
{
	if (p)
	{	soap_default___ns1__SaveSSN_USCORENEW_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SaveSSN_USCORENEW_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SaveSSN_USCORENEW_(struct soap *soap, const char *URL, struct __ns1__SaveSSN_USCORENEW_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SaveSSN_USCORENEW_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SaveSSN_USCORENEW_(struct soap *soap, struct __ns1__SaveSSN_USCORENEW_ *p)
{
	if (soap_read___ns1__SaveSSN_USCORENEW_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SfcTestResult_USCOREUpload__DEFINED
#define SOAP_TYPE___ns1__SfcTestResult_USCOREUpload__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SfcTestResult_USCOREUpload_(struct soap*, struct __ns1__SfcTestResult_USCOREUpload_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SfcTestResult_USCOREUpload_(struct soap*, const struct __ns1__SfcTestResult_USCOREUpload_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SfcTestResult_USCOREUpload_(struct soap*, const char*, int, const struct __ns1__SfcTestResult_USCOREUpload_ *, const char*);
SOAP_FMAC3 struct __ns1__SfcTestResult_USCOREUpload_ * SOAP_FMAC4 soap_in___ns1__SfcTestResult_USCOREUpload_(struct soap*, const char*, struct __ns1__SfcTestResult_USCOREUpload_ *, const char*);
SOAP_FMAC1 struct __ns1__SfcTestResult_USCOREUpload_ * SOAP_FMAC2 soap_instantiate___ns1__SfcTestResult_USCOREUpload_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SfcTestResult_USCOREUpload_ * soap_new___ns1__SfcTestResult_USCOREUpload_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SfcTestResult_USCOREUpload_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SfcTestResult_USCOREUpload_ * soap_new_req___ns1__SfcTestResult_USCOREUpload_(
	struct soap *soap)
{
	struct __ns1__SfcTestResult_USCOREUpload_ *_p = soap_new___ns1__SfcTestResult_USCOREUpload_(soap);
	if (_p)
	{	soap_default___ns1__SfcTestResult_USCOREUpload_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SfcTestResult_USCOREUpload_ * soap_new_set___ns1__SfcTestResult_USCOREUpload_(
	struct soap *soap,
	_ns1__SfcTestResult_USCOREUpload *ns1__SfcTestResult_USCOREUpload)
{
	struct __ns1__SfcTestResult_USCOREUpload_ *_p = soap_new___ns1__SfcTestResult_USCOREUpload_(soap);
	if (_p)
	{	soap_default___ns1__SfcTestResult_USCOREUpload_(soap, _p);
		_p->ns1__SfcTestResult_USCOREUpload = ns1__SfcTestResult_USCOREUpload;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SfcTestResult_USCOREUpload_(struct soap*, const struct __ns1__SfcTestResult_USCOREUpload_ *, const char*, const char*);

inline int soap_write___ns1__SfcTestResult_USCOREUpload_(struct soap *soap, struct __ns1__SfcTestResult_USCOREUpload_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SfcTestResult_USCOREUpload_(soap, p), 0) || soap_put___ns1__SfcTestResult_USCOREUpload_(soap, p, "-ns1:SfcTestResult_Upload", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SfcTestResult_USCOREUpload_(struct soap *soap, const char *URL, struct __ns1__SfcTestResult_USCOREUpload_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SfcTestResult_USCOREUpload_(soap, p), 0) || soap_put___ns1__SfcTestResult_USCOREUpload_(soap, p, "-ns1:SfcTestResult_Upload", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SfcTestResult_USCOREUpload_(struct soap *soap, const char *URL, struct __ns1__SfcTestResult_USCOREUpload_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SfcTestResult_USCOREUpload_(soap, p), 0) || soap_put___ns1__SfcTestResult_USCOREUpload_(soap, p, "-ns1:SfcTestResult_Upload", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SfcTestResult_USCOREUpload_ * SOAP_FMAC4 soap_get___ns1__SfcTestResult_USCOREUpload_(struct soap*, struct __ns1__SfcTestResult_USCOREUpload_ *, const char*, const char*);

inline int soap_read___ns1__SfcTestResult_USCOREUpload_(struct soap *soap, struct __ns1__SfcTestResult_USCOREUpload_ *p)
{
	if (p)
	{	soap_default___ns1__SfcTestResult_USCOREUpload_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SfcTestResult_USCOREUpload_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SfcTestResult_USCOREUpload_(struct soap *soap, const char *URL, struct __ns1__SfcTestResult_USCOREUpload_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SfcTestResult_USCOREUpload_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SfcTestResult_USCOREUpload_(struct soap *soap, struct __ns1__SfcTestResult_USCOREUpload_ *p)
{
	if (soap_read___ns1__SfcTestResult_USCOREUpload_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__QueryBinding__DEFINED
#define SOAP_TYPE___ns1__QueryBinding__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QueryBinding_(struct soap*, struct __ns1__QueryBinding_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QueryBinding_(struct soap*, const struct __ns1__QueryBinding_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QueryBinding_(struct soap*, const char*, int, const struct __ns1__QueryBinding_ *, const char*);
SOAP_FMAC3 struct __ns1__QueryBinding_ * SOAP_FMAC4 soap_in___ns1__QueryBinding_(struct soap*, const char*, struct __ns1__QueryBinding_ *, const char*);
SOAP_FMAC1 struct __ns1__QueryBinding_ * SOAP_FMAC2 soap_instantiate___ns1__QueryBinding_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QueryBinding_ * soap_new___ns1__QueryBinding_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__QueryBinding_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__QueryBinding_ * soap_new_req___ns1__QueryBinding_(
	struct soap *soap)
{
	struct __ns1__QueryBinding_ *_p = soap_new___ns1__QueryBinding_(soap);
	if (_p)
	{	soap_default___ns1__QueryBinding_(soap, _p);
	}
	return _p;
}

inline struct __ns1__QueryBinding_ * soap_new_set___ns1__QueryBinding_(
	struct soap *soap,
	_ns1__QueryBinding *ns1__QueryBinding)
{
	struct __ns1__QueryBinding_ *_p = soap_new___ns1__QueryBinding_(soap);
	if (_p)
	{	soap_default___ns1__QueryBinding_(soap, _p);
		_p->ns1__QueryBinding = ns1__QueryBinding;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QueryBinding_(struct soap*, const struct __ns1__QueryBinding_ *, const char*, const char*);

inline int soap_write___ns1__QueryBinding_(struct soap *soap, struct __ns1__QueryBinding_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__QueryBinding_(soap, p), 0) || soap_put___ns1__QueryBinding_(soap, p, "-ns1:QueryBinding", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__QueryBinding_(struct soap *soap, const char *URL, struct __ns1__QueryBinding_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__QueryBinding_(soap, p), 0) || soap_put___ns1__QueryBinding_(soap, p, "-ns1:QueryBinding", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__QueryBinding_(struct soap *soap, const char *URL, struct __ns1__QueryBinding_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__QueryBinding_(soap, p), 0) || soap_put___ns1__QueryBinding_(soap, p, "-ns1:QueryBinding", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__QueryBinding_ * SOAP_FMAC4 soap_get___ns1__QueryBinding_(struct soap*, struct __ns1__QueryBinding_ *, const char*, const char*);

inline int soap_read___ns1__QueryBinding_(struct soap *soap, struct __ns1__QueryBinding_ *p)
{
	if (p)
	{	soap_default___ns1__QueryBinding_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__QueryBinding_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__QueryBinding_(struct soap *soap, const char *URL, struct __ns1__QueryBinding_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__QueryBinding_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__QueryBinding_(struct soap *soap, struct __ns1__QueryBinding_ *p)
{
	if (soap_read___ns1__QueryBinding_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__Binding__DEFINED
#define SOAP_TYPE___ns1__Binding__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Binding_(struct soap*, struct __ns1__Binding_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Binding_(struct soap*, const struct __ns1__Binding_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Binding_(struct soap*, const char*, int, const struct __ns1__Binding_ *, const char*);
SOAP_FMAC3 struct __ns1__Binding_ * SOAP_FMAC4 soap_in___ns1__Binding_(struct soap*, const char*, struct __ns1__Binding_ *, const char*);
SOAP_FMAC1 struct __ns1__Binding_ * SOAP_FMAC2 soap_instantiate___ns1__Binding_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Binding_ * soap_new___ns1__Binding_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Binding_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Binding_ * soap_new_req___ns1__Binding_(
	struct soap *soap)
{
	struct __ns1__Binding_ *_p = soap_new___ns1__Binding_(soap);
	if (_p)
	{	soap_default___ns1__Binding_(soap, _p);
	}
	return _p;
}

inline struct __ns1__Binding_ * soap_new_set___ns1__Binding_(
	struct soap *soap,
	_ns1__Binding *ns1__Binding)
{
	struct __ns1__Binding_ *_p = soap_new___ns1__Binding_(soap);
	if (_p)
	{	soap_default___ns1__Binding_(soap, _p);
		_p->ns1__Binding = ns1__Binding;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Binding_(struct soap*, const struct __ns1__Binding_ *, const char*, const char*);

inline int soap_write___ns1__Binding_(struct soap *soap, struct __ns1__Binding_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__Binding_(soap, p), 0) || soap_put___ns1__Binding_(soap, p, "-ns1:Binding", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Binding_(struct soap *soap, const char *URL, struct __ns1__Binding_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__Binding_(soap, p), 0) || soap_put___ns1__Binding_(soap, p, "-ns1:Binding", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Binding_(struct soap *soap, const char *URL, struct __ns1__Binding_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__Binding_(soap, p), 0) || soap_put___ns1__Binding_(soap, p, "-ns1:Binding", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Binding_ * SOAP_FMAC4 soap_get___ns1__Binding_(struct soap*, struct __ns1__Binding_ *, const char*, const char*);

inline int soap_read___ns1__Binding_(struct soap *soap, struct __ns1__Binding_ *p)
{
	if (p)
	{	soap_default___ns1__Binding_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__Binding_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Binding_(struct soap *soap, const char *URL, struct __ns1__Binding_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__Binding_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__Binding_(struct soap *soap, struct __ns1__Binding_ *p)
{
	if (soap_read___ns1__Binding_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CheckSSN_USCORENEW__DEFINED
#define SOAP_TYPE___ns1__CheckSSN_USCORENEW__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CheckSSN_USCORENEW_(struct soap*, struct __ns1__CheckSSN_USCORENEW_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CheckSSN_USCORENEW_(struct soap*, const struct __ns1__CheckSSN_USCORENEW_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CheckSSN_USCORENEW_(struct soap*, const char*, int, const struct __ns1__CheckSSN_USCORENEW_ *, const char*);
SOAP_FMAC3 struct __ns1__CheckSSN_USCORENEW_ * SOAP_FMAC4 soap_in___ns1__CheckSSN_USCORENEW_(struct soap*, const char*, struct __ns1__CheckSSN_USCORENEW_ *, const char*);
SOAP_FMAC1 struct __ns1__CheckSSN_USCORENEW_ * SOAP_FMAC2 soap_instantiate___ns1__CheckSSN_USCORENEW_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CheckSSN_USCORENEW_ * soap_new___ns1__CheckSSN_USCORENEW_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CheckSSN_USCORENEW_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CheckSSN_USCORENEW_ * soap_new_req___ns1__CheckSSN_USCORENEW_(
	struct soap *soap)
{
	struct __ns1__CheckSSN_USCORENEW_ *_p = soap_new___ns1__CheckSSN_USCORENEW_(soap);
	if (_p)
	{	soap_default___ns1__CheckSSN_USCORENEW_(soap, _p);
	}
	return _p;
}

inline struct __ns1__CheckSSN_USCORENEW_ * soap_new_set___ns1__CheckSSN_USCORENEW_(
	struct soap *soap,
	_ns1__CheckSSN_USCORENEW *ns1__CheckSSN_USCORENEW)
{
	struct __ns1__CheckSSN_USCORENEW_ *_p = soap_new___ns1__CheckSSN_USCORENEW_(soap);
	if (_p)
	{	soap_default___ns1__CheckSSN_USCORENEW_(soap, _p);
		_p->ns1__CheckSSN_USCORENEW = ns1__CheckSSN_USCORENEW;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CheckSSN_USCORENEW_(struct soap*, const struct __ns1__CheckSSN_USCORENEW_ *, const char*, const char*);

inline int soap_write___ns1__CheckSSN_USCORENEW_(struct soap *soap, struct __ns1__CheckSSN_USCORENEW_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CheckSSN_USCORENEW_(soap, p), 0) || soap_put___ns1__CheckSSN_USCORENEW_(soap, p, "-ns1:CheckSSN_NEW", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CheckSSN_USCORENEW_(struct soap *soap, const char *URL, struct __ns1__CheckSSN_USCORENEW_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CheckSSN_USCORENEW_(soap, p), 0) || soap_put___ns1__CheckSSN_USCORENEW_(soap, p, "-ns1:CheckSSN_NEW", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CheckSSN_USCORENEW_(struct soap *soap, const char *URL, struct __ns1__CheckSSN_USCORENEW_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CheckSSN_USCORENEW_(soap, p), 0) || soap_put___ns1__CheckSSN_USCORENEW_(soap, p, "-ns1:CheckSSN_NEW", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CheckSSN_USCORENEW_ * SOAP_FMAC4 soap_get___ns1__CheckSSN_USCORENEW_(struct soap*, struct __ns1__CheckSSN_USCORENEW_ *, const char*, const char*);

inline int soap_read___ns1__CheckSSN_USCORENEW_(struct soap *soap, struct __ns1__CheckSSN_USCORENEW_ *p)
{
	if (p)
	{	soap_default___ns1__CheckSSN_USCORENEW_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CheckSSN_USCORENEW_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CheckSSN_USCORENEW_(struct soap *soap, const char *URL, struct __ns1__CheckSSN_USCORENEW_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CheckSSN_USCORENEW_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CheckSSN_USCORENEW_(struct soap *soap, struct __ns1__CheckSSN_USCORENEW_ *p)
{
	if (soap_read___ns1__CheckSSN_USCORENEW_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CheckSSN__DEFINED
#define SOAP_TYPE___ns1__CheckSSN__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CheckSSN_(struct soap*, struct __ns1__CheckSSN_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CheckSSN_(struct soap*, const struct __ns1__CheckSSN_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CheckSSN_(struct soap*, const char*, int, const struct __ns1__CheckSSN_ *, const char*);
SOAP_FMAC3 struct __ns1__CheckSSN_ * SOAP_FMAC4 soap_in___ns1__CheckSSN_(struct soap*, const char*, struct __ns1__CheckSSN_ *, const char*);
SOAP_FMAC1 struct __ns1__CheckSSN_ * SOAP_FMAC2 soap_instantiate___ns1__CheckSSN_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CheckSSN_ * soap_new___ns1__CheckSSN_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CheckSSN_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CheckSSN_ * soap_new_req___ns1__CheckSSN_(
	struct soap *soap)
{
	struct __ns1__CheckSSN_ *_p = soap_new___ns1__CheckSSN_(soap);
	if (_p)
	{	soap_default___ns1__CheckSSN_(soap, _p);
	}
	return _p;
}

inline struct __ns1__CheckSSN_ * soap_new_set___ns1__CheckSSN_(
	struct soap *soap,
	_ns1__CheckSSN *ns1__CheckSSN)
{
	struct __ns1__CheckSSN_ *_p = soap_new___ns1__CheckSSN_(soap);
	if (_p)
	{	soap_default___ns1__CheckSSN_(soap, _p);
		_p->ns1__CheckSSN = ns1__CheckSSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CheckSSN_(struct soap*, const struct __ns1__CheckSSN_ *, const char*, const char*);

inline int soap_write___ns1__CheckSSN_(struct soap *soap, struct __ns1__CheckSSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CheckSSN_(soap, p), 0) || soap_put___ns1__CheckSSN_(soap, p, "-ns1:CheckSSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CheckSSN_(struct soap *soap, const char *URL, struct __ns1__CheckSSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CheckSSN_(soap, p), 0) || soap_put___ns1__CheckSSN_(soap, p, "-ns1:CheckSSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CheckSSN_(struct soap *soap, const char *URL, struct __ns1__CheckSSN_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CheckSSN_(soap, p), 0) || soap_put___ns1__CheckSSN_(soap, p, "-ns1:CheckSSN", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CheckSSN_ * SOAP_FMAC4 soap_get___ns1__CheckSSN_(struct soap*, struct __ns1__CheckSSN_ *, const char*, const char*);

inline int soap_read___ns1__CheckSSN_(struct soap *soap, struct __ns1__CheckSSN_ *p)
{
	if (p)
	{	soap_default___ns1__CheckSSN_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CheckSSN_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CheckSSN_(struct soap *soap, const char *URL, struct __ns1__CheckSSN_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CheckSSN_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CheckSSN_(struct soap *soap, struct __ns1__CheckSSN_ *p)
{
	if (soap_read___ns1__CheckSSN_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__UploadTestResult__DEFINED
#define SOAP_TYPE___ns1__UploadTestResult__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UploadTestResult_(struct soap*, struct __ns1__UploadTestResult_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UploadTestResult_(struct soap*, const struct __ns1__UploadTestResult_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UploadTestResult_(struct soap*, const char*, int, const struct __ns1__UploadTestResult_ *, const char*);
SOAP_FMAC3 struct __ns1__UploadTestResult_ * SOAP_FMAC4 soap_in___ns1__UploadTestResult_(struct soap*, const char*, struct __ns1__UploadTestResult_ *, const char*);
SOAP_FMAC1 struct __ns1__UploadTestResult_ * SOAP_FMAC2 soap_instantiate___ns1__UploadTestResult_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UploadTestResult_ * soap_new___ns1__UploadTestResult_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__UploadTestResult_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__UploadTestResult_ * soap_new_req___ns1__UploadTestResult_(
	struct soap *soap)
{
	struct __ns1__UploadTestResult_ *_p = soap_new___ns1__UploadTestResult_(soap);
	if (_p)
	{	soap_default___ns1__UploadTestResult_(soap, _p);
	}
	return _p;
}

inline struct __ns1__UploadTestResult_ * soap_new_set___ns1__UploadTestResult_(
	struct soap *soap,
	_ns1__UploadTestResult *ns1__UploadTestResult)
{
	struct __ns1__UploadTestResult_ *_p = soap_new___ns1__UploadTestResult_(soap);
	if (_p)
	{	soap_default___ns1__UploadTestResult_(soap, _p);
		_p->ns1__UploadTestResult = ns1__UploadTestResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UploadTestResult_(struct soap*, const struct __ns1__UploadTestResult_ *, const char*, const char*);

inline int soap_write___ns1__UploadTestResult_(struct soap *soap, struct __ns1__UploadTestResult_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__UploadTestResult_(soap, p), 0) || soap_put___ns1__UploadTestResult_(soap, p, "-ns1:UploadTestResult", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__UploadTestResult_(struct soap *soap, const char *URL, struct __ns1__UploadTestResult_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UploadTestResult_(soap, p), 0) || soap_put___ns1__UploadTestResult_(soap, p, "-ns1:UploadTestResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__UploadTestResult_(struct soap *soap, const char *URL, struct __ns1__UploadTestResult_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UploadTestResult_(soap, p), 0) || soap_put___ns1__UploadTestResult_(soap, p, "-ns1:UploadTestResult", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__UploadTestResult_ * SOAP_FMAC4 soap_get___ns1__UploadTestResult_(struct soap*, struct __ns1__UploadTestResult_ *, const char*, const char*);

inline int soap_read___ns1__UploadTestResult_(struct soap *soap, struct __ns1__UploadTestResult_ *p)
{
	if (p)
	{	soap_default___ns1__UploadTestResult_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__UploadTestResult_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__UploadTestResult_(struct soap *soap, const char *URL, struct __ns1__UploadTestResult_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__UploadTestResult_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__UploadTestResult_(struct soap *soap, struct __ns1__UploadTestResult_ *p)
{
	if (soap_read___ns1__UploadTestResult_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DoFunction__DEFINED
#define SOAP_TYPE___ns1__DoFunction__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DoFunction_(struct soap*, struct __ns1__DoFunction_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DoFunction_(struct soap*, const struct __ns1__DoFunction_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DoFunction_(struct soap*, const char*, int, const struct __ns1__DoFunction_ *, const char*);
SOAP_FMAC3 struct __ns1__DoFunction_ * SOAP_FMAC4 soap_in___ns1__DoFunction_(struct soap*, const char*, struct __ns1__DoFunction_ *, const char*);
SOAP_FMAC1 struct __ns1__DoFunction_ * SOAP_FMAC2 soap_instantiate___ns1__DoFunction_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DoFunction_ * soap_new___ns1__DoFunction_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DoFunction_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DoFunction_ * soap_new_req___ns1__DoFunction_(
	struct soap *soap)
{
	struct __ns1__DoFunction_ *_p = soap_new___ns1__DoFunction_(soap);
	if (_p)
	{	soap_default___ns1__DoFunction_(soap, _p);
	}
	return _p;
}

inline struct __ns1__DoFunction_ * soap_new_set___ns1__DoFunction_(
	struct soap *soap,
	_ns1__DoFunction *ns1__DoFunction)
{
	struct __ns1__DoFunction_ *_p = soap_new___ns1__DoFunction_(soap);
	if (_p)
	{	soap_default___ns1__DoFunction_(soap, _p);
		_p->ns1__DoFunction = ns1__DoFunction;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DoFunction_(struct soap*, const struct __ns1__DoFunction_ *, const char*, const char*);

inline int soap_write___ns1__DoFunction_(struct soap *soap, struct __ns1__DoFunction_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__DoFunction_(soap, p), 0) || soap_put___ns1__DoFunction_(soap, p, "-ns1:DoFunction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DoFunction_(struct soap *soap, const char *URL, struct __ns1__DoFunction_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoFunction_(soap, p), 0) || soap_put___ns1__DoFunction_(soap, p, "-ns1:DoFunction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DoFunction_(struct soap *soap, const char *URL, struct __ns1__DoFunction_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoFunction_(soap, p), 0) || soap_put___ns1__DoFunction_(soap, p, "-ns1:DoFunction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DoFunction_ * SOAP_FMAC4 soap_get___ns1__DoFunction_(struct soap*, struct __ns1__DoFunction_ *, const char*, const char*);

inline int soap_read___ns1__DoFunction_(struct soap *soap, struct __ns1__DoFunction_ *p)
{
	if (p)
	{	soap_default___ns1__DoFunction_(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__DoFunction_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DoFunction_(struct soap *soap, const char *URL, struct __ns1__DoFunction_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__DoFunction_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DoFunction_(struct soap *soap, struct __ns1__DoFunction_ *p)
{
	if (soap_read___ns1__DoFunction_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__BlindKeyNum_DEFINED
#define SOAP_TYPE___ns1__BlindKeyNum_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BlindKeyNum(struct soap*, struct __ns1__BlindKeyNum *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BlindKeyNum(struct soap*, const struct __ns1__BlindKeyNum *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BlindKeyNum(struct soap*, const char*, int, const struct __ns1__BlindKeyNum *, const char*);
SOAP_FMAC3 struct __ns1__BlindKeyNum * SOAP_FMAC4 soap_in___ns1__BlindKeyNum(struct soap*, const char*, struct __ns1__BlindKeyNum *, const char*);
SOAP_FMAC1 struct __ns1__BlindKeyNum * SOAP_FMAC2 soap_instantiate___ns1__BlindKeyNum(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BlindKeyNum * soap_new___ns1__BlindKeyNum(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BlindKeyNum(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BlindKeyNum * soap_new_req___ns1__BlindKeyNum(
	struct soap *soap)
{
	struct __ns1__BlindKeyNum *_p = soap_new___ns1__BlindKeyNum(soap);
	if (_p)
	{	soap_default___ns1__BlindKeyNum(soap, _p);
	}
	return _p;
}

inline struct __ns1__BlindKeyNum * soap_new_set___ns1__BlindKeyNum(
	struct soap *soap,
	_ns1__BlindKeyNum *ns1__BlindKeyNum)
{
	struct __ns1__BlindKeyNum *_p = soap_new___ns1__BlindKeyNum(soap);
	if (_p)
	{	soap_default___ns1__BlindKeyNum(soap, _p);
		_p->ns1__BlindKeyNum = ns1__BlindKeyNum;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BlindKeyNum(struct soap*, const struct __ns1__BlindKeyNum *, const char*, const char*);

inline int soap_write___ns1__BlindKeyNum(struct soap *soap, struct __ns1__BlindKeyNum const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__BlindKeyNum(soap, p), 0) || soap_put___ns1__BlindKeyNum(soap, p, "-ns1:BlindKeyNum", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BlindKeyNum(struct soap *soap, const char *URL, struct __ns1__BlindKeyNum const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BlindKeyNum(soap, p), 0) || soap_put___ns1__BlindKeyNum(soap, p, "-ns1:BlindKeyNum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BlindKeyNum(struct soap *soap, const char *URL, struct __ns1__BlindKeyNum const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BlindKeyNum(soap, p), 0) || soap_put___ns1__BlindKeyNum(soap, p, "-ns1:BlindKeyNum", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BlindKeyNum * SOAP_FMAC4 soap_get___ns1__BlindKeyNum(struct soap*, struct __ns1__BlindKeyNum *, const char*, const char*);

inline int soap_read___ns1__BlindKeyNum(struct soap *soap, struct __ns1__BlindKeyNum *p)
{
	if (p)
	{	soap_default___ns1__BlindKeyNum(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BlindKeyNum(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BlindKeyNum(struct soap *soap, const char *URL, struct __ns1__BlindKeyNum *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__BlindKeyNum(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__BlindKeyNum(struct soap *soap, struct __ns1__BlindKeyNum *p)
{
	if (soap_read___ns1__BlindKeyNum(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetSparrowCheckData_DEFINED
#define SOAP_TYPE___ns1__GetSparrowCheckData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetSparrowCheckData(struct soap*, struct __ns1__GetSparrowCheckData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetSparrowCheckData(struct soap*, const struct __ns1__GetSparrowCheckData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetSparrowCheckData(struct soap*, const char*, int, const struct __ns1__GetSparrowCheckData *, const char*);
SOAP_FMAC3 struct __ns1__GetSparrowCheckData * SOAP_FMAC4 soap_in___ns1__GetSparrowCheckData(struct soap*, const char*, struct __ns1__GetSparrowCheckData *, const char*);
SOAP_FMAC1 struct __ns1__GetSparrowCheckData * SOAP_FMAC2 soap_instantiate___ns1__GetSparrowCheckData(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetSparrowCheckData * soap_new___ns1__GetSparrowCheckData(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetSparrowCheckData(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetSparrowCheckData * soap_new_req___ns1__GetSparrowCheckData(
	struct soap *soap)
{
	struct __ns1__GetSparrowCheckData *_p = soap_new___ns1__GetSparrowCheckData(soap);
	if (_p)
	{	soap_default___ns1__GetSparrowCheckData(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetSparrowCheckData * soap_new_set___ns1__GetSparrowCheckData(
	struct soap *soap,
	_ns1__GetSparrowCheckData *ns1__GetSparrowCheckData)
{
	struct __ns1__GetSparrowCheckData *_p = soap_new___ns1__GetSparrowCheckData(soap);
	if (_p)
	{	soap_default___ns1__GetSparrowCheckData(soap, _p);
		_p->ns1__GetSparrowCheckData = ns1__GetSparrowCheckData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetSparrowCheckData(struct soap*, const struct __ns1__GetSparrowCheckData *, const char*, const char*);

inline int soap_write___ns1__GetSparrowCheckData(struct soap *soap, struct __ns1__GetSparrowCheckData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetSparrowCheckData(soap, p), 0) || soap_put___ns1__GetSparrowCheckData(soap, p, "-ns1:GetSparrowCheckData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetSparrowCheckData(struct soap *soap, const char *URL, struct __ns1__GetSparrowCheckData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetSparrowCheckData(soap, p), 0) || soap_put___ns1__GetSparrowCheckData(soap, p, "-ns1:GetSparrowCheckData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetSparrowCheckData(struct soap *soap, const char *URL, struct __ns1__GetSparrowCheckData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetSparrowCheckData(soap, p), 0) || soap_put___ns1__GetSparrowCheckData(soap, p, "-ns1:GetSparrowCheckData", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetSparrowCheckData * SOAP_FMAC4 soap_get___ns1__GetSparrowCheckData(struct soap*, struct __ns1__GetSparrowCheckData *, const char*, const char*);

inline int soap_read___ns1__GetSparrowCheckData(struct soap *soap, struct __ns1__GetSparrowCheckData *p)
{
	if (p)
	{	soap_default___ns1__GetSparrowCheckData(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetSparrowCheckData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetSparrowCheckData(struct soap *soap, const char *URL, struct __ns1__GetSparrowCheckData *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetSparrowCheckData(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetSparrowCheckData(struct soap *soap, struct __ns1__GetSparrowCheckData *p)
{
	if (soap_read___ns1__GetSparrowCheckData(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__BindKey_DEFINED
#define SOAP_TYPE___ns1__BindKey_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BindKey(struct soap*, struct __ns1__BindKey *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BindKey(struct soap*, const struct __ns1__BindKey *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BindKey(struct soap*, const char*, int, const struct __ns1__BindKey *, const char*);
SOAP_FMAC3 struct __ns1__BindKey * SOAP_FMAC4 soap_in___ns1__BindKey(struct soap*, const char*, struct __ns1__BindKey *, const char*);
SOAP_FMAC1 struct __ns1__BindKey * SOAP_FMAC2 soap_instantiate___ns1__BindKey(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BindKey * soap_new___ns1__BindKey(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BindKey(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BindKey * soap_new_req___ns1__BindKey(
	struct soap *soap)
{
	struct __ns1__BindKey *_p = soap_new___ns1__BindKey(soap);
	if (_p)
	{	soap_default___ns1__BindKey(soap, _p);
	}
	return _p;
}

inline struct __ns1__BindKey * soap_new_set___ns1__BindKey(
	struct soap *soap,
	_ns1__BindKey *ns1__BindKey)
{
	struct __ns1__BindKey *_p = soap_new___ns1__BindKey(soap);
	if (_p)
	{	soap_default___ns1__BindKey(soap, _p);
		_p->ns1__BindKey = ns1__BindKey;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BindKey(struct soap*, const struct __ns1__BindKey *, const char*, const char*);

inline int soap_write___ns1__BindKey(struct soap *soap, struct __ns1__BindKey const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__BindKey(soap, p), 0) || soap_put___ns1__BindKey(soap, p, "-ns1:BindKey", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__BindKey(struct soap *soap, const char *URL, struct __ns1__BindKey const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BindKey(soap, p), 0) || soap_put___ns1__BindKey(soap, p, "-ns1:BindKey", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__BindKey(struct soap *soap, const char *URL, struct __ns1__BindKey const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__BindKey(soap, p), 0) || soap_put___ns1__BindKey(soap, p, "-ns1:BindKey", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BindKey * SOAP_FMAC4 soap_get___ns1__BindKey(struct soap*, struct __ns1__BindKey *, const char*, const char*);

inline int soap_read___ns1__BindKey(struct soap *soap, struct __ns1__BindKey *p)
{
	if (p)
	{	soap_default___ns1__BindKey(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BindKey(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__BindKey(struct soap *soap, const char *URL, struct __ns1__BindKey *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__BindKey(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__BindKey(struct soap *soap, struct __ns1__BindKey *p)
{
	if (soap_read___ns1__BindKey(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ReleaseKey_DEFINED
#define SOAP_TYPE___ns1__ReleaseKey_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ReleaseKey(struct soap*, struct __ns1__ReleaseKey *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ReleaseKey(struct soap*, const struct __ns1__ReleaseKey *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ReleaseKey(struct soap*, const char*, int, const struct __ns1__ReleaseKey *, const char*);
SOAP_FMAC3 struct __ns1__ReleaseKey * SOAP_FMAC4 soap_in___ns1__ReleaseKey(struct soap*, const char*, struct __ns1__ReleaseKey *, const char*);
SOAP_FMAC1 struct __ns1__ReleaseKey * SOAP_FMAC2 soap_instantiate___ns1__ReleaseKey(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ReleaseKey * soap_new___ns1__ReleaseKey(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ReleaseKey(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ReleaseKey * soap_new_req___ns1__ReleaseKey(
	struct soap *soap)
{
	struct __ns1__ReleaseKey *_p = soap_new___ns1__ReleaseKey(soap);
	if (_p)
	{	soap_default___ns1__ReleaseKey(soap, _p);
	}
	return _p;
}

inline struct __ns1__ReleaseKey * soap_new_set___ns1__ReleaseKey(
	struct soap *soap,
	_ns1__ReleaseKey *ns1__ReleaseKey)
{
	struct __ns1__ReleaseKey *_p = soap_new___ns1__ReleaseKey(soap);
	if (_p)
	{	soap_default___ns1__ReleaseKey(soap, _p);
		_p->ns1__ReleaseKey = ns1__ReleaseKey;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ReleaseKey(struct soap*, const struct __ns1__ReleaseKey *, const char*, const char*);

inline int soap_write___ns1__ReleaseKey(struct soap *soap, struct __ns1__ReleaseKey const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__ReleaseKey(soap, p), 0) || soap_put___ns1__ReleaseKey(soap, p, "-ns1:ReleaseKey", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ReleaseKey(struct soap *soap, const char *URL, struct __ns1__ReleaseKey const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ReleaseKey(soap, p), 0) || soap_put___ns1__ReleaseKey(soap, p, "-ns1:ReleaseKey", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ReleaseKey(struct soap *soap, const char *URL, struct __ns1__ReleaseKey const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__ReleaseKey(soap, p), 0) || soap_put___ns1__ReleaseKey(soap, p, "-ns1:ReleaseKey", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ReleaseKey * SOAP_FMAC4 soap_get___ns1__ReleaseKey(struct soap*, struct __ns1__ReleaseKey *, const char*, const char*);

inline int soap_read___ns1__ReleaseKey(struct soap *soap, struct __ns1__ReleaseKey *p)
{
	if (p)
	{	soap_default___ns1__ReleaseKey(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__ReleaseKey(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ReleaseKey(struct soap *soap, const char *URL, struct __ns1__ReleaseKey *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__ReleaseKey(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ReleaseKey(struct soap *soap, struct __ns1__ReleaseKey *p)
{
	if (soap_read___ns1__ReleaseKey(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetShaoluKey_DEFINED
#define SOAP_TYPE___ns1__GetShaoluKey_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetShaoluKey(struct soap*, struct __ns1__GetShaoluKey *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetShaoluKey(struct soap*, const struct __ns1__GetShaoluKey *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetShaoluKey(struct soap*, const char*, int, const struct __ns1__GetShaoluKey *, const char*);
SOAP_FMAC3 struct __ns1__GetShaoluKey * SOAP_FMAC4 soap_in___ns1__GetShaoluKey(struct soap*, const char*, struct __ns1__GetShaoluKey *, const char*);
SOAP_FMAC1 struct __ns1__GetShaoluKey * SOAP_FMAC2 soap_instantiate___ns1__GetShaoluKey(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetShaoluKey * soap_new___ns1__GetShaoluKey(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetShaoluKey(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetShaoluKey * soap_new_req___ns1__GetShaoluKey(
	struct soap *soap)
{
	struct __ns1__GetShaoluKey *_p = soap_new___ns1__GetShaoluKey(soap);
	if (_p)
	{	soap_default___ns1__GetShaoluKey(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetShaoluKey * soap_new_set___ns1__GetShaoluKey(
	struct soap *soap,
	_ns1__GetShaoluKey *ns1__GetShaoluKey)
{
	struct __ns1__GetShaoluKey *_p = soap_new___ns1__GetShaoluKey(soap);
	if (_p)
	{	soap_default___ns1__GetShaoluKey(soap, _p);
		_p->ns1__GetShaoluKey = ns1__GetShaoluKey;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetShaoluKey(struct soap*, const struct __ns1__GetShaoluKey *, const char*, const char*);

inline int soap_write___ns1__GetShaoluKey(struct soap *soap, struct __ns1__GetShaoluKey const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetShaoluKey(soap, p), 0) || soap_put___ns1__GetShaoluKey(soap, p, "-ns1:GetShaoluKey", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetShaoluKey(struct soap *soap, const char *URL, struct __ns1__GetShaoluKey const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShaoluKey(soap, p), 0) || soap_put___ns1__GetShaoluKey(soap, p, "-ns1:GetShaoluKey", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetShaoluKey(struct soap *soap, const char *URL, struct __ns1__GetShaoluKey const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetShaoluKey(soap, p), 0) || soap_put___ns1__GetShaoluKey(soap, p, "-ns1:GetShaoluKey", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetShaoluKey * SOAP_FMAC4 soap_get___ns1__GetShaoluKey(struct soap*, struct __ns1__GetShaoluKey *, const char*, const char*);

inline int soap_read___ns1__GetShaoluKey(struct soap *soap, struct __ns1__GetShaoluKey *p)
{
	if (p)
	{	soap_default___ns1__GetShaoluKey(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetShaoluKey(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetShaoluKey(struct soap *soap, const char *URL, struct __ns1__GetShaoluKey *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetShaoluKey(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetShaoluKey(struct soap *soap, struct __ns1__GetShaoluKey *p)
{
	if (soap_read___ns1__GetShaoluKey(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__PCBData_USCOREUpload_DEFINED
#define SOAP_TYPE___ns1__PCBData_USCOREUpload_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__PCBData_USCOREUpload(struct soap*, struct __ns1__PCBData_USCOREUpload *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__PCBData_USCOREUpload(struct soap*, const struct __ns1__PCBData_USCOREUpload *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__PCBData_USCOREUpload(struct soap*, const char*, int, const struct __ns1__PCBData_USCOREUpload *, const char*);
SOAP_FMAC3 struct __ns1__PCBData_USCOREUpload * SOAP_FMAC4 soap_in___ns1__PCBData_USCOREUpload(struct soap*, const char*, struct __ns1__PCBData_USCOREUpload *, const char*);
SOAP_FMAC1 struct __ns1__PCBData_USCOREUpload * SOAP_FMAC2 soap_instantiate___ns1__PCBData_USCOREUpload(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__PCBData_USCOREUpload * soap_new___ns1__PCBData_USCOREUpload(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__PCBData_USCOREUpload(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__PCBData_USCOREUpload * soap_new_req___ns1__PCBData_USCOREUpload(
	struct soap *soap)
{
	struct __ns1__PCBData_USCOREUpload *_p = soap_new___ns1__PCBData_USCOREUpload(soap);
	if (_p)
	{	soap_default___ns1__PCBData_USCOREUpload(soap, _p);
	}
	return _p;
}

inline struct __ns1__PCBData_USCOREUpload * soap_new_set___ns1__PCBData_USCOREUpload(
	struct soap *soap,
	_ns1__PCBData_USCOREUpload *ns1__PCBData_USCOREUpload)
{
	struct __ns1__PCBData_USCOREUpload *_p = soap_new___ns1__PCBData_USCOREUpload(soap);
	if (_p)
	{	soap_default___ns1__PCBData_USCOREUpload(soap, _p);
		_p->ns1__PCBData_USCOREUpload = ns1__PCBData_USCOREUpload;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__PCBData_USCOREUpload(struct soap*, const struct __ns1__PCBData_USCOREUpload *, const char*, const char*);

inline int soap_write___ns1__PCBData_USCOREUpload(struct soap *soap, struct __ns1__PCBData_USCOREUpload const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__PCBData_USCOREUpload(soap, p), 0) || soap_put___ns1__PCBData_USCOREUpload(soap, p, "-ns1:PCBData_Upload", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__PCBData_USCOREUpload(struct soap *soap, const char *URL, struct __ns1__PCBData_USCOREUpload const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__PCBData_USCOREUpload(soap, p), 0) || soap_put___ns1__PCBData_USCOREUpload(soap, p, "-ns1:PCBData_Upload", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__PCBData_USCOREUpload(struct soap *soap, const char *URL, struct __ns1__PCBData_USCOREUpload const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__PCBData_USCOREUpload(soap, p), 0) || soap_put___ns1__PCBData_USCOREUpload(soap, p, "-ns1:PCBData_Upload", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__PCBData_USCOREUpload * SOAP_FMAC4 soap_get___ns1__PCBData_USCOREUpload(struct soap*, struct __ns1__PCBData_USCOREUpload *, const char*, const char*);

inline int soap_read___ns1__PCBData_USCOREUpload(struct soap *soap, struct __ns1__PCBData_USCOREUpload *p)
{
	if (p)
	{	soap_default___ns1__PCBData_USCOREUpload(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__PCBData_USCOREUpload(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__PCBData_USCOREUpload(struct soap *soap, const char *URL, struct __ns1__PCBData_USCOREUpload *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__PCBData_USCOREUpload(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__PCBData_USCOREUpload(struct soap *soap, struct __ns1__PCBData_USCOREUpload *p)
{
	if (soap_read___ns1__PCBData_USCOREUpload(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CartonWeight_USCOREUpload_DEFINED
#define SOAP_TYPE___ns1__CartonWeight_USCOREUpload_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CartonWeight_USCOREUpload(struct soap*, struct __ns1__CartonWeight_USCOREUpload *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CartonWeight_USCOREUpload(struct soap*, const struct __ns1__CartonWeight_USCOREUpload *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CartonWeight_USCOREUpload(struct soap*, const char*, int, const struct __ns1__CartonWeight_USCOREUpload *, const char*);
SOAP_FMAC3 struct __ns1__CartonWeight_USCOREUpload * SOAP_FMAC4 soap_in___ns1__CartonWeight_USCOREUpload(struct soap*, const char*, struct __ns1__CartonWeight_USCOREUpload *, const char*);
SOAP_FMAC1 struct __ns1__CartonWeight_USCOREUpload * SOAP_FMAC2 soap_instantiate___ns1__CartonWeight_USCOREUpload(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CartonWeight_USCOREUpload * soap_new___ns1__CartonWeight_USCOREUpload(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CartonWeight_USCOREUpload(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CartonWeight_USCOREUpload * soap_new_req___ns1__CartonWeight_USCOREUpload(
	struct soap *soap)
{
	struct __ns1__CartonWeight_USCOREUpload *_p = soap_new___ns1__CartonWeight_USCOREUpload(soap);
	if (_p)
	{	soap_default___ns1__CartonWeight_USCOREUpload(soap, _p);
	}
	return _p;
}

inline struct __ns1__CartonWeight_USCOREUpload * soap_new_set___ns1__CartonWeight_USCOREUpload(
	struct soap *soap,
	_ns1__CartonWeight_USCOREUpload *ns1__CartonWeight_USCOREUpload)
{
	struct __ns1__CartonWeight_USCOREUpload *_p = soap_new___ns1__CartonWeight_USCOREUpload(soap);
	if (_p)
	{	soap_default___ns1__CartonWeight_USCOREUpload(soap, _p);
		_p->ns1__CartonWeight_USCOREUpload = ns1__CartonWeight_USCOREUpload;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CartonWeight_USCOREUpload(struct soap*, const struct __ns1__CartonWeight_USCOREUpload *, const char*, const char*);

inline int soap_write___ns1__CartonWeight_USCOREUpload(struct soap *soap, struct __ns1__CartonWeight_USCOREUpload const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CartonWeight_USCOREUpload(soap, p), 0) || soap_put___ns1__CartonWeight_USCOREUpload(soap, p, "-ns1:CartonWeight_Upload", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CartonWeight_USCOREUpload(struct soap *soap, const char *URL, struct __ns1__CartonWeight_USCOREUpload const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CartonWeight_USCOREUpload(soap, p), 0) || soap_put___ns1__CartonWeight_USCOREUpload(soap, p, "-ns1:CartonWeight_Upload", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CartonWeight_USCOREUpload(struct soap *soap, const char *URL, struct __ns1__CartonWeight_USCOREUpload const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CartonWeight_USCOREUpload(soap, p), 0) || soap_put___ns1__CartonWeight_USCOREUpload(soap, p, "-ns1:CartonWeight_Upload", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CartonWeight_USCOREUpload * SOAP_FMAC4 soap_get___ns1__CartonWeight_USCOREUpload(struct soap*, struct __ns1__CartonWeight_USCOREUpload *, const char*, const char*);

inline int soap_read___ns1__CartonWeight_USCOREUpload(struct soap *soap, struct __ns1__CartonWeight_USCOREUpload *p)
{
	if (p)
	{	soap_default___ns1__CartonWeight_USCOREUpload(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CartonWeight_USCOREUpload(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CartonWeight_USCOREUpload(struct soap *soap, const char *URL, struct __ns1__CartonWeight_USCOREUpload *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CartonWeight_USCOREUpload(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CartonWeight_USCOREUpload(struct soap *soap, struct __ns1__CartonWeight_USCOREUpload *p)
{
	if (soap_read___ns1__CartonWeight_USCOREUpload(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetMacBySn_DEFINED
#define SOAP_TYPE___ns1__GetMacBySn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetMacBySn(struct soap*, struct __ns1__GetMacBySn *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetMacBySn(struct soap*, const struct __ns1__GetMacBySn *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetMacBySn(struct soap*, const char*, int, const struct __ns1__GetMacBySn *, const char*);
SOAP_FMAC3 struct __ns1__GetMacBySn * SOAP_FMAC4 soap_in___ns1__GetMacBySn(struct soap*, const char*, struct __ns1__GetMacBySn *, const char*);
SOAP_FMAC1 struct __ns1__GetMacBySn * SOAP_FMAC2 soap_instantiate___ns1__GetMacBySn(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetMacBySn * soap_new___ns1__GetMacBySn(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetMacBySn(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetMacBySn * soap_new_req___ns1__GetMacBySn(
	struct soap *soap)
{
	struct __ns1__GetMacBySn *_p = soap_new___ns1__GetMacBySn(soap);
	if (_p)
	{	soap_default___ns1__GetMacBySn(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetMacBySn * soap_new_set___ns1__GetMacBySn(
	struct soap *soap,
	_ns1__GetMacBySn *ns1__GetMacBySn)
{
	struct __ns1__GetMacBySn *_p = soap_new___ns1__GetMacBySn(soap);
	if (_p)
	{	soap_default___ns1__GetMacBySn(soap, _p);
		_p->ns1__GetMacBySn = ns1__GetMacBySn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetMacBySn(struct soap*, const struct __ns1__GetMacBySn *, const char*, const char*);

inline int soap_write___ns1__GetMacBySn(struct soap *soap, struct __ns1__GetMacBySn const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GetMacBySn(soap, p), 0) || soap_put___ns1__GetMacBySn(soap, p, "-ns1:GetMacBySn", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetMacBySn(struct soap *soap, const char *URL, struct __ns1__GetMacBySn const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetMacBySn(soap, p), 0) || soap_put___ns1__GetMacBySn(soap, p, "-ns1:GetMacBySn", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetMacBySn(struct soap *soap, const char *URL, struct __ns1__GetMacBySn const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GetMacBySn(soap, p), 0) || soap_put___ns1__GetMacBySn(soap, p, "-ns1:GetMacBySn", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetMacBySn * SOAP_FMAC4 soap_get___ns1__GetMacBySn(struct soap*, struct __ns1__GetMacBySn *, const char*, const char*);

inline int soap_read___ns1__GetMacBySn(struct soap *soap, struct __ns1__GetMacBySn *p)
{
	if (p)
	{	soap_default___ns1__GetMacBySn(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetMacBySn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetMacBySn(struct soap *soap, const char *URL, struct __ns1__GetMacBySn *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GetMacBySn(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetMacBySn(struct soap *soap, struct __ns1__GetMacBySn *p)
{
	if (soap_read___ns1__GetMacBySn(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GETMACID_DEFINED
#define SOAP_TYPE___ns1__GETMACID_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GETMACID(struct soap*, struct __ns1__GETMACID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GETMACID(struct soap*, const struct __ns1__GETMACID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GETMACID(struct soap*, const char*, int, const struct __ns1__GETMACID *, const char*);
SOAP_FMAC3 struct __ns1__GETMACID * SOAP_FMAC4 soap_in___ns1__GETMACID(struct soap*, const char*, struct __ns1__GETMACID *, const char*);
SOAP_FMAC1 struct __ns1__GETMACID * SOAP_FMAC2 soap_instantiate___ns1__GETMACID(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GETMACID * soap_new___ns1__GETMACID(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GETMACID(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GETMACID * soap_new_req___ns1__GETMACID(
	struct soap *soap)
{
	struct __ns1__GETMACID *_p = soap_new___ns1__GETMACID(soap);
	if (_p)
	{	soap_default___ns1__GETMACID(soap, _p);
	}
	return _p;
}

inline struct __ns1__GETMACID * soap_new_set___ns1__GETMACID(
	struct soap *soap,
	_ns1__GETMACID *ns1__GETMACID)
{
	struct __ns1__GETMACID *_p = soap_new___ns1__GETMACID(soap);
	if (_p)
	{	soap_default___ns1__GETMACID(soap, _p);
		_p->ns1__GETMACID = ns1__GETMACID;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GETMACID(struct soap*, const struct __ns1__GETMACID *, const char*, const char*);

inline int soap_write___ns1__GETMACID(struct soap *soap, struct __ns1__GETMACID const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__GETMACID(soap, p), 0) || soap_put___ns1__GETMACID(soap, p, "-ns1:GETMACID", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GETMACID(struct soap *soap, const char *URL, struct __ns1__GETMACID const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GETMACID(soap, p), 0) || soap_put___ns1__GETMACID(soap, p, "-ns1:GETMACID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GETMACID(struct soap *soap, const char *URL, struct __ns1__GETMACID const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__GETMACID(soap, p), 0) || soap_put___ns1__GETMACID(soap, p, "-ns1:GETMACID", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GETMACID * SOAP_FMAC4 soap_get___ns1__GETMACID(struct soap*, struct __ns1__GETMACID *, const char*, const char*);

inline int soap_read___ns1__GETMACID(struct soap *soap, struct __ns1__GETMACID *p)
{
	if (p)
	{	soap_default___ns1__GETMACID(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GETMACID(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GETMACID(struct soap *soap, const char *URL, struct __ns1__GETMACID *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__GETMACID(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GETMACID(struct soap *soap, struct __ns1__GETMACID *p)
{
	if (soap_read___ns1__GETMACID(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__test_DEFINED
#define SOAP_TYPE___ns1__test_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__test(struct soap*, struct __ns1__test *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__test(struct soap*, const struct __ns1__test *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__test(struct soap*, const char*, int, const struct __ns1__test *, const char*);
SOAP_FMAC3 struct __ns1__test * SOAP_FMAC4 soap_in___ns1__test(struct soap*, const char*, struct __ns1__test *, const char*);
SOAP_FMAC1 struct __ns1__test * SOAP_FMAC2 soap_instantiate___ns1__test(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__test * soap_new___ns1__test(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__test(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__test * soap_new_req___ns1__test(
	struct soap *soap)
{
	struct __ns1__test *_p = soap_new___ns1__test(soap);
	if (_p)
	{	soap_default___ns1__test(soap, _p);
	}
	return _p;
}

inline struct __ns1__test * soap_new_set___ns1__test(
	struct soap *soap,
	_ns1__test *ns1__test)
{
	struct __ns1__test *_p = soap_new___ns1__test(soap);
	if (_p)
	{	soap_default___ns1__test(soap, _p);
		_p->ns1__test = ns1__test;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__test(struct soap*, const struct __ns1__test *, const char*, const char*);

inline int soap_write___ns1__test(struct soap *soap, struct __ns1__test const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__test(soap, p), 0) || soap_put___ns1__test(soap, p, "-ns1:test", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__test(struct soap *soap, const char *URL, struct __ns1__test const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__test(soap, p), 0) || soap_put___ns1__test(soap, p, "-ns1:test", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__test(struct soap *soap, const char *URL, struct __ns1__test const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__test(soap, p), 0) || soap_put___ns1__test(soap, p, "-ns1:test", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__test * SOAP_FMAC4 soap_get___ns1__test(struct soap*, struct __ns1__test *, const char*, const char*);

inline int soap_read___ns1__test(struct soap *soap, struct __ns1__test *p)
{
	if (p)
	{	soap_default___ns1__test(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__test(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__test(struct soap *soap, const char *URL, struct __ns1__test *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__test(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__test(struct soap *soap, struct __ns1__test *p)
{
	if (soap_read___ns1__test(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SaveSSN_USCORENEW_DEFINED
#define SOAP_TYPE___ns1__SaveSSN_USCORENEW_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SaveSSN_USCORENEW(struct soap*, struct __ns1__SaveSSN_USCORENEW *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SaveSSN_USCORENEW(struct soap*, const struct __ns1__SaveSSN_USCORENEW *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SaveSSN_USCORENEW(struct soap*, const char*, int, const struct __ns1__SaveSSN_USCORENEW *, const char*);
SOAP_FMAC3 struct __ns1__SaveSSN_USCORENEW * SOAP_FMAC4 soap_in___ns1__SaveSSN_USCORENEW(struct soap*, const char*, struct __ns1__SaveSSN_USCORENEW *, const char*);
SOAP_FMAC1 struct __ns1__SaveSSN_USCORENEW * SOAP_FMAC2 soap_instantiate___ns1__SaveSSN_USCORENEW(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SaveSSN_USCORENEW * soap_new___ns1__SaveSSN_USCORENEW(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SaveSSN_USCORENEW(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SaveSSN_USCORENEW * soap_new_req___ns1__SaveSSN_USCORENEW(
	struct soap *soap)
{
	struct __ns1__SaveSSN_USCORENEW *_p = soap_new___ns1__SaveSSN_USCORENEW(soap);
	if (_p)
	{	soap_default___ns1__SaveSSN_USCORENEW(soap, _p);
	}
	return _p;
}

inline struct __ns1__SaveSSN_USCORENEW * soap_new_set___ns1__SaveSSN_USCORENEW(
	struct soap *soap,
	_ns1__SaveSSN_USCORENEW *ns1__SaveSSN_USCORENEW)
{
	struct __ns1__SaveSSN_USCORENEW *_p = soap_new___ns1__SaveSSN_USCORENEW(soap);
	if (_p)
	{	soap_default___ns1__SaveSSN_USCORENEW(soap, _p);
		_p->ns1__SaveSSN_USCORENEW = ns1__SaveSSN_USCORENEW;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SaveSSN_USCORENEW(struct soap*, const struct __ns1__SaveSSN_USCORENEW *, const char*, const char*);

inline int soap_write___ns1__SaveSSN_USCORENEW(struct soap *soap, struct __ns1__SaveSSN_USCORENEW const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SaveSSN_USCORENEW(soap, p), 0) || soap_put___ns1__SaveSSN_USCORENEW(soap, p, "-ns1:SaveSSN_NEW", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SaveSSN_USCORENEW(struct soap *soap, const char *URL, struct __ns1__SaveSSN_USCORENEW const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SaveSSN_USCORENEW(soap, p), 0) || soap_put___ns1__SaveSSN_USCORENEW(soap, p, "-ns1:SaveSSN_NEW", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SaveSSN_USCORENEW(struct soap *soap, const char *URL, struct __ns1__SaveSSN_USCORENEW const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SaveSSN_USCORENEW(soap, p), 0) || soap_put___ns1__SaveSSN_USCORENEW(soap, p, "-ns1:SaveSSN_NEW", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SaveSSN_USCORENEW * SOAP_FMAC4 soap_get___ns1__SaveSSN_USCORENEW(struct soap*, struct __ns1__SaveSSN_USCORENEW *, const char*, const char*);

inline int soap_read___ns1__SaveSSN_USCORENEW(struct soap *soap, struct __ns1__SaveSSN_USCORENEW *p)
{
	if (p)
	{	soap_default___ns1__SaveSSN_USCORENEW(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SaveSSN_USCORENEW(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SaveSSN_USCORENEW(struct soap *soap, const char *URL, struct __ns1__SaveSSN_USCORENEW *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SaveSSN_USCORENEW(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SaveSSN_USCORENEW(struct soap *soap, struct __ns1__SaveSSN_USCORENEW *p)
{
	if (soap_read___ns1__SaveSSN_USCORENEW(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SfcTestResult_USCOREUpload_DEFINED
#define SOAP_TYPE___ns1__SfcTestResult_USCOREUpload_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SfcTestResult_USCOREUpload(struct soap*, struct __ns1__SfcTestResult_USCOREUpload *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SfcTestResult_USCOREUpload(struct soap*, const struct __ns1__SfcTestResult_USCOREUpload *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SfcTestResult_USCOREUpload(struct soap*, const char*, int, const struct __ns1__SfcTestResult_USCOREUpload *, const char*);
SOAP_FMAC3 struct __ns1__SfcTestResult_USCOREUpload * SOAP_FMAC4 soap_in___ns1__SfcTestResult_USCOREUpload(struct soap*, const char*, struct __ns1__SfcTestResult_USCOREUpload *, const char*);
SOAP_FMAC1 struct __ns1__SfcTestResult_USCOREUpload * SOAP_FMAC2 soap_instantiate___ns1__SfcTestResult_USCOREUpload(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SfcTestResult_USCOREUpload * soap_new___ns1__SfcTestResult_USCOREUpload(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SfcTestResult_USCOREUpload(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SfcTestResult_USCOREUpload * soap_new_req___ns1__SfcTestResult_USCOREUpload(
	struct soap *soap)
{
	struct __ns1__SfcTestResult_USCOREUpload *_p = soap_new___ns1__SfcTestResult_USCOREUpload(soap);
	if (_p)
	{	soap_default___ns1__SfcTestResult_USCOREUpload(soap, _p);
	}
	return _p;
}

inline struct __ns1__SfcTestResult_USCOREUpload * soap_new_set___ns1__SfcTestResult_USCOREUpload(
	struct soap *soap,
	_ns1__SfcTestResult_USCOREUpload *ns1__SfcTestResult_USCOREUpload)
{
	struct __ns1__SfcTestResult_USCOREUpload *_p = soap_new___ns1__SfcTestResult_USCOREUpload(soap);
	if (_p)
	{	soap_default___ns1__SfcTestResult_USCOREUpload(soap, _p);
		_p->ns1__SfcTestResult_USCOREUpload = ns1__SfcTestResult_USCOREUpload;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SfcTestResult_USCOREUpload(struct soap*, const struct __ns1__SfcTestResult_USCOREUpload *, const char*, const char*);

inline int soap_write___ns1__SfcTestResult_USCOREUpload(struct soap *soap, struct __ns1__SfcTestResult_USCOREUpload const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__SfcTestResult_USCOREUpload(soap, p), 0) || soap_put___ns1__SfcTestResult_USCOREUpload(soap, p, "-ns1:SfcTestResult_Upload", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SfcTestResult_USCOREUpload(struct soap *soap, const char *URL, struct __ns1__SfcTestResult_USCOREUpload const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SfcTestResult_USCOREUpload(soap, p), 0) || soap_put___ns1__SfcTestResult_USCOREUpload(soap, p, "-ns1:SfcTestResult_Upload", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SfcTestResult_USCOREUpload(struct soap *soap, const char *URL, struct __ns1__SfcTestResult_USCOREUpload const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__SfcTestResult_USCOREUpload(soap, p), 0) || soap_put___ns1__SfcTestResult_USCOREUpload(soap, p, "-ns1:SfcTestResult_Upload", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SfcTestResult_USCOREUpload * SOAP_FMAC4 soap_get___ns1__SfcTestResult_USCOREUpload(struct soap*, struct __ns1__SfcTestResult_USCOREUpload *, const char*, const char*);

inline int soap_read___ns1__SfcTestResult_USCOREUpload(struct soap *soap, struct __ns1__SfcTestResult_USCOREUpload *p)
{
	if (p)
	{	soap_default___ns1__SfcTestResult_USCOREUpload(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SfcTestResult_USCOREUpload(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SfcTestResult_USCOREUpload(struct soap *soap, const char *URL, struct __ns1__SfcTestResult_USCOREUpload *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__SfcTestResult_USCOREUpload(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SfcTestResult_USCOREUpload(struct soap *soap, struct __ns1__SfcTestResult_USCOREUpload *p)
{
	if (soap_read___ns1__SfcTestResult_USCOREUpload(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__QueryBinding_DEFINED
#define SOAP_TYPE___ns1__QueryBinding_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QueryBinding(struct soap*, struct __ns1__QueryBinding *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QueryBinding(struct soap*, const struct __ns1__QueryBinding *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QueryBinding(struct soap*, const char*, int, const struct __ns1__QueryBinding *, const char*);
SOAP_FMAC3 struct __ns1__QueryBinding * SOAP_FMAC4 soap_in___ns1__QueryBinding(struct soap*, const char*, struct __ns1__QueryBinding *, const char*);
SOAP_FMAC1 struct __ns1__QueryBinding * SOAP_FMAC2 soap_instantiate___ns1__QueryBinding(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QueryBinding * soap_new___ns1__QueryBinding(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__QueryBinding(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__QueryBinding * soap_new_req___ns1__QueryBinding(
	struct soap *soap)
{
	struct __ns1__QueryBinding *_p = soap_new___ns1__QueryBinding(soap);
	if (_p)
	{	soap_default___ns1__QueryBinding(soap, _p);
	}
	return _p;
}

inline struct __ns1__QueryBinding * soap_new_set___ns1__QueryBinding(
	struct soap *soap,
	_ns1__QueryBinding *ns1__QueryBinding)
{
	struct __ns1__QueryBinding *_p = soap_new___ns1__QueryBinding(soap);
	if (_p)
	{	soap_default___ns1__QueryBinding(soap, _p);
		_p->ns1__QueryBinding = ns1__QueryBinding;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QueryBinding(struct soap*, const struct __ns1__QueryBinding *, const char*, const char*);

inline int soap_write___ns1__QueryBinding(struct soap *soap, struct __ns1__QueryBinding const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__QueryBinding(soap, p), 0) || soap_put___ns1__QueryBinding(soap, p, "-ns1:QueryBinding", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__QueryBinding(struct soap *soap, const char *URL, struct __ns1__QueryBinding const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__QueryBinding(soap, p), 0) || soap_put___ns1__QueryBinding(soap, p, "-ns1:QueryBinding", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__QueryBinding(struct soap *soap, const char *URL, struct __ns1__QueryBinding const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__QueryBinding(soap, p), 0) || soap_put___ns1__QueryBinding(soap, p, "-ns1:QueryBinding", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__QueryBinding * SOAP_FMAC4 soap_get___ns1__QueryBinding(struct soap*, struct __ns1__QueryBinding *, const char*, const char*);

inline int soap_read___ns1__QueryBinding(struct soap *soap, struct __ns1__QueryBinding *p)
{
	if (p)
	{	soap_default___ns1__QueryBinding(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__QueryBinding(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__QueryBinding(struct soap *soap, const char *URL, struct __ns1__QueryBinding *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__QueryBinding(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__QueryBinding(struct soap *soap, struct __ns1__QueryBinding *p)
{
	if (soap_read___ns1__QueryBinding(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__Binding_DEFINED
#define SOAP_TYPE___ns1__Binding_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Binding(struct soap*, struct __ns1__Binding *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Binding(struct soap*, const struct __ns1__Binding *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Binding(struct soap*, const char*, int, const struct __ns1__Binding *, const char*);
SOAP_FMAC3 struct __ns1__Binding * SOAP_FMAC4 soap_in___ns1__Binding(struct soap*, const char*, struct __ns1__Binding *, const char*);
SOAP_FMAC1 struct __ns1__Binding * SOAP_FMAC2 soap_instantiate___ns1__Binding(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Binding * soap_new___ns1__Binding(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Binding(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Binding * soap_new_req___ns1__Binding(
	struct soap *soap)
{
	struct __ns1__Binding *_p = soap_new___ns1__Binding(soap);
	if (_p)
	{	soap_default___ns1__Binding(soap, _p);
	}
	return _p;
}

inline struct __ns1__Binding * soap_new_set___ns1__Binding(
	struct soap *soap,
	_ns1__Binding *ns1__Binding)
{
	struct __ns1__Binding *_p = soap_new___ns1__Binding(soap);
	if (_p)
	{	soap_default___ns1__Binding(soap, _p);
		_p->ns1__Binding = ns1__Binding;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Binding(struct soap*, const struct __ns1__Binding *, const char*, const char*);

inline int soap_write___ns1__Binding(struct soap *soap, struct __ns1__Binding const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__Binding(soap, p), 0) || soap_put___ns1__Binding(soap, p, "-ns1:Binding", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Binding(struct soap *soap, const char *URL, struct __ns1__Binding const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__Binding(soap, p), 0) || soap_put___ns1__Binding(soap, p, "-ns1:Binding", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Binding(struct soap *soap, const char *URL, struct __ns1__Binding const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__Binding(soap, p), 0) || soap_put___ns1__Binding(soap, p, "-ns1:Binding", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Binding * SOAP_FMAC4 soap_get___ns1__Binding(struct soap*, struct __ns1__Binding *, const char*, const char*);

inline int soap_read___ns1__Binding(struct soap *soap, struct __ns1__Binding *p)
{
	if (p)
	{	soap_default___ns1__Binding(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__Binding(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Binding(struct soap *soap, const char *URL, struct __ns1__Binding *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__Binding(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__Binding(struct soap *soap, struct __ns1__Binding *p)
{
	if (soap_read___ns1__Binding(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CheckSSN_USCORENEW_DEFINED
#define SOAP_TYPE___ns1__CheckSSN_USCORENEW_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CheckSSN_USCORENEW(struct soap*, struct __ns1__CheckSSN_USCORENEW *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CheckSSN_USCORENEW(struct soap*, const struct __ns1__CheckSSN_USCORENEW *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CheckSSN_USCORENEW(struct soap*, const char*, int, const struct __ns1__CheckSSN_USCORENEW *, const char*);
SOAP_FMAC3 struct __ns1__CheckSSN_USCORENEW * SOAP_FMAC4 soap_in___ns1__CheckSSN_USCORENEW(struct soap*, const char*, struct __ns1__CheckSSN_USCORENEW *, const char*);
SOAP_FMAC1 struct __ns1__CheckSSN_USCORENEW * SOAP_FMAC2 soap_instantiate___ns1__CheckSSN_USCORENEW(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CheckSSN_USCORENEW * soap_new___ns1__CheckSSN_USCORENEW(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CheckSSN_USCORENEW(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CheckSSN_USCORENEW * soap_new_req___ns1__CheckSSN_USCORENEW(
	struct soap *soap)
{
	struct __ns1__CheckSSN_USCORENEW *_p = soap_new___ns1__CheckSSN_USCORENEW(soap);
	if (_p)
	{	soap_default___ns1__CheckSSN_USCORENEW(soap, _p);
	}
	return _p;
}

inline struct __ns1__CheckSSN_USCORENEW * soap_new_set___ns1__CheckSSN_USCORENEW(
	struct soap *soap,
	_ns1__CheckSSN_USCORENEW *ns1__CheckSSN_USCORENEW)
{
	struct __ns1__CheckSSN_USCORENEW *_p = soap_new___ns1__CheckSSN_USCORENEW(soap);
	if (_p)
	{	soap_default___ns1__CheckSSN_USCORENEW(soap, _p);
		_p->ns1__CheckSSN_USCORENEW = ns1__CheckSSN_USCORENEW;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CheckSSN_USCORENEW(struct soap*, const struct __ns1__CheckSSN_USCORENEW *, const char*, const char*);

inline int soap_write___ns1__CheckSSN_USCORENEW(struct soap *soap, struct __ns1__CheckSSN_USCORENEW const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CheckSSN_USCORENEW(soap, p), 0) || soap_put___ns1__CheckSSN_USCORENEW(soap, p, "-ns1:CheckSSN_NEW", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CheckSSN_USCORENEW(struct soap *soap, const char *URL, struct __ns1__CheckSSN_USCORENEW const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CheckSSN_USCORENEW(soap, p), 0) || soap_put___ns1__CheckSSN_USCORENEW(soap, p, "-ns1:CheckSSN_NEW", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CheckSSN_USCORENEW(struct soap *soap, const char *URL, struct __ns1__CheckSSN_USCORENEW const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CheckSSN_USCORENEW(soap, p), 0) || soap_put___ns1__CheckSSN_USCORENEW(soap, p, "-ns1:CheckSSN_NEW", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CheckSSN_USCORENEW * SOAP_FMAC4 soap_get___ns1__CheckSSN_USCORENEW(struct soap*, struct __ns1__CheckSSN_USCORENEW *, const char*, const char*);

inline int soap_read___ns1__CheckSSN_USCORENEW(struct soap *soap, struct __ns1__CheckSSN_USCORENEW *p)
{
	if (p)
	{	soap_default___ns1__CheckSSN_USCORENEW(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CheckSSN_USCORENEW(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CheckSSN_USCORENEW(struct soap *soap, const char *URL, struct __ns1__CheckSSN_USCORENEW *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CheckSSN_USCORENEW(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CheckSSN_USCORENEW(struct soap *soap, struct __ns1__CheckSSN_USCORENEW *p)
{
	if (soap_read___ns1__CheckSSN_USCORENEW(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CheckSSN_DEFINED
#define SOAP_TYPE___ns1__CheckSSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CheckSSN(struct soap*, struct __ns1__CheckSSN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CheckSSN(struct soap*, const struct __ns1__CheckSSN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CheckSSN(struct soap*, const char*, int, const struct __ns1__CheckSSN *, const char*);
SOAP_FMAC3 struct __ns1__CheckSSN * SOAP_FMAC4 soap_in___ns1__CheckSSN(struct soap*, const char*, struct __ns1__CheckSSN *, const char*);
SOAP_FMAC1 struct __ns1__CheckSSN * SOAP_FMAC2 soap_instantiate___ns1__CheckSSN(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CheckSSN * soap_new___ns1__CheckSSN(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CheckSSN(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CheckSSN * soap_new_req___ns1__CheckSSN(
	struct soap *soap)
{
	struct __ns1__CheckSSN *_p = soap_new___ns1__CheckSSN(soap);
	if (_p)
	{	soap_default___ns1__CheckSSN(soap, _p);
	}
	return _p;
}

inline struct __ns1__CheckSSN * soap_new_set___ns1__CheckSSN(
	struct soap *soap,
	_ns1__CheckSSN *ns1__CheckSSN)
{
	struct __ns1__CheckSSN *_p = soap_new___ns1__CheckSSN(soap);
	if (_p)
	{	soap_default___ns1__CheckSSN(soap, _p);
		_p->ns1__CheckSSN = ns1__CheckSSN;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CheckSSN(struct soap*, const struct __ns1__CheckSSN *, const char*, const char*);

inline int soap_write___ns1__CheckSSN(struct soap *soap, struct __ns1__CheckSSN const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__CheckSSN(soap, p), 0) || soap_put___ns1__CheckSSN(soap, p, "-ns1:CheckSSN", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CheckSSN(struct soap *soap, const char *URL, struct __ns1__CheckSSN const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CheckSSN(soap, p), 0) || soap_put___ns1__CheckSSN(soap, p, "-ns1:CheckSSN", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CheckSSN(struct soap *soap, const char *URL, struct __ns1__CheckSSN const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__CheckSSN(soap, p), 0) || soap_put___ns1__CheckSSN(soap, p, "-ns1:CheckSSN", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CheckSSN * SOAP_FMAC4 soap_get___ns1__CheckSSN(struct soap*, struct __ns1__CheckSSN *, const char*, const char*);

inline int soap_read___ns1__CheckSSN(struct soap *soap, struct __ns1__CheckSSN *p)
{
	if (p)
	{	soap_default___ns1__CheckSSN(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CheckSSN(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CheckSSN(struct soap *soap, const char *URL, struct __ns1__CheckSSN *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__CheckSSN(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CheckSSN(struct soap *soap, struct __ns1__CheckSSN *p)
{
	if (soap_read___ns1__CheckSSN(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__UploadTestResult_DEFINED
#define SOAP_TYPE___ns1__UploadTestResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UploadTestResult(struct soap*, struct __ns1__UploadTestResult *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UploadTestResult(struct soap*, const struct __ns1__UploadTestResult *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UploadTestResult(struct soap*, const char*, int, const struct __ns1__UploadTestResult *, const char*);
SOAP_FMAC3 struct __ns1__UploadTestResult * SOAP_FMAC4 soap_in___ns1__UploadTestResult(struct soap*, const char*, struct __ns1__UploadTestResult *, const char*);
SOAP_FMAC1 struct __ns1__UploadTestResult * SOAP_FMAC2 soap_instantiate___ns1__UploadTestResult(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UploadTestResult * soap_new___ns1__UploadTestResult(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__UploadTestResult(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__UploadTestResult * soap_new_req___ns1__UploadTestResult(
	struct soap *soap)
{
	struct __ns1__UploadTestResult *_p = soap_new___ns1__UploadTestResult(soap);
	if (_p)
	{	soap_default___ns1__UploadTestResult(soap, _p);
	}
	return _p;
}

inline struct __ns1__UploadTestResult * soap_new_set___ns1__UploadTestResult(
	struct soap *soap,
	_ns1__UploadTestResult *ns1__UploadTestResult)
{
	struct __ns1__UploadTestResult *_p = soap_new___ns1__UploadTestResult(soap);
	if (_p)
	{	soap_default___ns1__UploadTestResult(soap, _p);
		_p->ns1__UploadTestResult = ns1__UploadTestResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UploadTestResult(struct soap*, const struct __ns1__UploadTestResult *, const char*, const char*);

inline int soap_write___ns1__UploadTestResult(struct soap *soap, struct __ns1__UploadTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__UploadTestResult(soap, p), 0) || soap_put___ns1__UploadTestResult(soap, p, "-ns1:UploadTestResult", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__UploadTestResult(struct soap *soap, const char *URL, struct __ns1__UploadTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UploadTestResult(soap, p), 0) || soap_put___ns1__UploadTestResult(soap, p, "-ns1:UploadTestResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__UploadTestResult(struct soap *soap, const char *URL, struct __ns1__UploadTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__UploadTestResult(soap, p), 0) || soap_put___ns1__UploadTestResult(soap, p, "-ns1:UploadTestResult", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__UploadTestResult * SOAP_FMAC4 soap_get___ns1__UploadTestResult(struct soap*, struct __ns1__UploadTestResult *, const char*, const char*);

inline int soap_read___ns1__UploadTestResult(struct soap *soap, struct __ns1__UploadTestResult *p)
{
	if (p)
	{	soap_default___ns1__UploadTestResult(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__UploadTestResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__UploadTestResult(struct soap *soap, const char *URL, struct __ns1__UploadTestResult *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__UploadTestResult(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__UploadTestResult(struct soap *soap, struct __ns1__UploadTestResult *p)
{
	if (soap_read___ns1__UploadTestResult(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DoFunction_DEFINED
#define SOAP_TYPE___ns1__DoFunction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DoFunction(struct soap*, struct __ns1__DoFunction *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DoFunction(struct soap*, const struct __ns1__DoFunction *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DoFunction(struct soap*, const char*, int, const struct __ns1__DoFunction *, const char*);
SOAP_FMAC3 struct __ns1__DoFunction * SOAP_FMAC4 soap_in___ns1__DoFunction(struct soap*, const char*, struct __ns1__DoFunction *, const char*);
SOAP_FMAC1 struct __ns1__DoFunction * SOAP_FMAC2 soap_instantiate___ns1__DoFunction(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DoFunction * soap_new___ns1__DoFunction(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DoFunction(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DoFunction * soap_new_req___ns1__DoFunction(
	struct soap *soap)
{
	struct __ns1__DoFunction *_p = soap_new___ns1__DoFunction(soap);
	if (_p)
	{	soap_default___ns1__DoFunction(soap, _p);
	}
	return _p;
}

inline struct __ns1__DoFunction * soap_new_set___ns1__DoFunction(
	struct soap *soap,
	_ns1__DoFunction *ns1__DoFunction)
{
	struct __ns1__DoFunction *_p = soap_new___ns1__DoFunction(soap);
	if (_p)
	{	soap_default___ns1__DoFunction(soap, _p);
		_p->ns1__DoFunction = ns1__DoFunction;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DoFunction(struct soap*, const struct __ns1__DoFunction *, const char*, const char*);

inline int soap_write___ns1__DoFunction(struct soap *soap, struct __ns1__DoFunction const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__DoFunction(soap, p), 0) || soap_put___ns1__DoFunction(soap, p, "-ns1:DoFunction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DoFunction(struct soap *soap, const char *URL, struct __ns1__DoFunction const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoFunction(soap, p), 0) || soap_put___ns1__DoFunction(soap, p, "-ns1:DoFunction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DoFunction(struct soap *soap, const char *URL, struct __ns1__DoFunction const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__DoFunction(soap, p), 0) || soap_put___ns1__DoFunction(soap, p, "-ns1:DoFunction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DoFunction * SOAP_FMAC4 soap_get___ns1__DoFunction(struct soap*, struct __ns1__DoFunction *, const char*, const char*);

inline int soap_read___ns1__DoFunction(struct soap *soap, struct __ns1__DoFunction *p)
{
	if (p)
	{	soap_default___ns1__DoFunction(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__DoFunction(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DoFunction(struct soap *soap, const char *URL, struct __ns1__DoFunction *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__DoFunction(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DoFunction(struct soap *soap, struct __ns1__DoFunction *p)
{
	if (soap_read___ns1__DoFunction(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_ns1__BlindKeyNum_DEFINED
#define SOAP_TYPE_PointerTo_ns1__BlindKeyNum_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BlindKeyNum(struct soap*, _ns1__BlindKeyNum *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BlindKeyNum(struct soap*, const char *, int, _ns1__BlindKeyNum *const*, const char *);
SOAP_FMAC3 _ns1__BlindKeyNum ** SOAP_FMAC4 soap_in_PointerTo_ns1__BlindKeyNum(struct soap*, const char*, _ns1__BlindKeyNum **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BlindKeyNum(struct soap*, _ns1__BlindKeyNum *const*, const char*, const char*);
SOAP_FMAC3 _ns1__BlindKeyNum ** SOAP_FMAC4 soap_get_PointerTo_ns1__BlindKeyNum(struct soap*, _ns1__BlindKeyNum **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetSparrowCheckData_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetSparrowCheckData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetSparrowCheckData(struct soap*, _ns1__GetSparrowCheckData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetSparrowCheckData(struct soap*, const char *, int, _ns1__GetSparrowCheckData *const*, const char *);
SOAP_FMAC3 _ns1__GetSparrowCheckData ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetSparrowCheckData(struct soap*, const char*, _ns1__GetSparrowCheckData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetSparrowCheckData(struct soap*, _ns1__GetSparrowCheckData *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetSparrowCheckData ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetSparrowCheckData(struct soap*, _ns1__GetSparrowCheckData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__BindKey_DEFINED
#define SOAP_TYPE_PointerTo_ns1__BindKey_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BindKey(struct soap*, _ns1__BindKey *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BindKey(struct soap*, const char *, int, _ns1__BindKey *const*, const char *);
SOAP_FMAC3 _ns1__BindKey ** SOAP_FMAC4 soap_in_PointerTo_ns1__BindKey(struct soap*, const char*, _ns1__BindKey **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BindKey(struct soap*, _ns1__BindKey *const*, const char*, const char*);
SOAP_FMAC3 _ns1__BindKey ** SOAP_FMAC4 soap_get_PointerTo_ns1__BindKey(struct soap*, _ns1__BindKey **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ReleaseKey_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ReleaseKey_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ReleaseKey(struct soap*, _ns1__ReleaseKey *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ReleaseKey(struct soap*, const char *, int, _ns1__ReleaseKey *const*, const char *);
SOAP_FMAC3 _ns1__ReleaseKey ** SOAP_FMAC4 soap_in_PointerTo_ns1__ReleaseKey(struct soap*, const char*, _ns1__ReleaseKey **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ReleaseKey(struct soap*, _ns1__ReleaseKey *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ReleaseKey ** SOAP_FMAC4 soap_get_PointerTo_ns1__ReleaseKey(struct soap*, _ns1__ReleaseKey **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetShaoluKey_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetShaoluKey_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetShaoluKey(struct soap*, _ns1__GetShaoluKey *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetShaoluKey(struct soap*, const char *, int, _ns1__GetShaoluKey *const*, const char *);
SOAP_FMAC3 _ns1__GetShaoluKey ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetShaoluKey(struct soap*, const char*, _ns1__GetShaoluKey **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetShaoluKey(struct soap*, _ns1__GetShaoluKey *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetShaoluKey ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetShaoluKey(struct soap*, _ns1__GetShaoluKey **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__PCBData_USCOREUpload_DEFINED
#define SOAP_TYPE_PointerTo_ns1__PCBData_USCOREUpload_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__PCBData_USCOREUpload(struct soap*, _ns1__PCBData_USCOREUpload *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__PCBData_USCOREUpload(struct soap*, const char *, int, _ns1__PCBData_USCOREUpload *const*, const char *);
SOAP_FMAC3 _ns1__PCBData_USCOREUpload ** SOAP_FMAC4 soap_in_PointerTo_ns1__PCBData_USCOREUpload(struct soap*, const char*, _ns1__PCBData_USCOREUpload **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__PCBData_USCOREUpload(struct soap*, _ns1__PCBData_USCOREUpload *const*, const char*, const char*);
SOAP_FMAC3 _ns1__PCBData_USCOREUpload ** SOAP_FMAC4 soap_get_PointerTo_ns1__PCBData_USCOREUpload(struct soap*, _ns1__PCBData_USCOREUpload **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CartonWeight_USCOREUpload_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CartonWeight_USCOREUpload_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CartonWeight_USCOREUpload(struct soap*, _ns1__CartonWeight_USCOREUpload *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CartonWeight_USCOREUpload(struct soap*, const char *, int, _ns1__CartonWeight_USCOREUpload *const*, const char *);
SOAP_FMAC3 _ns1__CartonWeight_USCOREUpload ** SOAP_FMAC4 soap_in_PointerTo_ns1__CartonWeight_USCOREUpload(struct soap*, const char*, _ns1__CartonWeight_USCOREUpload **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CartonWeight_USCOREUpload(struct soap*, _ns1__CartonWeight_USCOREUpload *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CartonWeight_USCOREUpload ** SOAP_FMAC4 soap_get_PointerTo_ns1__CartonWeight_USCOREUpload(struct soap*, _ns1__CartonWeight_USCOREUpload **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetMacBySn_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetMacBySn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetMacBySn(struct soap*, _ns1__GetMacBySn *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetMacBySn(struct soap*, const char *, int, _ns1__GetMacBySn *const*, const char *);
SOAP_FMAC3 _ns1__GetMacBySn ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetMacBySn(struct soap*, const char*, _ns1__GetMacBySn **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetMacBySn(struct soap*, _ns1__GetMacBySn *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetMacBySn ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetMacBySn(struct soap*, _ns1__GetMacBySn **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GETMACID_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GETMACID_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GETMACID(struct soap*, _ns1__GETMACID *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GETMACID(struct soap*, const char *, int, _ns1__GETMACID *const*, const char *);
SOAP_FMAC3 _ns1__GETMACID ** SOAP_FMAC4 soap_in_PointerTo_ns1__GETMACID(struct soap*, const char*, _ns1__GETMACID **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GETMACID(struct soap*, _ns1__GETMACID *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GETMACID ** SOAP_FMAC4 soap_get_PointerTo_ns1__GETMACID(struct soap*, _ns1__GETMACID **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__test_DEFINED
#define SOAP_TYPE_PointerTo_ns1__test_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__test(struct soap*, _ns1__test *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__test(struct soap*, const char *, int, _ns1__test *const*, const char *);
SOAP_FMAC3 _ns1__test ** SOAP_FMAC4 soap_in_PointerTo_ns1__test(struct soap*, const char*, _ns1__test **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__test(struct soap*, _ns1__test *const*, const char*, const char*);
SOAP_FMAC3 _ns1__test ** SOAP_FMAC4 soap_get_PointerTo_ns1__test(struct soap*, _ns1__test **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SaveSSN_USCORENEW_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SaveSSN_USCORENEW_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SaveSSN_USCORENEW(struct soap*, _ns1__SaveSSN_USCORENEW *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SaveSSN_USCORENEW(struct soap*, const char *, int, _ns1__SaveSSN_USCORENEW *const*, const char *);
SOAP_FMAC3 _ns1__SaveSSN_USCORENEW ** SOAP_FMAC4 soap_in_PointerTo_ns1__SaveSSN_USCORENEW(struct soap*, const char*, _ns1__SaveSSN_USCORENEW **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SaveSSN_USCORENEW(struct soap*, _ns1__SaveSSN_USCORENEW *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SaveSSN_USCORENEW ** SOAP_FMAC4 soap_get_PointerTo_ns1__SaveSSN_USCORENEW(struct soap*, _ns1__SaveSSN_USCORENEW **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SfcTestResult_USCOREUpload_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SfcTestResult_USCOREUpload_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SfcTestResult_USCOREUpload(struct soap*, _ns1__SfcTestResult_USCOREUpload *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SfcTestResult_USCOREUpload(struct soap*, const char *, int, _ns1__SfcTestResult_USCOREUpload *const*, const char *);
SOAP_FMAC3 _ns1__SfcTestResult_USCOREUpload ** SOAP_FMAC4 soap_in_PointerTo_ns1__SfcTestResult_USCOREUpload(struct soap*, const char*, _ns1__SfcTestResult_USCOREUpload **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SfcTestResult_USCOREUpload(struct soap*, _ns1__SfcTestResult_USCOREUpload *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SfcTestResult_USCOREUpload ** SOAP_FMAC4 soap_get_PointerTo_ns1__SfcTestResult_USCOREUpload(struct soap*, _ns1__SfcTestResult_USCOREUpload **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__QueryBinding_DEFINED
#define SOAP_TYPE_PointerTo_ns1__QueryBinding_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__QueryBinding(struct soap*, _ns1__QueryBinding *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__QueryBinding(struct soap*, const char *, int, _ns1__QueryBinding *const*, const char *);
SOAP_FMAC3 _ns1__QueryBinding ** SOAP_FMAC4 soap_in_PointerTo_ns1__QueryBinding(struct soap*, const char*, _ns1__QueryBinding **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__QueryBinding(struct soap*, _ns1__QueryBinding *const*, const char*, const char*);
SOAP_FMAC3 _ns1__QueryBinding ** SOAP_FMAC4 soap_get_PointerTo_ns1__QueryBinding(struct soap*, _ns1__QueryBinding **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__Binding_DEFINED
#define SOAP_TYPE_PointerTo_ns1__Binding_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Binding(struct soap*, _ns1__Binding *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Binding(struct soap*, const char *, int, _ns1__Binding *const*, const char *);
SOAP_FMAC3 _ns1__Binding ** SOAP_FMAC4 soap_in_PointerTo_ns1__Binding(struct soap*, const char*, _ns1__Binding **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Binding(struct soap*, _ns1__Binding *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Binding ** SOAP_FMAC4 soap_get_PointerTo_ns1__Binding(struct soap*, _ns1__Binding **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CheckSSN_USCORENEW_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CheckSSN_USCORENEW_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CheckSSN_USCORENEW(struct soap*, _ns1__CheckSSN_USCORENEW *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CheckSSN_USCORENEW(struct soap*, const char *, int, _ns1__CheckSSN_USCORENEW *const*, const char *);
SOAP_FMAC3 _ns1__CheckSSN_USCORENEW ** SOAP_FMAC4 soap_in_PointerTo_ns1__CheckSSN_USCORENEW(struct soap*, const char*, _ns1__CheckSSN_USCORENEW **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CheckSSN_USCORENEW(struct soap*, _ns1__CheckSSN_USCORENEW *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CheckSSN_USCORENEW ** SOAP_FMAC4 soap_get_PointerTo_ns1__CheckSSN_USCORENEW(struct soap*, _ns1__CheckSSN_USCORENEW **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CheckSSN_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CheckSSN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CheckSSN(struct soap*, _ns1__CheckSSN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CheckSSN(struct soap*, const char *, int, _ns1__CheckSSN *const*, const char *);
SOAP_FMAC3 _ns1__CheckSSN ** SOAP_FMAC4 soap_in_PointerTo_ns1__CheckSSN(struct soap*, const char*, _ns1__CheckSSN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CheckSSN(struct soap*, _ns1__CheckSSN *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CheckSSN ** SOAP_FMAC4 soap_get_PointerTo_ns1__CheckSSN(struct soap*, _ns1__CheckSSN **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__UploadTestResult_DEFINED
#define SOAP_TYPE_PointerTo_ns1__UploadTestResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UploadTestResult(struct soap*, _ns1__UploadTestResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UploadTestResult(struct soap*, const char *, int, _ns1__UploadTestResult *const*, const char *);
SOAP_FMAC3 _ns1__UploadTestResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__UploadTestResult(struct soap*, const char*, _ns1__UploadTestResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UploadTestResult(struct soap*, _ns1__UploadTestResult *const*, const char*, const char*);
SOAP_FMAC3 _ns1__UploadTestResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__UploadTestResult(struct soap*, _ns1__UploadTestResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DoFunction_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DoFunction_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DoFunction(struct soap*, _ns1__DoFunction *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DoFunction(struct soap*, const char *, int, _ns1__DoFunction *const*, const char *);
SOAP_FMAC3 _ns1__DoFunction ** SOAP_FMAC4 soap_in_PointerTo_ns1__DoFunction(struct soap*, const char*, _ns1__DoFunction **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DoFunction(struct soap*, _ns1__DoFunction *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DoFunction ** SOAP_FMAC4 soap_get_PointerTo_ns1__DoFunction(struct soap*, _ns1__DoFunction **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GETMACIDResponse_GETMACIDResult_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GETMACIDResponse_GETMACIDResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GETMACIDResponse_GETMACIDResult(struct soap*, _ns1__GETMACIDResponse_GETMACIDResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GETMACIDResponse_GETMACIDResult(struct soap*, const char *, int, _ns1__GETMACIDResponse_GETMACIDResult *const*, const char *);
SOAP_FMAC3 _ns1__GETMACIDResponse_GETMACIDResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__GETMACIDResponse_GETMACIDResult(struct soap*, const char*, _ns1__GETMACIDResponse_GETMACIDResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GETMACIDResponse_GETMACIDResult(struct soap*, _ns1__GETMACIDResponse_GETMACIDResult *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GETMACIDResponse_GETMACIDResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__GETMACIDResponse_GETMACIDResult(struct soap*, _ns1__GETMACIDResponse_GETMACIDResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ArrayOfAnyType_DEFINED
#define SOAP_TYPE_PointerTons1__ArrayOfAnyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfAnyType(struct soap*, ns1__ArrayOfAnyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfAnyType(struct soap*, const char *, int, ns1__ArrayOfAnyType *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfAnyType ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfAnyType(struct soap*, const char*, ns1__ArrayOfAnyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfAnyType(struct soap*, ns1__ArrayOfAnyType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ArrayOfAnyType ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfAnyType(struct soap*, ns1__ArrayOfAnyType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_XML_DEFINED
#define SOAP_TYPE_PointerTo_XML_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

/* End of soapH.h */
