/* soapSFCWebServiceSoapProxy.cpp
   Generated by gSOAP 2.8.58 for webservice.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "stdafx.h"
#include "soapSFCWebServiceSoapProxy.h"

SFCWebServiceSoapProxy::SFCWebServiceSoapProxy() : soap(SOAP_IO_DEFAULT)
{	SFCWebServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

SFCWebServiceSoapProxy::SFCWebServiceSoapProxy(const SFCWebServiceSoapProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
}

SFCWebServiceSoapProxy::SFCWebServiceSoapProxy(const struct soap &_soap) : soap(_soap)
{ }

SFCWebServiceSoapProxy::SFCWebServiceSoapProxy(const char *endpoint) : soap(SOAP_IO_DEFAULT)
{	SFCWebServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

SFCWebServiceSoapProxy::SFCWebServiceSoapProxy(soap_mode iomode) : soap(iomode)
{	SFCWebServiceSoapProxy_init(iomode, iomode);
}

SFCWebServiceSoapProxy::SFCWebServiceSoapProxy(const char *endpoint, soap_mode iomode) : soap(iomode)
{	SFCWebServiceSoapProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

SFCWebServiceSoapProxy::SFCWebServiceSoapProxy(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	SFCWebServiceSoapProxy_init(imode, omode);
}

SFCWebServiceSoapProxy::~SFCWebServiceSoapProxy()
{
	this->destroy();
	}

void SFCWebServiceSoapProxy::SFCWebServiceSoapProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
        {"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns1", "http://tempuri.org/", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

SFCWebServiceSoapProxy *SFCWebServiceSoapProxy::copy()
{	SFCWebServiceSoapProxy *dup = SOAP_NEW_UNMANAGED(SFCWebServiceSoapProxy(*(struct soap*)this));
	return dup;
}

SFCWebServiceSoapProxy& SFCWebServiceSoapProxy::operator=(const SFCWebServiceSoapProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void SFCWebServiceSoapProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void SFCWebServiceSoapProxy::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	SFCWebServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void SFCWebServiceSoapProxy::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *SFCWebServiceSoapProxy::soap_header()
{	return this->header;
}

::SOAP_ENV__Fault *SFCWebServiceSoapProxy::soap_fault()
{	return this->fault;
}

const char *SFCWebServiceSoapProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *SFCWebServiceSoapProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int SFCWebServiceSoapProxy::soap_close_socket()
{	return soap_closesock(this);
}

int SFCWebServiceSoapProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void SFCWebServiceSoapProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void SFCWebServiceSoapProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *SFCWebServiceSoapProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int SFCWebServiceSoapProxy::DoFunction(const char *endpoint, const char *soap_action, _ns1__DoFunction *ns1__DoFunction, _ns1__DoFunctionResponse &ns1__DoFunctionResponse)
{	struct soap *soap = this;
	struct __ns1__DoFunction soap_tmp___ns1__DoFunction;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/DoFunction";
	soap_tmp___ns1__DoFunction.ns1__DoFunction = ns1__DoFunction;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__DoFunction(soap, &soap_tmp___ns1__DoFunction);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DoFunction(soap, &soap_tmp___ns1__DoFunction, "-ns1:DoFunction", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DoFunction(soap, &soap_tmp___ns1__DoFunction, "-ns1:DoFunction", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__DoFunctionResponse*>(&ns1__DoFunctionResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__DoFunctionResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DoFunctionResponse.soap_get(soap, "ns1:DoFunctionResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::UploadTestResult(const char *endpoint, const char *soap_action, _ns1__UploadTestResult *ns1__UploadTestResult, _ns1__UploadTestResultResponse &ns1__UploadTestResultResponse)
{	struct soap *soap = this;
	struct __ns1__UploadTestResult soap_tmp___ns1__UploadTestResult;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/UploadTestResult";
	soap_tmp___ns1__UploadTestResult.ns1__UploadTestResult = ns1__UploadTestResult;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__UploadTestResult(soap, &soap_tmp___ns1__UploadTestResult);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UploadTestResult(soap, &soap_tmp___ns1__UploadTestResult, "-ns1:UploadTestResult", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UploadTestResult(soap, &soap_tmp___ns1__UploadTestResult, "-ns1:UploadTestResult", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__UploadTestResultResponse*>(&ns1__UploadTestResultResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__UploadTestResultResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UploadTestResultResponse.soap_get(soap, "ns1:UploadTestResultResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::CheckSSN(const char *endpoint, const char *soap_action, _ns1__CheckSSN *ns1__CheckSSN, _ns1__CheckSSNResponse &ns1__CheckSSNResponse)
{	struct soap *soap = this;
	struct __ns1__CheckSSN soap_tmp___ns1__CheckSSN;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/CheckSSN";
	soap_tmp___ns1__CheckSSN.ns1__CheckSSN = ns1__CheckSSN;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__CheckSSN(soap, &soap_tmp___ns1__CheckSSN);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CheckSSN(soap, &soap_tmp___ns1__CheckSSN, "-ns1:CheckSSN", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CheckSSN(soap, &soap_tmp___ns1__CheckSSN, "-ns1:CheckSSN", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__CheckSSNResponse*>(&ns1__CheckSSNResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__CheckSSNResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckSSNResponse.soap_get(soap, "ns1:CheckSSNResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::CheckSSN_USCORENEW(const char *endpoint, const char *soap_action, _ns1__CheckSSN_USCORENEW *ns1__CheckSSN_USCORENEW, _ns1__CheckSSN_USCORENEWResponse &ns1__CheckSSN_USCORENEWResponse)
{	struct soap *soap = this;
	struct __ns1__CheckSSN_USCORENEW soap_tmp___ns1__CheckSSN_USCORENEW;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/CheckSSN_NEW";
	soap_tmp___ns1__CheckSSN_USCORENEW.ns1__CheckSSN_USCORENEW = ns1__CheckSSN_USCORENEW;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__CheckSSN_USCORENEW(soap, &soap_tmp___ns1__CheckSSN_USCORENEW);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CheckSSN_USCORENEW(soap, &soap_tmp___ns1__CheckSSN_USCORENEW, "-ns1:CheckSSN_NEW", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CheckSSN_USCORENEW(soap, &soap_tmp___ns1__CheckSSN_USCORENEW, "-ns1:CheckSSN_NEW", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__CheckSSN_USCORENEWResponse*>(&ns1__CheckSSN_USCORENEWResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__CheckSSN_USCORENEWResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckSSN_USCORENEWResponse.soap_get(soap, "ns1:CheckSSN_NEWResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::Binding(const char *endpoint, const char *soap_action, _ns1__Binding *ns1__Binding, _ns1__BindingResponse &ns1__BindingResponse)
{	struct soap *soap = this;
	struct __ns1__Binding soap_tmp___ns1__Binding;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/Binding";
	soap_tmp___ns1__Binding.ns1__Binding = ns1__Binding;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__Binding(soap, &soap_tmp___ns1__Binding);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Binding(soap, &soap_tmp___ns1__Binding, "-ns1:Binding", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Binding(soap, &soap_tmp___ns1__Binding, "-ns1:Binding", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__BindingResponse*>(&ns1__BindingResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__BindingResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__BindingResponse.soap_get(soap, "ns1:BindingResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::QueryBinding(const char *endpoint, const char *soap_action, _ns1__QueryBinding *ns1__QueryBinding, _ns1__QueryBindingResponse &ns1__QueryBindingResponse)
{	struct soap *soap = this;
	struct __ns1__QueryBinding soap_tmp___ns1__QueryBinding;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/QueryBinding";
	soap_tmp___ns1__QueryBinding.ns1__QueryBinding = ns1__QueryBinding;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryBinding(soap, &soap_tmp___ns1__QueryBinding);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryBinding(soap, &soap_tmp___ns1__QueryBinding, "-ns1:QueryBinding", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryBinding(soap, &soap_tmp___ns1__QueryBinding, "-ns1:QueryBinding", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__QueryBindingResponse*>(&ns1__QueryBindingResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__QueryBindingResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryBindingResponse.soap_get(soap, "ns1:QueryBindingResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::SfcTestResult_USCOREUpload(const char *endpoint, const char *soap_action, _ns1__SfcTestResult_USCOREUpload *ns1__SfcTestResult_USCOREUpload, _ns1__SfcTestResult_USCOREUploadResponse &ns1__SfcTestResult_USCOREUploadResponse)
{	struct soap *soap = this;
	struct __ns1__SfcTestResult_USCOREUpload soap_tmp___ns1__SfcTestResult_USCOREUpload;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/SfcTestResult_Upload";
	soap_tmp___ns1__SfcTestResult_USCOREUpload.ns1__SfcTestResult_USCOREUpload = ns1__SfcTestResult_USCOREUpload;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__SfcTestResult_USCOREUpload(soap, &soap_tmp___ns1__SfcTestResult_USCOREUpload);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SfcTestResult_USCOREUpload(soap, &soap_tmp___ns1__SfcTestResult_USCOREUpload, "-ns1:SfcTestResult_Upload", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SfcTestResult_USCOREUpload(soap, &soap_tmp___ns1__SfcTestResult_USCOREUpload, "-ns1:SfcTestResult_Upload", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__SfcTestResult_USCOREUploadResponse*>(&ns1__SfcTestResult_USCOREUploadResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__SfcTestResult_USCOREUploadResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SfcTestResult_USCOREUploadResponse.soap_get(soap, "ns1:SfcTestResult_UploadResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::SaveSSN_USCORENEW(const char *endpoint, const char *soap_action, _ns1__SaveSSN_USCORENEW *ns1__SaveSSN_USCORENEW, _ns1__SaveSSN_USCORENEWResponse &ns1__SaveSSN_USCORENEWResponse)
{	struct soap *soap = this;
	struct __ns1__SaveSSN_USCORENEW soap_tmp___ns1__SaveSSN_USCORENEW;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/SaveSSN_NEW";
	soap_tmp___ns1__SaveSSN_USCORENEW.ns1__SaveSSN_USCORENEW = ns1__SaveSSN_USCORENEW;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__SaveSSN_USCORENEW(soap, &soap_tmp___ns1__SaveSSN_USCORENEW);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SaveSSN_USCORENEW(soap, &soap_tmp___ns1__SaveSSN_USCORENEW, "-ns1:SaveSSN_NEW", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SaveSSN_USCORENEW(soap, &soap_tmp___ns1__SaveSSN_USCORENEW, "-ns1:SaveSSN_NEW", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__SaveSSN_USCORENEWResponse*>(&ns1__SaveSSN_USCORENEWResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__SaveSSN_USCORENEWResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SaveSSN_USCORENEWResponse.soap_get(soap, "ns1:SaveSSN_NEWResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::test(const char *endpoint, const char *soap_action, _ns1__test *ns1__test, _ns1__testResponse &ns1__testResponse)
{	struct soap *soap = this;
	struct __ns1__test soap_tmp___ns1__test;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/test";
	soap_tmp___ns1__test.ns1__test = ns1__test;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__test(soap, &soap_tmp___ns1__test);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__test(soap, &soap_tmp___ns1__test, "-ns1:test", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__test(soap, &soap_tmp___ns1__test, "-ns1:test", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__testResponse*>(&ns1__testResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__testResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__testResponse.soap_get(soap, "ns1:testResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::GETMACID(const char *endpoint, const char *soap_action, _ns1__GETMACID *ns1__GETMACID, _ns1__GETMACIDResponse &ns1__GETMACIDResponse)
{	struct soap *soap = this;
	struct __ns1__GETMACID soap_tmp___ns1__GETMACID;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GETMACID";
	soap_tmp___ns1__GETMACID.ns1__GETMACID = ns1__GETMACID;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__GETMACID(soap, &soap_tmp___ns1__GETMACID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GETMACID(soap, &soap_tmp___ns1__GETMACID, "-ns1:GETMACID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GETMACID(soap, &soap_tmp___ns1__GETMACID, "-ns1:GETMACID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__GETMACIDResponse*>(&ns1__GETMACIDResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GETMACIDResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GETMACIDResponse.soap_get(soap, "ns1:GETMACIDResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::GetMacBySn(const char *endpoint, const char *soap_action, _ns1__GetMacBySn *ns1__GetMacBySn, _ns1__GetMacBySnResponse &ns1__GetMacBySnResponse)
{	struct soap *soap = this;
	struct __ns1__GetMacBySn soap_tmp___ns1__GetMacBySn;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetMacBySn";
	soap_tmp___ns1__GetMacBySn.ns1__GetMacBySn = ns1__GetMacBySn;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetMacBySn(soap, &soap_tmp___ns1__GetMacBySn);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetMacBySn(soap, &soap_tmp___ns1__GetMacBySn, "-ns1:GetMacBySn", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetMacBySn(soap, &soap_tmp___ns1__GetMacBySn, "-ns1:GetMacBySn", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__GetMacBySnResponse*>(&ns1__GetMacBySnResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GetMacBySnResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetMacBySnResponse.soap_get(soap, "ns1:GetMacBySnResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::CartonWeight_USCOREUpload(const char *endpoint, const char *soap_action, _ns1__CartonWeight_USCOREUpload *ns1__CartonWeight_USCOREUpload, _ns1__CartonWeight_USCOREUploadResponse &ns1__CartonWeight_USCOREUploadResponse)
{	struct soap *soap = this;
	struct __ns1__CartonWeight_USCOREUpload soap_tmp___ns1__CartonWeight_USCOREUpload;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/CartonWeight_Upload";
	soap_tmp___ns1__CartonWeight_USCOREUpload.ns1__CartonWeight_USCOREUpload = ns1__CartonWeight_USCOREUpload;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__CartonWeight_USCOREUpload(soap, &soap_tmp___ns1__CartonWeight_USCOREUpload);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CartonWeight_USCOREUpload(soap, &soap_tmp___ns1__CartonWeight_USCOREUpload, "-ns1:CartonWeight_Upload", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CartonWeight_USCOREUpload(soap, &soap_tmp___ns1__CartonWeight_USCOREUpload, "-ns1:CartonWeight_Upload", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__CartonWeight_USCOREUploadResponse*>(&ns1__CartonWeight_USCOREUploadResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__CartonWeight_USCOREUploadResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CartonWeight_USCOREUploadResponse.soap_get(soap, "ns1:CartonWeight_UploadResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::PCBData_USCOREUpload(const char *endpoint, const char *soap_action, _ns1__PCBData_USCOREUpload *ns1__PCBData_USCOREUpload, _ns1__PCBData_USCOREUploadResponse &ns1__PCBData_USCOREUploadResponse)
{	struct soap *soap = this;
	struct __ns1__PCBData_USCOREUpload soap_tmp___ns1__PCBData_USCOREUpload;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/PCBData_Upload";
	soap_tmp___ns1__PCBData_USCOREUpload.ns1__PCBData_USCOREUpload = ns1__PCBData_USCOREUpload;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__PCBData_USCOREUpload(soap, &soap_tmp___ns1__PCBData_USCOREUpload);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__PCBData_USCOREUpload(soap, &soap_tmp___ns1__PCBData_USCOREUpload, "-ns1:PCBData_Upload", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__PCBData_USCOREUpload(soap, &soap_tmp___ns1__PCBData_USCOREUpload, "-ns1:PCBData_Upload", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__PCBData_USCOREUploadResponse*>(&ns1__PCBData_USCOREUploadResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__PCBData_USCOREUploadResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PCBData_USCOREUploadResponse.soap_get(soap, "ns1:PCBData_UploadResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::GetShaoluKey(const char *endpoint, const char *soap_action, _ns1__GetShaoluKey *ns1__GetShaoluKey, _ns1__GetShaoluKeyResponse &ns1__GetShaoluKeyResponse)
{	struct soap *soap = this;
	struct __ns1__GetShaoluKey soap_tmp___ns1__GetShaoluKey;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetShaoluKey";
	soap_tmp___ns1__GetShaoluKey.ns1__GetShaoluKey = ns1__GetShaoluKey;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetShaoluKey(soap, &soap_tmp___ns1__GetShaoluKey);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetShaoluKey(soap, &soap_tmp___ns1__GetShaoluKey, "-ns1:GetShaoluKey", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetShaoluKey(soap, &soap_tmp___ns1__GetShaoluKey, "-ns1:GetShaoluKey", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__GetShaoluKeyResponse*>(&ns1__GetShaoluKeyResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GetShaoluKeyResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetShaoluKeyResponse.soap_get(soap, "ns1:GetShaoluKeyResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::ReleaseKey(const char *endpoint, const char *soap_action, _ns1__ReleaseKey *ns1__ReleaseKey, _ns1__ReleaseKeyResponse &ns1__ReleaseKeyResponse)
{	struct soap *soap = this;
	struct __ns1__ReleaseKey soap_tmp___ns1__ReleaseKey;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/ReleaseKey";
	soap_tmp___ns1__ReleaseKey.ns1__ReleaseKey = ns1__ReleaseKey;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__ReleaseKey(soap, &soap_tmp___ns1__ReleaseKey);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ReleaseKey(soap, &soap_tmp___ns1__ReleaseKey, "-ns1:ReleaseKey", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ReleaseKey(soap, &soap_tmp___ns1__ReleaseKey, "-ns1:ReleaseKey", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__ReleaseKeyResponse*>(&ns1__ReleaseKeyResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__ReleaseKeyResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ReleaseKeyResponse.soap_get(soap, "ns1:ReleaseKeyResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::BindKey(const char *endpoint, const char *soap_action, _ns1__BindKey *ns1__BindKey, _ns1__BindKeyResponse &ns1__BindKeyResponse)
{	struct soap *soap = this;
	struct __ns1__BindKey soap_tmp___ns1__BindKey;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/BindKey";
	soap_tmp___ns1__BindKey.ns1__BindKey = ns1__BindKey;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__BindKey(soap, &soap_tmp___ns1__BindKey);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__BindKey(soap, &soap_tmp___ns1__BindKey, "-ns1:BindKey", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__BindKey(soap, &soap_tmp___ns1__BindKey, "-ns1:BindKey", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__BindKeyResponse*>(&ns1__BindKeyResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__BindKeyResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__BindKeyResponse.soap_get(soap, "ns1:BindKeyResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::GetSparrowCheckData(const char *endpoint, const char *soap_action, _ns1__GetSparrowCheckData *ns1__GetSparrowCheckData, _ns1__GetSparrowCheckDataResponse &ns1__GetSparrowCheckDataResponse)
{	struct soap *soap = this;
	struct __ns1__GetSparrowCheckData soap_tmp___ns1__GetSparrowCheckData;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetSparrowCheckData";
	soap_tmp___ns1__GetSparrowCheckData.ns1__GetSparrowCheckData = ns1__GetSparrowCheckData;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetSparrowCheckData(soap, &soap_tmp___ns1__GetSparrowCheckData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetSparrowCheckData(soap, &soap_tmp___ns1__GetSparrowCheckData, "-ns1:GetSparrowCheckData", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetSparrowCheckData(soap, &soap_tmp___ns1__GetSparrowCheckData, "-ns1:GetSparrowCheckData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__GetSparrowCheckDataResponse*>(&ns1__GetSparrowCheckDataResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GetSparrowCheckDataResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetSparrowCheckDataResponse.soap_get(soap, "ns1:GetSparrowCheckDataResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::BlindKeyNum(const char *endpoint, const char *soap_action, _ns1__BlindKeyNum *ns1__BlindKeyNum, _ns1__BlindKeyNumResponse &ns1__BlindKeyNumResponse)
{	struct soap *soap = this;
	struct __ns1__BlindKeyNum soap_tmp___ns1__BlindKeyNum;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/BlindKeyNum";
	soap_tmp___ns1__BlindKeyNum.ns1__BlindKeyNum = ns1__BlindKeyNum;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__BlindKeyNum(soap, &soap_tmp___ns1__BlindKeyNum);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__BlindKeyNum(soap, &soap_tmp___ns1__BlindKeyNum, "-ns1:BlindKeyNum", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__BlindKeyNum(soap, &soap_tmp___ns1__BlindKeyNum, "-ns1:BlindKeyNum", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__BlindKeyNumResponse*>(&ns1__BlindKeyNumResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__BlindKeyNumResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__BlindKeyNumResponse.soap_get(soap, "ns1:BlindKeyNumResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::DoFunction_(const char *endpoint, const char *soap_action, _ns1__DoFunction *ns1__DoFunction, _ns1__DoFunctionResponse &ns1__DoFunctionResponse)
{	struct soap *soap = this;
	struct __ns1__DoFunction_ soap_tmp___ns1__DoFunction_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/DoFunction";
	soap_tmp___ns1__DoFunction_.ns1__DoFunction = ns1__DoFunction;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__DoFunction_(soap, &soap_tmp___ns1__DoFunction_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DoFunction_(soap, &soap_tmp___ns1__DoFunction_, "-ns1:DoFunction", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DoFunction_(soap, &soap_tmp___ns1__DoFunction_, "-ns1:DoFunction", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__DoFunctionResponse*>(&ns1__DoFunctionResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__DoFunctionResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DoFunctionResponse.soap_get(soap, "ns1:DoFunctionResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::UploadTestResult_(const char *endpoint, const char *soap_action, _ns1__UploadTestResult *ns1__UploadTestResult, _ns1__UploadTestResultResponse &ns1__UploadTestResultResponse)
{	struct soap *soap = this;
	struct __ns1__UploadTestResult_ soap_tmp___ns1__UploadTestResult_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/UploadTestResult";
	soap_tmp___ns1__UploadTestResult_.ns1__UploadTestResult = ns1__UploadTestResult;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__UploadTestResult_(soap, &soap_tmp___ns1__UploadTestResult_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__UploadTestResult_(soap, &soap_tmp___ns1__UploadTestResult_, "-ns1:UploadTestResult", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__UploadTestResult_(soap, &soap_tmp___ns1__UploadTestResult_, "-ns1:UploadTestResult", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__UploadTestResultResponse*>(&ns1__UploadTestResultResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__UploadTestResultResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__UploadTestResultResponse.soap_get(soap, "ns1:UploadTestResultResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::CheckSSN_(const char *endpoint, const char *soap_action, _ns1__CheckSSN *ns1__CheckSSN, _ns1__CheckSSNResponse &ns1__CheckSSNResponse)
{	struct soap *soap = this;
	struct __ns1__CheckSSN_ soap_tmp___ns1__CheckSSN_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/CheckSSN";
	soap_tmp___ns1__CheckSSN_.ns1__CheckSSN = ns1__CheckSSN;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__CheckSSN_(soap, &soap_tmp___ns1__CheckSSN_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CheckSSN_(soap, &soap_tmp___ns1__CheckSSN_, "-ns1:CheckSSN", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CheckSSN_(soap, &soap_tmp___ns1__CheckSSN_, "-ns1:CheckSSN", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__CheckSSNResponse*>(&ns1__CheckSSNResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__CheckSSNResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckSSNResponse.soap_get(soap, "ns1:CheckSSNResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::CheckSSN_USCORENEW_(const char *endpoint, const char *soap_action, _ns1__CheckSSN_USCORENEW *ns1__CheckSSN_USCORENEW, _ns1__CheckSSN_USCORENEWResponse &ns1__CheckSSN_USCORENEWResponse)
{	struct soap *soap = this;
	struct __ns1__CheckSSN_USCORENEW_ soap_tmp___ns1__CheckSSN_USCORENEW_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/CheckSSN_NEW";
	soap_tmp___ns1__CheckSSN_USCORENEW_.ns1__CheckSSN_USCORENEW = ns1__CheckSSN_USCORENEW;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__CheckSSN_USCORENEW_(soap, &soap_tmp___ns1__CheckSSN_USCORENEW_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CheckSSN_USCORENEW_(soap, &soap_tmp___ns1__CheckSSN_USCORENEW_, "-ns1:CheckSSN_NEW", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CheckSSN_USCORENEW_(soap, &soap_tmp___ns1__CheckSSN_USCORENEW_, "-ns1:CheckSSN_NEW", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__CheckSSN_USCORENEWResponse*>(&ns1__CheckSSN_USCORENEWResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__CheckSSN_USCORENEWResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckSSN_USCORENEWResponse.soap_get(soap, "ns1:CheckSSN_NEWResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::Binding_(const char *endpoint, const char *soap_action, _ns1__Binding *ns1__Binding, _ns1__BindingResponse &ns1__BindingResponse)
{	struct soap *soap = this;
	struct __ns1__Binding_ soap_tmp___ns1__Binding_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/Binding";
	soap_tmp___ns1__Binding_.ns1__Binding = ns1__Binding;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__Binding_(soap, &soap_tmp___ns1__Binding_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Binding_(soap, &soap_tmp___ns1__Binding_, "-ns1:Binding", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Binding_(soap, &soap_tmp___ns1__Binding_, "-ns1:Binding", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__BindingResponse*>(&ns1__BindingResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__BindingResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__BindingResponse.soap_get(soap, "ns1:BindingResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::QueryBinding_(const char *endpoint, const char *soap_action, _ns1__QueryBinding *ns1__QueryBinding, _ns1__QueryBindingResponse &ns1__QueryBindingResponse)
{	struct soap *soap = this;
	struct __ns1__QueryBinding_ soap_tmp___ns1__QueryBinding_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/QueryBinding";
	soap_tmp___ns1__QueryBinding_.ns1__QueryBinding = ns1__QueryBinding;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__QueryBinding_(soap, &soap_tmp___ns1__QueryBinding_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__QueryBinding_(soap, &soap_tmp___ns1__QueryBinding_, "-ns1:QueryBinding", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__QueryBinding_(soap, &soap_tmp___ns1__QueryBinding_, "-ns1:QueryBinding", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__QueryBindingResponse*>(&ns1__QueryBindingResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__QueryBindingResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__QueryBindingResponse.soap_get(soap, "ns1:QueryBindingResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::SfcTestResult_USCOREUpload_(const char *endpoint, const char *soap_action, _ns1__SfcTestResult_USCOREUpload *ns1__SfcTestResult_USCOREUpload, _ns1__SfcTestResult_USCOREUploadResponse &ns1__SfcTestResult_USCOREUploadResponse)
{	struct soap *soap = this;
	struct __ns1__SfcTestResult_USCOREUpload_ soap_tmp___ns1__SfcTestResult_USCOREUpload_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/SfcTestResult_Upload";
	soap_tmp___ns1__SfcTestResult_USCOREUpload_.ns1__SfcTestResult_USCOREUpload = ns1__SfcTestResult_USCOREUpload;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__SfcTestResult_USCOREUpload_(soap, &soap_tmp___ns1__SfcTestResult_USCOREUpload_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SfcTestResult_USCOREUpload_(soap, &soap_tmp___ns1__SfcTestResult_USCOREUpload_, "-ns1:SfcTestResult_Upload", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SfcTestResult_USCOREUpload_(soap, &soap_tmp___ns1__SfcTestResult_USCOREUpload_, "-ns1:SfcTestResult_Upload", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__SfcTestResult_USCOREUploadResponse*>(&ns1__SfcTestResult_USCOREUploadResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__SfcTestResult_USCOREUploadResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SfcTestResult_USCOREUploadResponse.soap_get(soap, "ns1:SfcTestResult_UploadResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::SaveSSN_USCORENEW_(const char *endpoint, const char *soap_action, _ns1__SaveSSN_USCORENEW *ns1__SaveSSN_USCORENEW, _ns1__SaveSSN_USCORENEWResponse &ns1__SaveSSN_USCORENEWResponse)
{	struct soap *soap = this;
	struct __ns1__SaveSSN_USCORENEW_ soap_tmp___ns1__SaveSSN_USCORENEW_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/SaveSSN_NEW";
	soap_tmp___ns1__SaveSSN_USCORENEW_.ns1__SaveSSN_USCORENEW = ns1__SaveSSN_USCORENEW;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__SaveSSN_USCORENEW_(soap, &soap_tmp___ns1__SaveSSN_USCORENEW_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SaveSSN_USCORENEW_(soap, &soap_tmp___ns1__SaveSSN_USCORENEW_, "-ns1:SaveSSN_NEW", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SaveSSN_USCORENEW_(soap, &soap_tmp___ns1__SaveSSN_USCORENEW_, "-ns1:SaveSSN_NEW", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__SaveSSN_USCORENEWResponse*>(&ns1__SaveSSN_USCORENEWResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__SaveSSN_USCORENEWResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SaveSSN_USCORENEWResponse.soap_get(soap, "ns1:SaveSSN_NEWResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::test_(const char *endpoint, const char *soap_action, _ns1__test *ns1__test, _ns1__testResponse &ns1__testResponse)
{	struct soap *soap = this;
	struct __ns1__test_ soap_tmp___ns1__test_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/test";
	soap_tmp___ns1__test_.ns1__test = ns1__test;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__test_(soap, &soap_tmp___ns1__test_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__test_(soap, &soap_tmp___ns1__test_, "-ns1:test", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__test_(soap, &soap_tmp___ns1__test_, "-ns1:test", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__testResponse*>(&ns1__testResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__testResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__testResponse.soap_get(soap, "ns1:testResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::GETMACID_(const char *endpoint, const char *soap_action, _ns1__GETMACID *ns1__GETMACID, _ns1__GETMACIDResponse &ns1__GETMACIDResponse)
{	struct soap *soap = this;
	struct __ns1__GETMACID_ soap_tmp___ns1__GETMACID_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GETMACID";
	soap_tmp___ns1__GETMACID_.ns1__GETMACID = ns1__GETMACID;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__GETMACID_(soap, &soap_tmp___ns1__GETMACID_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GETMACID_(soap, &soap_tmp___ns1__GETMACID_, "-ns1:GETMACID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GETMACID_(soap, &soap_tmp___ns1__GETMACID_, "-ns1:GETMACID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__GETMACIDResponse*>(&ns1__GETMACIDResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GETMACIDResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GETMACIDResponse.soap_get(soap, "ns1:GETMACIDResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::GetMacBySn_(const char *endpoint, const char *soap_action, _ns1__GetMacBySn *ns1__GetMacBySn, _ns1__GetMacBySnResponse &ns1__GetMacBySnResponse)
{	struct soap *soap = this;
	struct __ns1__GetMacBySn_ soap_tmp___ns1__GetMacBySn_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetMacBySn";
	soap_tmp___ns1__GetMacBySn_.ns1__GetMacBySn = ns1__GetMacBySn;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetMacBySn_(soap, &soap_tmp___ns1__GetMacBySn_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetMacBySn_(soap, &soap_tmp___ns1__GetMacBySn_, "-ns1:GetMacBySn", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetMacBySn_(soap, &soap_tmp___ns1__GetMacBySn_, "-ns1:GetMacBySn", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__GetMacBySnResponse*>(&ns1__GetMacBySnResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GetMacBySnResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetMacBySnResponse.soap_get(soap, "ns1:GetMacBySnResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::CartonWeight_USCOREUpload_(const char *endpoint, const char *soap_action, _ns1__CartonWeight_USCOREUpload *ns1__CartonWeight_USCOREUpload, _ns1__CartonWeight_USCOREUploadResponse &ns1__CartonWeight_USCOREUploadResponse)
{	struct soap *soap = this;
	struct __ns1__CartonWeight_USCOREUpload_ soap_tmp___ns1__CartonWeight_USCOREUpload_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/CartonWeight_Upload";
	soap_tmp___ns1__CartonWeight_USCOREUpload_.ns1__CartonWeight_USCOREUpload = ns1__CartonWeight_USCOREUpload;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__CartonWeight_USCOREUpload_(soap, &soap_tmp___ns1__CartonWeight_USCOREUpload_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CartonWeight_USCOREUpload_(soap, &soap_tmp___ns1__CartonWeight_USCOREUpload_, "-ns1:CartonWeight_Upload", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CartonWeight_USCOREUpload_(soap, &soap_tmp___ns1__CartonWeight_USCOREUpload_, "-ns1:CartonWeight_Upload", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__CartonWeight_USCOREUploadResponse*>(&ns1__CartonWeight_USCOREUploadResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__CartonWeight_USCOREUploadResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CartonWeight_USCOREUploadResponse.soap_get(soap, "ns1:CartonWeight_UploadResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::PCBData_USCOREUpload_(const char *endpoint, const char *soap_action, _ns1__PCBData_USCOREUpload *ns1__PCBData_USCOREUpload, _ns1__PCBData_USCOREUploadResponse &ns1__PCBData_USCOREUploadResponse)
{	struct soap *soap = this;
	struct __ns1__PCBData_USCOREUpload_ soap_tmp___ns1__PCBData_USCOREUpload_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/PCBData_Upload";
	soap_tmp___ns1__PCBData_USCOREUpload_.ns1__PCBData_USCOREUpload = ns1__PCBData_USCOREUpload;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__PCBData_USCOREUpload_(soap, &soap_tmp___ns1__PCBData_USCOREUpload_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__PCBData_USCOREUpload_(soap, &soap_tmp___ns1__PCBData_USCOREUpload_, "-ns1:PCBData_Upload", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__PCBData_USCOREUpload_(soap, &soap_tmp___ns1__PCBData_USCOREUpload_, "-ns1:PCBData_Upload", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__PCBData_USCOREUploadResponse*>(&ns1__PCBData_USCOREUploadResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__PCBData_USCOREUploadResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__PCBData_USCOREUploadResponse.soap_get(soap, "ns1:PCBData_UploadResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::GetShaoluKey_(const char *endpoint, const char *soap_action, _ns1__GetShaoluKey *ns1__GetShaoluKey, _ns1__GetShaoluKeyResponse &ns1__GetShaoluKeyResponse)
{	struct soap *soap = this;
	struct __ns1__GetShaoluKey_ soap_tmp___ns1__GetShaoluKey_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetShaoluKey";
	soap_tmp___ns1__GetShaoluKey_.ns1__GetShaoluKey = ns1__GetShaoluKey;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetShaoluKey_(soap, &soap_tmp___ns1__GetShaoluKey_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetShaoluKey_(soap, &soap_tmp___ns1__GetShaoluKey_, "-ns1:GetShaoluKey", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetShaoluKey_(soap, &soap_tmp___ns1__GetShaoluKey_, "-ns1:GetShaoluKey", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__GetShaoluKeyResponse*>(&ns1__GetShaoluKeyResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GetShaoluKeyResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetShaoluKeyResponse.soap_get(soap, "ns1:GetShaoluKeyResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::ReleaseKey_(const char *endpoint, const char *soap_action, _ns1__ReleaseKey *ns1__ReleaseKey, _ns1__ReleaseKeyResponse &ns1__ReleaseKeyResponse)
{	struct soap *soap = this;
	struct __ns1__ReleaseKey_ soap_tmp___ns1__ReleaseKey_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/ReleaseKey";
	soap_tmp___ns1__ReleaseKey_.ns1__ReleaseKey = ns1__ReleaseKey;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__ReleaseKey_(soap, &soap_tmp___ns1__ReleaseKey_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ReleaseKey_(soap, &soap_tmp___ns1__ReleaseKey_, "-ns1:ReleaseKey", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ReleaseKey_(soap, &soap_tmp___ns1__ReleaseKey_, "-ns1:ReleaseKey", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__ReleaseKeyResponse*>(&ns1__ReleaseKeyResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__ReleaseKeyResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__ReleaseKeyResponse.soap_get(soap, "ns1:ReleaseKeyResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::BindKey_(const char *endpoint, const char *soap_action, _ns1__BindKey *ns1__BindKey, _ns1__BindKeyResponse &ns1__BindKeyResponse)
{	struct soap *soap = this;
	struct __ns1__BindKey_ soap_tmp___ns1__BindKey_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/BindKey";
	soap_tmp___ns1__BindKey_.ns1__BindKey = ns1__BindKey;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__BindKey_(soap, &soap_tmp___ns1__BindKey_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__BindKey_(soap, &soap_tmp___ns1__BindKey_, "-ns1:BindKey", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__BindKey_(soap, &soap_tmp___ns1__BindKey_, "-ns1:BindKey", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__BindKeyResponse*>(&ns1__BindKeyResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__BindKeyResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__BindKeyResponse.soap_get(soap, "ns1:BindKeyResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::GetSparrowCheckData_(const char *endpoint, const char *soap_action, _ns1__GetSparrowCheckData *ns1__GetSparrowCheckData, _ns1__GetSparrowCheckDataResponse &ns1__GetSparrowCheckDataResponse)
{	struct soap *soap = this;
	struct __ns1__GetSparrowCheckData_ soap_tmp___ns1__GetSparrowCheckData_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/GetSparrowCheckData";
	soap_tmp___ns1__GetSparrowCheckData_.ns1__GetSparrowCheckData = ns1__GetSparrowCheckData;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__GetSparrowCheckData_(soap, &soap_tmp___ns1__GetSparrowCheckData_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetSparrowCheckData_(soap, &soap_tmp___ns1__GetSparrowCheckData_, "-ns1:GetSparrowCheckData", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetSparrowCheckData_(soap, &soap_tmp___ns1__GetSparrowCheckData_, "-ns1:GetSparrowCheckData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__GetSparrowCheckDataResponse*>(&ns1__GetSparrowCheckDataResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GetSparrowCheckDataResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetSparrowCheckDataResponse.soap_get(soap, "ns1:GetSparrowCheckDataResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int SFCWebServiceSoapProxy::BlindKeyNum_(const char *endpoint, const char *soap_action, _ns1__BlindKeyNum *ns1__BlindKeyNum, _ns1__BlindKeyNumResponse &ns1__BlindKeyNumResponse)
{	struct soap *soap = this;
	struct __ns1__BlindKeyNum_ soap_tmp___ns1__BlindKeyNum_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.10.21/SfcWebService/SFCWebService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/BlindKeyNum";
	soap_tmp___ns1__BlindKeyNum_.ns1__BlindKeyNum = ns1__BlindKeyNum;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__BlindKeyNum_(soap, &soap_tmp___ns1__BlindKeyNum_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__BlindKeyNum_(soap, &soap_tmp___ns1__BlindKeyNum_, "-ns1:BlindKeyNum", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__BlindKeyNum_(soap, &soap_tmp___ns1__BlindKeyNum_, "-ns1:BlindKeyNum", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__BlindKeyNumResponse*>(&ns1__BlindKeyNumResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__BlindKeyNumResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__BlindKeyNumResponse.soap_get(soap, "ns1:BlindKeyNumResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
